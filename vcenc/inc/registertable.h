/* Copyright 2014 Verisilicon(Beijing) Co.,Ltd. All Rights Reserved. */
/* Register interface based on the document version 1.00 */
H2REG(HWIF_PRODUCT_ID, 0, 0xffff0000, 16, 0, RO, NONE, "Product ID"),
    H2REG(HWIF_MAJOR_NUMBER, 0, 0x0000ff00, 8, 0, RO, NONE, "Major number"),
    H2REG(HWIF_MINOR_NUMBER, 0, 0x000000ff, 0, 0, RO, NONE, "Minor number"),
    H2REG(HWIF_ENC_IRQ_TYPE_SW_RESET, 4, 0x01000000, 24, 0, RW, NONE,
          "Irq type sw reset mask.0=normal interruption. 1=abnormal "
          "interruption"),
    H2REG(HWIF_ENC_IRQ_TYPE_FUSE_ERROR, 4, 0x00800000, 23, 0, RW, NONE,
          "Irq type fuse error mask.0=normal interruption. 1=abnormal "
          "interruption"),
    H2REG(HWIF_ENC_IRQ_TYPE_BUFFER_FULL, 4, 0x00400000, 22, 0, RW, NONE,
          "Irq type fuse buffer full mask.0=normal interruption. 1=abnormal "
          "interruption"),
    H2REG(HWIF_ENC_IRQ_TYPE_BUS_ERROR, 4, 0x00200000, 21, 0, RW, NONE,
          "Irq type bus error mask.0=normal interruption. 1=abnormal "
          "interruption"),
    H2REG(HWIF_ENC_IRQ_TYPE_TIMEOUT, 4, 0x00100000, 20, 0, RW, NONE,
          "Irq type timeout mask. 0=normal interruption. 1=abnormal "
          "interruption"),
    H2REG(HWIF_ENC_IRQ_TYPE_STRM_SEGMENT, 4, 0x00080000, 19, 0, RW, NONE,
          "Irq type stream segment mask. 0=normal interruption. 1=abnormal "
          "interruption."),
    H2REG(HWIF_ENC_IRQ_TYPE_LINE_BUFFER, 4, 0x00040000, 18, 0, RW, NONE,
          "Irq type line buffer mask. 0=normal interruption. 1=abnormal "
          "interruption."),
    H2REG(HWIF_ENC_IRQ_TYPE_SLICE_RDY, 4, 0x00020000, 17, 0, RW, NONE,
          "Irq type slice ready mask. 0=normal interruption. 1=abnormal "
          "interruption."),
    H2REG(HWIF_ENC_IRQ_TYPE_FRAME_RDY, 4, 0x00010000, 16, 0, RW, NONE,
          "Irq type frame ready mask. 0=normal interruption. 1=abnormal "
          "interruption."),
    H2REG(HWIF_ENC_STRM_SEGMENT_RDY_INT, 4, 0x00001000, 12, 0, RW, NONE,
          "Output stream segment IRQ. When high  stream segment requests an "
          "interrupt. SW will reset this after interrupt is handled."),
    H2REG(HWIF_ENC_TIMEOUT_INT, 4, 0x00000800, 11, 0, RW, NONE, "enable timeout interrupt when 1"),
    H2REG(HWIF_ENC_IRQ_FUSE_ERROR, 4, 0x00000200, 9, 0, RW, NONE,
          "Interrupt Interrupt status bit encoder. When this bit is high "
          "encoder has a FUSE error. SW try to setup feature but HW miss the "
          "feature set"),
    H2REG(HWIF_ENC_SLICE_RDY_STATUS, 4, 0x00000100, 8, 0, RW, NONE,
          "Interrupt status bit encoder. When this bit is high encoder has "
          "encoded a slice."),
    H2REG(HWIF_ENC_IRQ_LINE_BUFFER, 4, 0x00000080, 7, 0, RW, NONE,
          "Interrupt status bit encoder linebuffer empty. When setting. "
          "Encoder has finished encoding input buffers."),
    H2REG(HWIF_ENC_TIMEOUT, 4, 0x00000040, 6, 0, RW, NONE,
          "Interrupt status bit encoder timeout. When high the encoder has been "
          "idling for too long. Possible only if timeout interrupt is enabled"),
    H2REG(HWIF_ENC_BUFFER_FULL, 4, 0x00000020, 5, 1, RW, NONE,
          "IRQ buffer full status bit. bufferFullInterrupt"),
    H2REG(HWIF_ENC_SW_RESET, 4, 0x00000010, 4, 0, RW, NONE, "IRQ SW reset status bit."),
    H2REG(HWIF_ENC_BUS_ERROR_STATUS, 4, 0x00000008, 3, 0, RW, NONE,
          "Interrupt status bit bus. Error response from bus."),
    H2REG(HWIF_ENC_FRAME_RDY_STATUS, 4, 0x00000004, 2, 0, RW, NONE,
          "Interrupt status bit encoder. When this bit is high encoder has "
          "encoded a picture."),
    H2REG(HWIF_ENC_IRQ_DIS, 4, 0x00000002, 1, 0, RW, NONE,
          "Encoder IRQ disable. When high  there are no interrupts concerning "
          "encoder from HW. Polling must be used to see the interrupt statuses."),
    H2REG(HWIF_ENC_IRQ, 4, 0x00000001, 0, 0, RW, NONE,
          "Encoder IRQ. When high  encoder requests an interrupt. SW will "
          "reset this after interrupt is handled."),
    H2REG(HWIF_ENC_AXI_WRITE_ID, 8, 0xff000000, 24, 0, RW, NONE, "AXI Write ID"),
    H2REG(HWIF_ENC_AXI_READ_ID, 8, 0x00ff0000, 16, 0, RW, NONE, "AXI Read ID"),
    H2REG(HWIF_ENC_STRM_SWAP, 8, 0x0000f000, 12, 0, RW, NONE,
          "byte swap config for output stream data.4 Bit byte order vector to "
          "control byte locations inside HW internal 128 bit data vector. For "
          "64 and 32 bit external bus widths the data is first gathered to 128 "
          "bit width and then bytes swapped accordingly"),
    H2REG(HWIF_ENC_PIC_SWAP, 8, 0x00000f00, 8, 0, RW, NONE,
          "Byte swap configuration for picture data (encoder input)"),
    H2REG(HWIF_ENC_ROI_MAP_QP_DELTA_MAP_SWAP, 8, 0x000000f0, 4, 0, RW, NONE,
          "Byte swap configuration for qp delta of ROI map"),
    H2REG(HWIF_ENC_CTB_RC_MEM_OUT_SWAP, 8, 0x0000000f, 0, 0, RW, NONE,
          "Byte swap configuration for ctb rate control memory out"),
    H2REG(HWIF_ENC_CLOCK_GATE_ENCODER_E, 12, 0x80000000, 31, 0, RW, NONE,
          "ASIC encoder clock gating control. 0=clock always on. 1=hardware "
          "clock gating control"),
    H2REG(HWIF_ENC_CLOCK_GATE_ENCODER_H265_E, 12, 0x40000000, 30, 0, RW, NONE,
          "ASIC encoder clock gating control for h265. 0=clock always on. "
          "1=hardware clock gating control"),
    H2REG(HWIF_ENC_CLOCK_GATE_ENCODER_H264_E, 12, 0x20000000, 29, 0, RW, NONE,
          "ASIC encoder clock gating control for h264. 0=clock always on. "
          "1=hardware clock gating control"),
    H2REG(HWIF_ENC_CLOCK_GATE_INTER_E, 12, 0x10000000, 28, 0, RW, NONE,
          "ASIC inter clock gating control. 0=clock always on. 1=hardware "
          "clock gating control"),
    H2REG(HWIF_ENC_CLOCK_GATE_INTER_H265_E, 12, 0x08000000, 27, 0, RW, NONE,
          "ASIC inter clock gating control for h265. 0=clock always on. "
          "1=hardware clock gating control"),
    H2REG(HWIF_ENC_CLOCK_GATE_INTER_H264_E, 12, 0x04000000, 26, 0, RW, NONE,
          "ASIC inter clock gating control for h264. 0=clock always on. "
          "1=hardware clock gating control"),
    H2REG(HWIF_ENC_AXI_WR_ID_E, 12, 0x02000000, 25, 0, RW, NONE,
          "axi write enable 0=disable. 1=enable."),
    H2REG(HWIF_ENC_AXI_RD_ID_E, 12, 0x01000000, 24, 0, RW, NONE,
          "axi read enable 0=disable. 1=enable."),
    H2REG(HWIF_ENC_CU_INFO_MEM_OUT_SWAP, 12, 0x00f00000, 20, 0, RW, NONE,
          "Byte swap configuration for cu information memory out"),
    H2REG(HWIF_ENC_SRAM_POWER_DOWN_DISABLE, 12, 0x00080000, 19, 0, RW, NONE,
          "SRAM power down mode disable; 1=SRAM power always on; 0:go into "
          "power down mode when clock is gated"),
    H2REG(HWIF_ENC_AXI_AR_QOS, 12, 0x00000f00, 8, 0, RW, NONE,
          "AXI Qos identifier sent on the read address channel for read "
          "transaction"),
    H2REG(HWIF_ENC_AXI_AW_QOS, 12, 0x000000f0, 4, 0, RW, NONE,
          "AXI Qos identifier sent on the write address channel for write "
          "transaction"),
    H2REG(HWIF_ENC_SLICE_INT, 12, 0x00000008, 3, 1, RW, NONE, "enable slice interrupt when 1"),
    H2REG(HWIF_ENC_LINE_BUFFER_INT, 12, 0x00000004, 2, 1, RW, NONE,
          "enable line buffer interrupt when 1"),
    H2REG(HWIF_ENC_STRM_SEGMENT_INT, 12, 0x00000002, 1, 1, RW, NONE,
          "enable stream segment interrupt when 1"),
    H2REG(HWIF_ENC_MODE, 16, 0xe0000000, 29, 1, RW, NONE,
          "Encoding mode. streamType.1=hevc. 2=h264. 3=av1. 4=jpeg. "
          "5=Reserved. 6=cutree. 7=vp9"),
    H2REG(HWIF_ENC_MIN_CB_SIZE, 16, 0x06000000, 25, 0, RW, NONE,
          "min cb size:0-8x8:1-16x16:2-32x32:3-64x64:we only support 8x8"),
    H2REG(HWIF_ENC_MAX_CB_SIZE, 16, 0x01800000, 23, 0, RW, NONE,
          "max cb size:0-8x8:1-16x16:2-32x32:3-64x64:we only support 64x64"),
    H2REG(HWIF_ENC_MIN_TRB_SIZE, 16, 0x00600000, 21, 0, RW, NONE,
          "min tr block size:0-4x4:1-8x8:2-16x16:3-32x32:we only support 4x4"),
    H2REG(HWIF_ENC_MAX_TRB_SIZE, 16, 0x00180000, 19, 0, RW, NONE,
          "max tr block size:0-4x4:1-8x8:2-16x16:3-32x32:we only support 16x16"),
    H2REG(HWIF_ENC_OUTPUT_STRM_MODE, 16, 0x00040000, 18, 1, RW, NONE,
          "output stream mode:0-byte stream:1-Nal stream"),
    H2REG(HWIF_ENC_CHROMA_QP_OFFSET, 16, 0x0003e000, 13, 0, RW, NONE, "chroma qp offset[-12~12]"),
    H2REG(HWIF_ENC_STRONG_INTRA_SMOOTHING_ENABLED_FLAG, 16, 0x00001000, 12, 0, RW, NONE,
          "HEVC IntraTU32x32 strong intra smoothing filter enable flag"),
    H2REG(HWIF_BW_LINEBUF_DISABLE, 16, 0x00000800, 11, 0, RW, NONE, "BW line buffer disable"),
    H2REG(HWIF_ENC_SCALING_LIST_ENABLED_FLAG, 16, 0x00000100, 8, 0, RW, NONE,
          "scaling_list_enabled_flag"),
    H2REG(HWIF_ENC_ACTIVE_OVERRIDE_FLAG, 16, 0x00000080, 7, 0, RW, NONE, "active override flag"),
    H2REG(HWIF_ENC_SAO_ENABLE, 16, 0x00000040, 6, 0, RW, NONE, "SAO enable"),
    H2REG(HWIF_ENC_MAX_TRANS_HIERARCHY_DEPTH_INTRA, 16, 0x00000038, 3, 0, RW, NONE,
          "max transform hierarchy depth of intra"),
    H2REG(HWIF_ENC_MAX_TRANS_HIERARCHY_DEPTH_INTER, 16, 0x00000007, 0, 0, RW, NONE,
          "max transform hierarchy depth of inter"),
    H2REG(HWIF_ENC_JPEG_PIC_WIDTH, 20, 0xfff00000, 20, 1, RW, NONE,
          "Encoded jpeg width. jpgLumWidth(unit 8 pixels)"),
    H2REG(HWIF_ENC_JPEG_PIC_HEIGHT, 20, 0x000fff00, 8, 1, RW, NONE,
          "Encoded jpeg height. jpgLumHeight(unit 8 pixels):Max width x height "
          "is 16384 x 16384"),
    H2REG(HWIF_ENC_PIC_WIDTH, 20, 0xffc00000, 22, 1, RW, NONE,
          "Encoded width. lumWidthLsb(unit 8 pixels). bit[9:0]"),
    H2REG(HWIF_ENC_PIC_HEIGHT, 20, 0x003ff800, 11, 1, RW, NONE,
          "Encoded height. lumHeight(unit 8 pixels):Max width x height is 4096 "
          "x 4096"),
    H2REG(HWIF_ENC_PPS_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG, 20, 0x00000200, 9, 0, RW, NONE,
          "deblocking filter override enable flag.0:disable 1:enable"),
    H2REG(HWIF_ENC_SLICE_DEBLOCKING_FILTER_OVERRIDE_FLAG, 20, 0x00000100, 8, 0, RW, NONE,
          "slice deblocking filter override flag.0:no 1:yes"),
    H2REG(HWIF_ENC_OUTPUT_CU_INFO_ENABLED, 20, 0x00000040, 6, 1, RW, NONE,
          "Enable dumping cu information to external memory.0:disable 1:enable"),
    H2REG(HWIF_ENC_BUFFER_FULL_CONTINUE, 20, 0x00000020, 5, 0, RW, NONE,
          "sw_enc_jpeg_pic_height. Reserved for future. Not used now."),
    H2REG(HWIF_ENC_REF_FRAMES, 20, 0x00000018, 3, 0, RW, NONE,
          "sw_enc_ref_frames. Reserved for future. Not used now."),
    H2REG(HWIF_ENC_FRAME_CODING_TYPE, 20, 0x00000006, 1, 1, RW, NONE,
          "Encoded picture type. frameType.:1-I:0-P:2:B"),
    H2REG(HWIF_ENC_E, 20, 0x00000001, 0, 0, RW, NONE,
          "encoder enable. Setting this bit high will start the encoding "
          "operation. HW will reset this when picture is processed or bus "
          "error or timeout interrupt is given."),
    H2REG(HWIF_ENC_SLICE_SIZE, 24, 0xfe000000, 25, 1, RW, NONE,
          "slice size in ctu row for HEVC and MB row for H264"),
    H2REG(HWIF_ENC_NUM_SHORT_TERM_REF_PIC_SETS, 24, 0x01c00000, 22, 0, RW, NONE,
          "number of short term reference picture sets. For H2v1 only."),
    H2REG(HWIF_ENC_NUM_SHORT_TERM_REF_PIC_SETS_V2, 24, 0x01f00000, 20, 0, RW, NONE,
          "number of short term reference picture sets"),
    H2REG(HWIF_ENC_NUM_NEGATIVE_PICS, 24, 0x000c0000, 18, 0, RW, NONE,
          "sw_enc_num_negative_pics. Reserved for future. Not used now."),
    H2REG(HWIF_ENC_NUM_POSITIVE_PICS, 24, 0x00030000, 16, 0, RW, NONE,
          "sw_enc_num_positive_pics. Reserved for future. Not used now."),
    H2REG(HWIF_ENC_DEBLOCKING_FILTER_CTRL, 24, 0x00008000, 15, 0, RW, NONE,
          "deblocking filter control.De-block filtering disable: 1 = filtering "
          "is disabled for current picture. 0 = filtering is enabled for "
          "current picture"),
    H2REG(HWIF_ENC_DEBLOCKING_TC_OFFSET, 24, 0x00007800, 11, 0, RW, NONE,
          "deblocking tc offset:-6~6"),
    H2REG(HWIF_ENC_DEBLOCKING_BETA_OFFSET, 24, 0x00000780, 7, 0, RW, NONE,
          "deblocking beta offset:-6~6"),
    H2REG(HWIF_ENC_RPS_ID, 24, 0x0000001c, 2, 0, RW, NONE,
          "rps Id:used for slice header. For H2V1 only."),
    H2REG(HWIF_ENC_RPS_ID_V2, 24, 0x0000007c, 2, 0, RW, NONE, "rps Id:used for slice header"),
    H2REG(HWIF_ENC_NAL_SIZE_WRITE, 24, 0x00000002, 1, 1, RW, NONE,
          "Enable writing size of each NAL unit to BaseControl"),
    H2REG(HWIF_ENC_CU_QP_DELTA_ENABLED, 24, 0x00000001, 0, 0, RW, NONE,
          "cu qp delta encoding is enabled:used for ROI"),
    H2REG(HWIF_ENC_PIC_INIT_QP, 28, 0xfc000000, 26, 1, RW, NONE, "picture header qp"),
    H2REG(HWIF_ENC_CABAC_INIT_FLAG, 28, 0x02000000, 25, 0, RW, NONE, "cabac init flag"),
    H2REG(HWIF_ENC_NUM_SLICES_READY, 28, 0x01fe0000, 17, 0, RW, NONE,
          "HEVC amount of completed slices."),
    H2REG(HWIF_ENC_DIFF_CU_QP_DELTA_DEPTH, 28, 0x0000c000, 14, 0, RW, NONE,
          "difference of cu qp delta depth"),
    H2REG(HWIF_ENC_PIC_QP, 28, 0x00003f00, 8, 1, RW, NONE, "qp of current picture"),
    H2REG(HWIF_ENC_ROI1_DELTA_QP, 28, 0x000000f0, 4, 0, RW, NONE, "ROI1 delta qp"),
    H2REG(HWIF_ENC_ROI2_DELTA_QP, 28, 0x0000000f, 0, 0, RW, NONE, "ROI2 delta qp"),
    H2REG(HWIF_ENC_OUTPUT_STRM_BASE, 32, 0xffffffff, 0, 0, RW, ENC_OUT,
          "stream output buffer0 base address"),
    H2REG(HWIF_ENC_OUTPUT_STRM_BUFFER_LIMIT, 36, 0xffffffff, 0, 1, RW, NONE,
          "Stream buffer0 limit / Output stream size (bytes). If buffer0 limit "
          "is reached and sw_enc_HWStreamBufChain=0 buffer_full_IRQ will be "
          "generated. Output stream size will be updated here when a slice or "
          "frame is finished"),
    H2REG(HWIF_ENC_SIZE_TBL_BASE, 40, 0xffffffff, 0, 0, RW, ENC_OUT, "sizeTblBase"),
    H2REG(HWIF_ENC_POC, 44, 0xffffffff, 0, 0, RW, NONE, "encoded Picture order count"),
    H2REG(HWIF_ENC_INPUT_Y_BASE, 48, 0xffffffff, 0, 0, RW, ENC_IN, "input image lum base address"),
    H2REG(HWIF_ENC_INPUT_CB_BASE, 52, 0xffffffff, 0, 0, RW, ENC_IN, "input image cb base address"),
    H2REG(HWIF_ENC_INPUT_CR_BASE, 56, 0xffffffff, 0, 0, RW, ENC_OUT, "input image cr base address"),
    H2REG(HWIF_ENC_RECON_Y_BASE, 60, 0xffffffff, 0, 0, RW, ENC_OUT, "recon image lum base address"),
    H2REG(HWIF_ENC_REF_RINGBUF_LUMA_WR_OFFSET, 60, 0xffffffff, 0, 0, RW, NONE,
          "reference and recon ring buffer luma write offset"),
    H2REG(HWIF_ENC_RECON_CHROMA_BASE, 64, 0xffffffff, 0, 0, RW, ENC_OUT,
          "recon image chroma base address"),
    H2REG(HWIF_ENC_REF_RINGBUF_CHROMA_WR_OFFSET, 64, 0xffffffff, 0, 0, RW, NONE,
          "reference and recon ring buffer chroma write offset"),
    H2REG(HWIF_ENC_DELTA_POC0, 68, 0xffc00000, 22, 0, RW, NONE, "delta of poc0.  For H2V1 only."),
    H2REG(HWIF_ENC_L0_DELTA_POC0, 68, 0xffc00000, 22, 0, RW, NONE,
          "delta poc of list0 pic0. For H2V2 or later version."),
    H2REG(HWIF_ENC_L0_LONG_TERM_FLAG0, 68, 0x00200000, 21, 0, RW, NONE, "list0 pic0 is long term"),
    H2REG(HWIF_ENC_USED_BY_CURR_PIC0, 68, 0x00100000, 20, 0, RW, NONE,
          "used by current pic0.  For H2V1 only."),
    H2REG(HWIF_ENC_L0_USED_BY_CURR_PIC0, 68, 0x00100000, 20, 0, RW, NONE,
          "list0 pic0 used by current. For H2V2 or later version."),
    H2REG(HWIF_ENC_DELTA_POC1, 68, 0x000ffc00, 10, 0, RW, NONE, "delta of poc1. For H2V1 only."),
    H2REG(HWIF_ENC_L0_DELTA_POC1, 68, 0x000ffc00, 10, 0, RW, NONE,
          "delta poc of list0 pic1. For H2V2 or later version."),
    H2REG(HWIF_ENC_L0_LONG_TERM_FLAG1, 68, 0x00000200, 9, 0, RW, NONE, "list0 pic1 is long term"),
    H2REG(HWIF_ENC_USED_BY_CURR_PIC1, 68, 0x00000100, 8, 0, RW, NONE,
          "used by current pic1. For H2V1 only."),
    H2REG(HWIF_ENC_L0_USED_BY_CURR_PIC1, 68, 0x00000100, 8, 0, RW, NONE,
          "list0 pic1 used by current. For H2V2 or later version."),
    H2REG(HWIF_ENC_ACTIVE_L0_CNT, 68, 0x000000c0, 6, 0, RW, NONE, "active l0 count"),
    H2REG(HWIF_ENC_RECON_LUMA_COMPRESSOR_ENABLE, 68, 0x00000020, 5, 1, RW, NONE,
          "recon frame luma compressor enable flag 0=disable 1=enable."),
    H2REG(HWIF_ENC_RECON_CHROMA_COMPRESSOR_ENABLE, 68, 0x00000010, 4, 1, RW, NONE,
          "recon frame chroma compressor enable flag 0=disable 1=enable."),
    H2REG(HWIF_ENC_L0_REF0_LUMA_COMPRESSOR_ENABLE, 68, 0x00000008, 3, 1, RW, NONE,
          "list0 ref0 frame luma compressor enable flag 0=disable 1=enable."),
    H2REG(HWIF_ENC_L0_REF0_CHROMA_COMPRESSOR_ENABLE, 68, 0x00000004, 2, 1, RW, NONE,
          "list0 ref0 frame chroma compressor enable flag 0=disable 1=enable."),
    H2REG(HWIF_ENC_L0_REF1_LUMA_COMPRESSOR_ENABLE, 68, 0x00000002, 1, 0, RW, NONE,
          "list0 ref1 frame luma compressor enable flag 0=disable 1=enable."),
    H2REG(HWIF_ENC_L0_REF1_CHROMA_COMPRESSOR_ENABLE, 68, 0x00000001, 0, 0, RW, NONE,
          "list0 ref1 frame chroma compressor enable flag 0=disable 1=enable."),
    H2REG(HWIF_ENC_REFPIC_RECON_L0_Y0, 72, 0xffffffff, 0, 0, RW, ENC_IN,
          "reference picture reconstructed list0 luma0"),
    H2REG(HWIF_ENC_REF_RINGBUF_LUMA_RD_OFFSET, 72, 0xffffffff, 0, 0, RW, NONE,
          "reference and recon common buffer luma read offset"),
    H2REG(HWIF_ENC_STRM_STARTOFFSET, 72, 0xfc000000, 26, 0, RW, NONE,
          "Stream start offset = amount of StrmHdrRem (bits) [0..63]"),
    H2REG(HWIF_ENC_JPEG_SLICE, 72, 0x02000000, 25, 0, RW, NONE,
          "JPEG slice enable. 0=picture ends with EOI. 1=slice ends with RST"),
    H2REG(HWIF_ENC_JPEG_MODE, 72, 0x01000000, 24, 0, RW, NONE,
          "JPEG mode. 0=4:2:0 (4lum+2chr blocks/MCU). 1=4:2:2 (2lum+2chr "
          "blocks/MCU)"),
    H2REG(HWIF_ENC_JPEG_RSTINT, 72, 0x00ff0000, 16, 0, RW, NONE,
          "JPEG restart marker interval when slices are disabled (mb rows) "
          "[0..255]"),
    H2REG(HWIF_ENC_JPEG_RST, 72, 0x0000ffff, 0, 0, RW, NONE,
          "JPEG restart marker for first RST. incremented by HW for next RST"),
    H2REG(HWIF_ENC_REFPIC_RECON_L0_CHROMA0, 76, 0xffffffff, 0, 0, RW, ENC_IN,
          "reference picture reconstructed list0 chroma0"),
    H2REG(HWIF_ENC_STRM_HDRREM1, 76, 0xffffffff, 0, 0, RW, NONE,
          "Stream header remainder bits MSB (MSB aligned)"),
    H2REG(HWIF_ENC_REF_RINGBUF_CHROMA_RD_OFFSET, 76, 0xffffffff, 0, 0, RW, NONE,
          "reference and recon common buffer chroma read offset"),
    H2REG(HWIF_ENC_REFPIC_RECON_L0_Y1, 80, 0xffffffff, 0, 0, RW, ENC_IN,
          "sw_enc_refpic_recon_l0_y1. Reserved for future. Not used now."),
    H2REG(HWIF_ENC_JPEG_ROWLENGTH, 80, 0xfffe0000, 17, 1, RW, NONE,
          "JPEG Input luminance row length. jpgLumWidthSrc (pixels) [96..16384]"),
    H2REG(HWIF_ENC_LJPEG_EN, 80, 0x00010000, 16, 1, RW, NONE,
          "JPEG enable lossless JPEG with Huffman coding"),
    H2REG(HWIF_ENC_LJPEG_FORMAT, 80, 0x0000c000, 14, 1, RW, NONE,
          "JPEG CodingMode 0:420 1:422 2:lumaonly"),
    H2REG(HWIF_ENC_LJPEG_PSV, 80, 0x00003800, 11, 1, RW, NONE,
          "JPEG prediction selection value for lossless"),
    H2REG(HWIF_ENC_LJPEG_PT, 80, 0x00000700, 8, 1, RW, NONE,
          "JPEG point transform value for lossless"),
    H2REG(HWIF_ENC_REFPIC_RECON_L0_CHROMA1, 84, 0xffffffff, 0, 0, RW, ENC_IN,
          "sw_enc_refpic_recon_l0_chroma1. Reserved for future. Not used now."),
    H2REG(HWIF_ENC_STRM_HDRREM2, 84, 0xffffffff, 0, 0, RW, ENC_IN,
          "Stream header remainder bits LSB (MSB aligned)"),
    H2REG(HWIF_ENC_CIR_START, 88, 0xfffc0000, 18, 0, RW, NONE, "cir start"),
    H2REG(HWIF_ENC_CIR_INTERVAL, 88, 0x0003fff0, 4, 0, RW, NONE, "Cyclic Intra Refresh"),
    H2REG(HWIF_ENC_RCROI_ENABLE, 88, 0x0000000f, 0, 1, RW, NONE,
          "bit3:RC enable; bit2:Quatily adjustment enable; bit1:roi map "
          "enable; bit0:roi area enable."),
    H2REG(HWIF_ENC_INTRA_AREA_LEFT, 92, 0xff000000, 24, 0, RW, NONE, "intra Area Left"),
    H2REG(HWIF_ENC_INTRA_AREA_RIGHT, 92, 0x00ff0000, 16, 0, RW, NONE, "intra Area Right"),
    H2REG(HWIF_ENC_INTRA_AREA_TOP, 92, 0x0000ff00, 8, 0, RW, NONE, "intra Area Top"),
    H2REG(HWIF_ENC_INTRA_AREA_BOTTOM, 92, 0x000000ff, 0, 0, RW, NONE, "intra Area Bottom"),
    H2REG(HWIF_ENC_ROI1_LEFT, 96, 0xff000000, 24, 0, RW, NONE, "ROI1 Area Left"),
    H2REG(HWIF_ENC_ROI1_RIGHT, 96, 0x00ff0000, 16, 0, RW, NONE, "ROI1 Area Right"),
    H2REG(HWIF_ENC_ROI1_TOP, 96, 0x0000ff00, 8, 0, RW, NONE, "ROI1 Area Top"),
    H2REG(HWIF_ENC_ROI1_BOTTOM, 96, 0x000000ff, 0, 0, RW, NONE, "ROI1 Area Bottom"),
    H2REG(HWIF_ENC_ROI2_LEFT, 100, 0xff000000, 24, 0, RW, NONE, "ROI2 Area Left"),
    H2REG(HWIF_ENC_ROI2_RIGHT, 100, 0x00ff0000, 16, 0, RW, NONE, "ROI2 Area Right"),
    H2REG(HWIF_ENC_ROI2_TOP, 100, 0x0000ff00, 8, 0, RW, NONE, "ROI2 Area Top"),
    H2REG(HWIF_ENC_ROI2_BOTTOM, 100, 0x000000ff, 0, 0, RW, NONE, "ROI2 Area Bottom"),
    H2REG(HWIF_ENC_INTRA_PENALTY_PIC4X4, 104, 0xfff80000, 19, 0, RW, NONE,
          "intra penalty for pic4x4"),
    H2REG(HWIF_ENC_INTRA_MPM_PENALTY_PIC1, 104, 0x0007fc00, 10, 0, RW, NONE,
          "intra MPM penalty for pic1"),
    H2REG(HWIF_ENC_INTRA_MPM_PENALTY_PIC2, 104, 0x000003ff, 0, 0, RW, NONE,
          "intra MPM penalty for pic2"),
    H2REG(HWIF_ENC_INTRA_SIZE_FACTOR_0, 104, 0xffc00000, 22, 0, RW, NONE, "intra size factor 0"),
    H2REG(HWIF_ENC_INTRA_SIZE_FACTOR_1, 104, 0x003ff000, 12, 0, RW, NONE, "intra size factor 1"),
    H2REG(HWIF_ENC_INTRA_SIZE_FACTOR_2, 104, 0x00000ffc, 2, 0, RW, NONE, "intra size factor 2"),
    H2REG(HWIF_ENC_INTRA_PENALTY_PIC8X8, 108, 0xfff80000, 19, 0, RW, NONE,
          "intra penalty for pic8x8"),
    H2REG(HWIF_ENC_INTRA_PENALTY_PIC16X16, 108, 0x0007ffe0, 5, 0, RW, NONE,
          "intra penalty for pic16x16"),
    H2REG(HWIF_ENC_INTRA_SIZE_FACTOR_3, 108, 0xffc00000, 22, 0, RW, NONE, "intra size factor 3"),
    H2REG(HWIF_ENC_INTRA_MODE_FACTOR_0, 108, 0x003e0000, 17, 0, RW, NONE, "intra mode factor 0"),
    H2REG(HWIF_ENC_INTRA_MODE_FACTOR_1, 108, 0x0001f800, 11, 0, RW, NONE, "intra mode factor 1"),
    H2REG(HWIF_ENC_INTRA_MODE_FACTOR_2, 108, 0x000007f0, 4, 0, RW, NONE, "intra mode factor 2"),
    H2REG(HWIF_ENC_INTRA_PENALTY_PIC32X32, 112, 0xfffc0000, 18, 0, RW, NONE,
          "intra penalty for pic32x32"),
    H2REG(HWIF_ENC_INTRA_MPM_PENALTY_PIC3, 112, 0x0003ff80, 7, 0, RW, NONE,
          "intra MPM penalty for pic3"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_0, 112, 0xff000000, 24, 0, RW, NONE, "lambda satd me 0"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_1, 112, 0x00ff0000, 16, 0, RW, NONE, "lambda satd me 1"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_2, 112, 0x0000ff00, 8, 0, RW, NONE, "lambda satd me 2"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_3, 112, 0x000000ff, 0, 0, RW, NONE, "lambda satd me 3"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_0_EXPAND5BIT, 112, 0xfff80000, 19, 0, RW, NONE,
          "lambda satd me 0"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_1_EXPAND5BIT, 112, 0x0007ffc0, 6, 0, RW, NONE, "lambda satd me 1"),
    H2REG(HWIF_ENC_AV1_PRECARRY_BUFFER_BASE, 112, 0xffffffff, 0, 0, RW, ENC_INOUT,
          "av1 precarry buffer base address"),
    H2REG(HWIF_ENC_INTRA_PENALTY_ROI14X4, 116, 0xfff80000, 19, 0, RW, NONE,
          "intra penalty for roi14x4"),
    H2REG(HWIF_ENC_INTRA_MPM_PENALTY_ROI11, 116, 0x0007fc00, 10, 0, RW, NONE,
          "intra MPM penalty for roi11"),
    H2REG(HWIF_ENC_INTRA_MPM_PENALTY_ROI12, 116, 0x000003ff, 0, 0, RW, NONE,
          "intra MPM penalty for roi12"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_4, 116, 0xff000000, 24, 0, RW, NONE, "lambda satd me 4"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_5, 116, 0x00ff0000, 16, 0, RW, NONE, "lambda satd me 5"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_6, 116, 0x0000ff00, 8, 0, RW, NONE, "lambda satd me 6"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_7, 116, 0x000000ff, 0, 0, RW, NONE, "lambda satd me 7"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_2_EXPAND5BIT, 116, 0xfff80000, 19, 0, RW, NONE,
          "lambda satd me 2"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_3_EXPAND5BIT, 116, 0x0007ffc0, 6, 0, RW, NONE, "lambda satd me 3"),
    H2REG(HWIF_ENC_AV1_PRECARRY_BUFFER_BASE_MSB, 116, 0xffffffff, 0, 0, RW, NONE,
          "av1 precarry buffer base address MSB"),
    H2REG(HWIF_ENC_INTRA_PENALTY_ROI18X8, 120, 0xfff80000, 19, 0, RW, NONE,
          "intra penalty for roi18x8"),
    H2REG(HWIF_ENC_INTRA_PENALTY_ROI116X16, 120, 0x0007ffe0, 5, 0, RW, NONE,
          "intra penalty for roi116x16"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_8, 120, 0xff000000, 24, 0, RW, NONE, "lambda satd me 8"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_9, 120, 0x00ff0000, 16, 0, RW, NONE, "lambda satd me 9"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_10, 120, 0x0000ff00, 8, 0, RW, NONE, "lambda satd me 10"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_11, 120, 0x000000ff, 0, 0, RW, NONE, "lambda satd me 11"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_4_EXPAND5BIT, 120, 0xfff80000, 19, 0, RW, NONE,
          "lambda satd me 4"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_5_EXPAND5BIT, 120, 0x0007ffc0, 6, 0, RW, NONE, "lambda satd me 5"),
    H2REG(HWIF_ENC_INTRA_PENALTY_ROI132X32, 124, 0xfffc0000, 18, 0, RW, NONE,
          "intra penalty for roi132x32"),
    H2REG(HWIF_ENC_INTRA_MPM_PENALTY_ROI13, 124, 0x0003ff80, 7, 0, RW, NONE,
          "intra MPM penalty for roi13"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_12, 124, 0xff000000, 24, 0, RW, NONE, "lambda satd me 12"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_13, 124, 0x00ff0000, 16, 0, RW, NONE, "lambda satd me 13"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_14, 124, 0x0000ff00, 8, 0, RW, NONE, "lambda satd me 14"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_15, 124, 0x000000ff, 0, 0, RW, NONE, "lambda satd me 15"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_6_EXPAND5BIT, 124, 0xfff80000, 19, 0, RW, NONE,
          "lambda satd me 6"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_7_EXPAND5BIT, 124, 0x0007ffc0, 6, 0, RW, NONE, "lambda satd me 7"),
    H2REG(HWIF_ENC_DYNAMIC_RDO_CU32_FACTOR, 124, 0xff000000, 24, 0, RW, NONE, "factor for cu32"),
    H2REG(HWIF_ENC_DYNAMIC_RDO_CU32_BIAS, 124, 0x00ff0000, 16, 0, RW, NONE, "bias for cu32"),
    H2REG(HWIF_ENC_DYNAMIC_RDO_CU16_FACTOR, 124, 0x0000ff00, 8, 0, RW, NONE, "factor for cu16"),
    H2REG(HWIF_ENC_DYNAMIC_RDO_CU16_BIAS, 124, 0x000000ff, 0, 0, RW, NONE, "bias for cu16"),
    H2REG(HWIF_ENC_INTRA_PENALTY_ROI24X4, 128, 0xfff80000, 19, 0, RW, NONE,
          "intra penalty for roi24x4"),
    H2REG(HWIF_ENC_INTRA_MPM_PENALTY_ROI21, 128, 0x0007fc00, 10, 0, RW, NONE,
          "intra MPM penalty for roi21"),
    H2REG(HWIF_ENC_INTRA_MPM_PENALTY_ROI22, 128, 0x000003ff, 0, 0, RW, NONE,
          "intra MPM penalty for roi22"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_0, 128, 0xfffe0000, 17, 0, RW, NONE, "inter me SSE lambda 0"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_1, 128, 0x0001fffc, 2, 0, RW, NONE, "inter me SSE lambda 1"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_8_EXPAND5BIT, 128, 0xfff80000, 19, 0, RW, NONE,
          "lambda satd me 8"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_9_EXPAND5BIT, 128, 0x0007ffc0, 6, 0, RW, NONE, "lambda satd me 9"),
    H2REG(HWIF_ENC_INTRA_PENALTY_ROI28X8, 132, 0xfff80000, 19, 0, RW, NONE,
          "intra penalty for roi28x8"),
    H2REG(HWIF_ENC_INTRA_PENALTY_ROI216X16, 132, 0x0007ffe0, 5, 0, RW, NONE,
          "intra penalty for roi216x16"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_2, 132, 0xfffe0000, 17, 0, RW, NONE, "inter me SSE lambda 2"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_3, 132, 0x0001fffc, 2, 0, RW, NONE, "inter me SSE lambda 3"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_10_EXPAND5BIT, 132, 0xfff80000, 19, 0, RW, NONE,
          "lambda satd me 10"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_11_EXPAND5BIT, 132, 0x0007ffc0, 6, 0, RW, NONE,
          "lambda satd me 11"),
    H2REG(HWIF_ENC_INTRA_PENALTY_ROI232X32, 136, 0xfffc0000, 18, 0, RW, NONE,
          "intra penalty for roi232x32"),
    H2REG(HWIF_ENC_INTRA_MPM_PENALTY_ROI23, 136, 0x0003ff80, 7, 0, RW, NONE,
          "intra MPM penalty for roi23"),
    H2REG(HWIF_ENC_LAMBDA_MOTIONSAD, 136, 0x0000007f, 0, 0, RW, NONE, "lamda for motion SAD"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_4, 136, 0xfffe0000, 17, 0, RW, NONE, "inter me SSE lambda 4"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_5, 136, 0x0001fffc, 2, 0, RW, NONE, "inter me SSE lambda 5"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_12_EXPAND5BIT, 136, 0xfff80000, 19, 0, RW, NONE,
          "lambda satd me 12"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_13_EXPAND5BIT, 136, 0x0007ffc0, 6, 0, RW, NONE,
          "lambda satd me 13"),
    H2REG(HWIF_ENC_LAMDA_MOTION_SSE, 140, 0xfffc0000, 18, 0, RW, NONE, "lambda for motion SSE"),
    H2REG(HWIF_ENC_BITS_EST_TU_SPLIT_PENALTY, 140, 0x00038000, 15, 0, RW, NONE,
          "bits estimation for tu split penalty"),
    H2REG(HWIF_ENC_BITS_EST_BIAS_INTRA_CU_8, 140, 0x00007f00, 8, 0, RW, NONE,
          "bits estimation bias for intra cu 8"),
    H2REG(HWIF_ENC_BITS_EST_BIAS_INTRA_CU_16, 140, 0x000000ff, 0, 0, RW, NONE,
          "bits estimation bias for intra cu 16"),
    H2REG(HWIF_ENC_BITS_EST_BIAS_INTRA_CU_32, 144, 0xff800000, 23, 0, RW, NONE,
          "bits estimation bias for intra cu 32"),
    H2REG(HWIF_ENC_BITS_EST_BIAS_INTRA_CU_64, 144, 0x007fe000, 13, 0, RW, NONE,
          "bits estimation bias for intra cu 64"),
    H2REG(HWIF_ENC_INTER_SKIP_BIAS, 144, 0x00001fc0, 6, 0, RW, NONE, "inter skip bias"),
    H2REG(HWIF_ENC_BITS_EST_1N_CU_PENALTY, 144, 0x0000003c, 2, 0, RW, NONE,
          "bits estimation 1N cu penalty"),
    H2REG(HWIF_ENC_OUTPUT_BITWIDTH_CHROMA, 144, 0x00000003, 0, 0, RW, NONE,
          "chroma output bitwidth 0=8 bit. 1=9 bit. 2=10 bit."),
    H2REG(HWIF_ENC_LAMDA_SAO_CHROMA, 148, 0xfffc0000, 18, 0, RW, NONE, "lambda for SAO chroma"),
    H2REG(HWIF_ENC_LAMDA_SAO_LUMA, 148, 0x0003fff0, 4, 0, RW, NONE, "lambda for SAO luma"),
    H2REG(HWIF_ENC_CHROFFSET, 148, 0x0000000f, 0, 0, RW, NONE,
          "Input chrominance offset (bytes) [0..15]"),
    H2REG(HWIF_ENC_INPUT_FORMAT, 152, 0xf0000000, 28, 1, RW, NONE,
          "Input image format. inputFormat. "
          "0=YUV420P/1=YUV420SP/2=YUYV422/3=UYVY422/4=RGB565/5=RGB555/6=RGB444/"
          "7=RGB888/8=RGB101010/9=I010/10=P010/11=PACKED10BITPLANAR/12=Y0L2/"
          "13=TILE32/14=TILE16PCK4"),
    H2REG(HWIF_ENC_INPUT_ROTATION, 152, 0x0c000000, 26, 1, RW, NONE,
          "Input image rotation. 0=disabled. 1=90 degrees right. 2=90 degrees "
          "left.3=180 degree right."),
    H2REG(HWIF_ENC_OUTPUT_BITWIDTH_LUM, 152, 0x03000000, 24, 0, RW, NONE,
          "luma output bitwidth 0=8 bit. 1=9 bit. 2=10 bit."),
    H2REG(HWIF_ENC_LUMOFFSET, 152, 0x00f00000, 20, 1, RW, NONE,
          "Input luminance offset (bytes) [0..15]"),
    H2REG(HWIF_ENC_ROWLENGTH, 152, 0x000fffc0, 6, 1, RW, NONE,
          "Input luminance row length. lumWidthSrc (pixels) [96..8192]"),
    H2REG(HWIF_ENC_XFILL, 152, 0x00000030, 4, 0, RW, NONE,
          "Overfill pixels on right edge of image div2 [0.1.2.3]"),
    H2REG(HWIF_ENC_YFILL, 152, 0x0000000e, 1, 1, RW, NONE,
          "Overfill pixels on bottom edge of image. YFill. [0...7]"),
    H2REG(HWIF_ENC_MIRROR, 152, 0x00000001, 0, 0, RW, NONE, "mirror or not. [0.1]"),
    H2REG(HWIF_ENC_RGBCOEFFA, 156, 0xffff0000, 16, 0, RW, NONE,
          "RGB to YUV conversion coefficient A"),
    H2REG(HWIF_ENC_RGBCOEFFB, 156, 0x0000ffff, 0, 0, RW, NONE,
          "RGB to YUV conversion coefficient B"),
    H2REG(HWIF_ENC_RGBCOEFFC, 160, 0xffff0000, 16, 0, RW, NONE,
          "RGB to YUV conversion coefficient C"),
    H2REG(HWIF_ENC_RGBCOEFFE, 160, 0x0000ffff, 0, 0, RW, NONE,
          "RGB to YUV conversion coefficient D"),
    H2REG(HWIF_ENC_RGBCOEFFF, 164, 0xffff0000, 16, 0, RW, NONE,
          "RGB to YUV conversion coefficient E"),
    H2REG(HWIF_ENC_RMASKMSB, 164, 0x0000f800, 11, 0, RW, NONE,
          "RGB R-component mask MSB bit position [0..31]"),
    H2REG(HWIF_ENC_GMASKMSB, 164, 0x000007c0, 6, 0, RW, NONE,
          "RGB G-component mask MSB bit position [0..31]"),
    H2REG(HWIF_ENC_BMASKMSB, 164, 0x0000003e, 1, 0, RW, NONE,
          "RGB B-component mask MSB bit position [0..31]"),
    H2REG(HWIF_ENC_BASESCALEDOUTLUM, 168, 0xffffffff, 0, 0, RW, ENC_OUT,
          "Base address for output of down-scaled encoder image in YUYV 4:2:2 "
          "format"),
    H2REG(HWIF_ENC_SCALEDOUTWIDTH, 172, 0xfff80000, 19, 1, RW, NONE,
          "Scaling width of down-scaled image. ScaledWidth. [96..4076]"),
    H2REG(HWIF_ENC_SCALEDOUTWIDTHRATIO, 172, 0x0007fff8, 3, 0, RW, NONE,
          "Scaling ratio for width of down-scaled image. Fixed point integer "
          "1.16."),
    H2REG(HWIF_ENC_SCALEDOUTWIDTHMSB, 172, 0x00000004, 2, 1, RW, NONE,
          "Scaling width of down-scaled image. ScaledWidthMsb."),
    H2REG(HWIF_ENC_SCALE_MODE, 172, 0x00000003, 0, 1, RW, NONE,
          "Scaling mode. ScalingMode. 0=disabled. 1=scaling only. "
          "2=scale+encode"),
    H2REG(HWIF_ENC_SCALEDOUTHEIGHT, 176, 0xfffc0000, 18, 1, RW, NONE,
          "Scaling height of down-scaled image. ScaledHeight. [2..4078]"),
    H2REG(HWIF_ENC_SCALEDOUTHEIGHTRATIO, 176, 0x0003fffc, 2, 0, RW, NONE,
          "Scaling ratio for height of down-scaled image. Fixed point integer "
          "1.16."),
    H2REG(HWIF_ENC_INPUT_FORMAT_MSB, 176, 0x00000003, 0, 1, RW, NONE,
          "Input image format bit[5:4]. inputFormatMsb."),
    H2REG(HWIF_ENC_SCALEDOUT_SWAP, 180, 0xf0000000, 28, 0, RW, NONE,
          "Byte swap configuration for scaledout data (scaledout)"),
    H2REG(HWIF_ENC_CHROMA_SWAP, 180, 0x08000000, 27, 1, RW, NONE,
          "Swap order of chroma bytes in semiplanar input format."),
    H2REG(HWIF_ENC_ENCODED_CTB_NUMBER, 180, 0x07ffc000, 14, 0, RW, NONE,
          "MB count output. max 64*64"),
    H2REG(HWIF_ENC_SCALEDSKIPLEFTPIXELCOLUMN, 180, 0x00003000, 12, 0, RW, NONE,
          "skip left pixel column"),
    H2REG(HWIF_ENC_SCALEDSKIPTOPPIXELROW, 180, 0x00000c00, 10, 0, RW, NONE, "skip top pixel row"),
    H2REG(HWIF_ENC_VSCALE_WEIGHT_EN, 180, 0x00000200, 9, 0, RW, NONE,
          "vertical scale weight enable."),
    H2REG(HWIF_ENC_SCALEDHORIZONTALCOPY, 180, 0x00000100, 8, 0, RW, NONE,
          "horizontal data copy directly"),
    H2REG(HWIF_ENC_SCALEDVERTICALCOPY, 180, 0x00000080, 7, 0, RW, NONE,
          "vertical data copy directly"),
    H2REG(HWIF_ENC_NALUNITSIZE_SWAP, 180, 0x00000078, 3, 0, RW, NONE,
          "Byte swap configuration for Nal Unit size output"),
    H2REG(HWIF_ENC_SCALEDOUT_FORMAT, 180, 0x00000004, 2, 1, RW, NONE,
          "out-loop scaler output format"),
    H2REG(HWIF_ENC_COMPRESSEDCOEFF_BASE, 184, 0xffffffff, 0, 0, RW, ENC_OUT,
          "Base address for compressed coefficients."),
    H2REG(HWIF_ENC_COMPRESSEDCOEFF_BASE_MSB, 188, 0xffffffff, 0, 0, RW, NONE,
          "compressed coefficients base address MSB for SAN module."),
    H2REG(HWIF_ENC_BASESCALEDOUTLUM_MSB, 192, 0xffffffff, 0, 0, RW, NONE,
          "Pre-processor Base address MSB for down-scaled output"),
    H2REG(HWIF_ENC_REFPIC_RECON_L0_Y0_MSB, 196, 0xffffffff, 0, 0, RW, NONE,
          "reference picture reconstructed list0 luma0 MSB"),
    H2REG(HWIF_ENC_REFPIC_RECON_L0_CHROMA0_MSB, 200, 0xffffffff, 0, 0, RW, NONE,
          "reference picture reconstructed list0 chroma0 MSB"),
    H2REG(HWIF_ENC_REFPIC_RECON_L0_Y1_MSB, 204, 0xffffffff, 0, 0, RW, NONE,
          "reference picture reconstructed list0 luma1 MSB"),
    H2REG(HWIF_ENC_REFPIC_RECON_L0_CHROMA1_MSB, 208, 0xffffffff, 0, 0, RW, NONE,
          "reference picture reconstructed list0 chroma1 MSB"),
    H2REG(HWIF_ENC_INPUT_Y_BASE_MSB, 212, 0xffffffff, 0, 0, RW, NONE, "input lum base address MSB"),
    H2REG(HWIF_ENC_INPUT_CB_BASE_MSB, 216, 0xffffffff, 0, 0, RW, NONE, "input cb base address MSB"),
    H2REG(HWIF_ENC_INPUT_CR_BASE_MSB, 220, 0xffffffff, 0, 0, RW, NONE, "input cr base address MSB"),
    H2REG(HWIF_ENC_RECON_Y_BASE_MSB, 224, 0xffffffff, 0, 0, RW, NONE,
          "recon image luma base address MSB"),
    H2REG(HWIF_ENC_REF_RINGBUF_LUMA_SIZE, 224, 0xffffffff, 0, 0, RW, NONE,
          "reference and recon ring buffer luma buffer size"),
    H2REG(HWIF_ENC_RECON_CHROMA_BASE_MSB, 228, 0xffffffff, 0, 0, RW, NONE,
          "recon image chroma base address MSB"),
    H2REG(HWIF_ENC_REF_RINGBUF_CHROMA_SIZE, 228, 0xffffffff, 0, 0, RW, NONE,
          "reference and recon ring buffer chroma buffer size"),
    H2REG(HWIF_ENC_SIZE_TBL_BASE_MSB, 232, 0xffffffff, 0, 0, RW, NONE, "sizeTblBase MSB"),
    H2REG(HWIF_ENC_OUTPUT_STRM_BASE_MSB, 236, 0xffffffff, 0, 0, RW, NONE,
          "stream output buffer0 address MSB"),
    H2REG(HWIF_ENC_RECON_LUMA_COMPRESS_TABLE_BASE, 240, 0xffffffff, 0, 0, RW, ENC_OUT,
          "Base address for recon luma compress table LSB."),
    H2REG(HWIF_ENC_RECON_LUMA_COMPRESS_TABLE_BASE_MSB, 244, 0xffffffff, 0, 0, RW, NONE,
          "Base address for recon luma compress table MSB."),
    H2REG(HWIF_ENC_RECON_CHROMA_COMPRESS_TABLE_BASE, 248, 0xffffffff, 0, 0, RW, ENC_OUT,
          "Base address for recon Chroma compress table LSB."),
    H2REG(HWIF_ENC_RECON_CHROMA_COMPRESS_TABLE_BASE_MSB, 252, 0xffffffff, 0, 0, RW, NONE,
          "Base address for recon Chroma compress table MSB."),
    H2REG(HWIF_ENC_L0_REF0_LUMA_COMPRESS_TABLE_BASE, 256, 0xffffffff, 0, 0, RW, ENC_IN,
          "Base address for list 0 ref 0 luma compress table LSB."),
    H2REG(HWIF_ENC_L0_REF0_LUMA_COMPRESS_TABLE_BASE_MSB, 260, 0xffffffff, 0, 0, RW, NONE,
          "Base address for list 0 ref 0 luma compress table MSB."),
    H2REG(HWIF_ENC_L0_REF0_CHROMA_COMPRESS_TABLE_BASE, 264, 0xffffffff, 0, 0, RW, ENC_IN,
          "Base address for list 0 ref 0 Chroma compress table LSB."),
    H2REG(HWIF_ENC_L0_REF0_CHROMA_COMPRESS_TABLE_BASE_MSB, 268, 0xffffffff, 0, 0, RW, NONE,
          "Base address for list 0 ref 0 Chroma compress table MSB."),
    H2REG(HWIF_ENC_L0_REF1_LUMA_COMPRESS_TABLE_BASE, 272, 0xffffffff, 0, 0, RW, ENC_IN,
          "Reserved for future. Not used now."),
    H2REG(HWIF_ENC_L0_REF1_LUMA_COMPRESS_TABLE_BASE_MSB, 276, 0xffffffff, 0, 0, RW, NONE,
          "Base address for list 0 ref 1 luma compress table MSB."),
    H2REG(HWIF_ENC_L0_REF1_CHROMA_COMPRESS_TABLE_BASE, 280, 0xffffffff, 0, 0, RW, ENC_IN,
          "Base address for list 0 ref 1 Chroma compress table LSB."),
    H2REG(HWIF_ENC_L0_REF1_CHROMA_COMPRESS_TABLE_BASE_MSB, 284, 0xffffffff, 0, 0, RW, NONE,
          "Base address for list 0 ref 1 Chroma compress table MSB."),
    H2REG(HWIF_ENC_RECON_LUMA_4N_BASE, 288, 0xffffffff, 0, 0, RW, ENC_OUT,
          "Base address for recon luma 4n base LSB."),
    H2REG(HWIF_ENC_REF_RINGBUF_LUMA_4N_WR_OFFSET, 288, 0xffffffff, 0, 0, RW, NONE,
          "reference and recon ring buffer luma4N write offset"),
    H2REG(HWIF_ENC_RECON_LUMA_4N_BASE_MSB, 292, 0xffffffff, 0, 0, RW, NONE,
          "Base address for recon luma 4n base MSB."),
    H2REG(HWIF_ENC_REF_RINGBUF_LUMA_4N_SIZE, 292, 0xffffffff, 0, 0, RW, NONE,
          "reference and recon ring buffer luma4N buffer size"),
    H2REG(HWIF_ENC_REFPIC_RECON_L0_4N0_BASE, 296, 0xffffffff, 0, 0, RW, ENC_IN,
          "reference picture reconstructed list0 4n 0"),
    H2REG(HWIF_ENC_REF_RINGBUF_LUMA_4N_RD_OFFSET, 296, 0xffffffff, 0, 0, RW, NONE,
          "reference and recon ring buffer luma4N read offset"),
    H2REG(HWIF_ENC_REFPIC_RECON_L0_4N0_BASE_MSB, 300, 0xffffffff, 0, 0, RW, NONE,
          "reference picture reconstructed list0 4n 0 MSB"),
    H2REG(HWIF_ENC_REFPIC_RECON_L0_4N1_BASE, 304, 0xffffffff, 0, 0, RW, ENC_IN,
          "reference picture reconstructed list0 4n 1"),
    H2REG(HWIF_ENC_REFPIC_RECON_L0_4N1_BASE_MSB, 308, 0xffffffff, 0, 0, RW, NONE,
          "reference picture reconstructed list0 4n 1 MSB"),
    H2REG(HWIF_ENC_LAMDA_MOTION_SSE_ROI1, 312, 0xfffc0000, 18, 0, RW, NONE,
          "roi1  lambda for motion SSE"),
    H2REG(HWIF_ENC_LAMDA_MOTION_SSE_ROI2, 312, 0x0003fff0, 4, 0, RW, NONE,
          "roi2 lambda for motion SSE"),
    H2REG(HWIF_ENC_SKIP_CHROMA_DC_THREADHOLD, 312, 0x00000003, 0, 0, RW, NONE,
          "skip chroma dc threadhold"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_6, 312, 0xfffe0000, 17, 0, RW, NONE, "inter me SSE lambda 6"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_7, 312, 0x0001fffc, 2, 0, RW, NONE, "inter me SSE lambda 7"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_14_EXPAND5BIT, 312, 0xfff80000, 19, 0, RW, NONE,
          "lambda satd me 14"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_15_EXPAND5BIT, 312, 0x0007ffc0, 6, 0, RW, NONE,
          "lambda satd me 15"),
    H2REG(HWIF_ENC_LAMBDA_MOTIONSAD_ROI1, 316, 0xfe000000, 25, 0, RW, NONE,
          "roi1 lamda for motion SAD"),
    H2REG(HWIF_ENC_LAMBDA_MOTIONSAD_ROI2, 316, 0x01fc0000, 18, 0, RW, NONE,
          "roi2 lamda for motion SAD"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_8, 316, 0xfffe0000, 17, 0, RW, NONE, "inter me SSE lambda 8"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_9, 316, 0x0001fffc, 2, 0, RW, NONE, "inter me SSE lambda 9"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_0_EXPAND6BIT, 316, 0xfffff800, 11, 0, RW, NONE,
          "inter me SSE lambda 0"),
    H2REG(HWIF_ENC_HWH264SUPPORT, 320, 0x80000000, 31, 0, RO, NONE,
          "H264 encoding supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWSCALINGSUPPORT, 320, 0x40000000, 30, 0, RO, NONE,
          "Down-scaling supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWBFRAMESUPPORT, 320, 0x20000000, 29, 0, RO, NONE,
          "HW bframe support. 0=not support bframe. 1=support bframe"),
    H2REG(HWIF_ENC_HWRGBSUPPORT, 320, 0x10000000, 28, 0, RO, NONE,
          "RGB to YUV conversion supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWHEVCSUPPORT, 320, 0x08000000, 27, 0, RO, NONE,
          "HEVC encoding supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWVP9SUPPORT, 320, 0x04000000, 26, 0, RO, NONE,
          "VP9 encoding supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWDENOISESUPPORT, 320, 0x02000000, 25, 0, RO, NONE,
          "denoise supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWMAIN10SUPPORT, 320, 0x01000000, 24, 0, RO, NONE,
          "main10 supported by HW. 0=main8 supported. 1=main10 supported"),
    H2REG(HWIF_ENC_HWBUS, 320, 0x00e00000, 21, 0, RO, NONE,
          "Bus connection of HW. 1=AHB. 2=OCP. 3=AXI. 4=PCI. 5=AXIAHB. "
          "6=AXIAPB."),
    H2REG(HWIF_ENC_HWCAVLCSUPPORT, 320, 0x00100000, 20, 0, RO, NONE,
          "CAVLC supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWLINEBUFSUPPORT, 320, 0x00080000, 19, 0, RO, NONE,
          "LineBuffer input mode supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWPROGRDOSUPPORT, 320, 0x00040000, 18, 0, RO, NONE,
          "Prog Rdo supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWRFCSUPPORT, 320, 0x00020000, 17, 0, RO, NONE,
          "Reference frame compression supported by HW. 0=not supported. "
          "1=supported"),
    H2REG(HWIF_ENC_HWTU32SUPPORT, 320, 0x00010000, 16, 0, RO, NONE,
          "TU32 supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWJPEGSUPPORT, 320, 0x00008000, 15, 0, RO, NONE,
          "JPEG encoder supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWBUSWIDTH, 320, 0x00006000, 13, 0, RO, NONE,
          "Bus width of HW. 0=32b. 1=64b. 2=128b"),
    H2REG(HWIF_ENC_HWMAXVIDEOWIDTH, 320, 0x00001fff, 0, 0, RO, NONE,
          "Maximum video width supported by HW (pixels)"),
    H2REG(HWIF_ENC_HWMAXVIDEOWIDTHHEVC, 320, 0x00001fff, 0, 0, RO, NONE,
          "Maximum video width supported by HW for HEVC encoding (unit 8 "
          "pixels)"),
    H2REG(HWIF_ENC_MAX_BURST, 324, 0xff000000, 24, 0, RW, NONE,
          "Maximum AXI burst length.Default value 0x10"),
    H2REG(HWIF_TIMEOUT_OVERRIDE_E, 324, 0x00800000, 23, 0, RW, NONE,
          "enable signal if timeout period is controlled by software Default "
          "value: 0x0"),
    H2REG(HWIF_TIMEOUT_CYCLES, 324, 0x007fffff, 0, 0, RW, NONE,
          "timeout cycles number default value: 0x0"),
    H2REG(HWIF_ENC_HW_PERFORMANCE, 328, 0xffffffff, 0, 0, RW, NONE,
          "record hardware  performance(cycles) of current picture"),
    H2REG(HWIF_ENC_REFPIC_RECON_L1_Y0, 332, 0xffffffff, 0, 0, RW, ENC_IN,
          "reference picture reconstructed list1 luma0"),
    H2REG(HWIF_ENC_REF_RINGBUF_BASE_ADDR, 332, 0xffffffff, 0, 0, RW, NONE,
          "reference and recon common buffer base address"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_0, 332, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table luma entry 0"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_1, 332, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table luma entry 1"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_2, 332, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table luma entry 2"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_3, 332, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table luma entry 3"),
    H2REG(HWIF_ENC_REFPIC_RECON_L1_CHROMA0, 336, 0xffffffff, 0, 0, RW, ENC_IN,
          "reference picture reconstructed list1 chroma0"),
    H2REG(HWIF_ENC_REF_RINGBUF_BASE_ADDR_MSB, 336, 0xffffffff, 0, 0, RW, NONE,
          "reference and recon common buffer base address MSB"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_4, 336, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table luma entry 4"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_5, 336, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table luma entry 5"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_6, 336, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table luma entry 6"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_7, 336, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table luma entry 7"),
    H2REG(HWIF_ENC_REFPIC_RECON_L1_Y1, 340, 0xffffffff, 0, 0, RW, ENC_IN,
          "reference picture reconstructed list1 luma1"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_8, 340, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table luma entry 8"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_9, 340, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table luma entry 9"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_10, 340, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table luma entry 10"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_11, 340, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table luma entry 11"),
    H2REG(HWIF_ENC_REFPIC_RECON_L1_CHROMA1, 344, 0xffffffff, 0, 0, RW, ENC_IN,
          "reference picture reconstructed list1 chroma1"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_12, 344, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table luma entry 12"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_13, 344, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table luma entry 13"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_14, 344, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table luma entry 14"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_15, 344, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table luma entry 15"),
    H2REG(HWIF_ENC_REFPIC_RECON_L1_Y0_MSB, 348, 0xffffffff, 0, 0, RW, NONE,
          "reference picture reconstructed list1 luma0 MSB"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_16, 348, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table luma entry 16"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_17, 348, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table luma entry 17"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_18, 348, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table luma entry 18"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_19, 348, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table luma entry 19"),
    H2REG(HWIF_ENC_REFPIC_RECON_L1_CHROMA0_MSB, 352, 0xffffffff, 0, 0, RW, NONE,
          "reference picture reconstructed list1 chroma0 MSB"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_20, 352, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table luma entry 20"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_21, 352, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table luma entry 21"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_22, 352, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table luma entry 22"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_23, 352, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table luma entry 23"),
    H2REG(HWIF_ENC_REFPIC_RECON_L1_Y1_MSB, 356, 0xffffffff, 0, 0, RW, NONE,
          "reference picture reconstructed list1 luma1 MSB"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_24, 356, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table luma entry 24"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_25, 356, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table luma entry 25"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_26, 356, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table luma entry 26"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_27, 356, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table luma entry 27"),
    H2REG(HWIF_ENC_REFPIC_RECON_L1_CHROMA1_MSB, 360, 0xffffffff, 0, 0, RW, NONE,
          "reference picture reconstructed list1 chroma1 MSB"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_28, 360, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table luma entry 28"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_29, 360, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table luma entry 29"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_30, 360, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table luma entry 30"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_31, 360, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table luma entry 31"),
    H2REG(HWIF_ENC_L1_DELTA_POC0, 364, 0xffc00000, 22, 0, RW, NONE, "delta poc of list1 pic0"),
    H2REG(HWIF_ENC_L1_LONG_TERM_FLAG0, 364, 0x00200000, 21, 0, RW, NONE, "list1 pic0 is long term"),
    H2REG(HWIF_ENC_L1_USED_BY_CURR_PIC0, 364, 0x00100000, 20, 0, RW, NONE,
          "list1 pic0 used by current"),
    H2REG(HWIF_ENC_L1_DELTA_POC1, 364, 0x000ffc00, 10, 0, RW, NONE, "delta poc of list1 pic1"),
    H2REG(HWIF_ENC_L1_LONG_TERM_FLAG1, 364, 0x00000200, 9, 0, RW, NONE, "list1 pic1 is long term"),
    H2REG(HWIF_ENC_L1_USED_BY_CURR_PIC1, 364, 0x00000100, 8, 0, RW, NONE,
          "list1 pic1 used by current"),
    H2REG(HWIF_ENC_ACTIVE_L1_CNT, 364, 0x000000c0, 6, 0, RW, NONE, "active l0 count"),
    H2REG(HWIF_ENC_LONG_TERM_REF_PICS_PRESENT_FLAG, 364, 0x00000010, 4, 0, RW, NONE,
          "long-term reference pictures may be used for inter prediction"),
    H2REG(HWIF_ENC_L1_REF0_LUMA_COMPRESSOR_ENABLE, 364, 0x00000008, 3, 1, RW, NONE,
          "list1 ref0 frame luma compressor enable flag 0=disable 1=enable."),
    H2REG(HWIF_ENC_L1_REF0_CHROMA_COMPRESSOR_ENABLE, 364, 0x00000004, 2, 1, RW, NONE,
          "list1 ref0 frame chroma compressor enable flag 0=disable 1=enable."),
    H2REG(HWIF_ENC_L1_REF1_LUMA_COMPRESSOR_ENABLE, 364, 0x00000002, 1, 0, RW, NONE,
          "list1 ref1 frame luma compressor enable flag 0=disable 1=enable."),
    H2REG(HWIF_ENC_L1_REF1_CHROMA_COMPRESSOR_ENABLE, 364, 0x00000001, 0, 0, RW, NONE,
          "list1 ref1 frame chroma compressor enable flag 0=disable 1=enable."),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_32, 364, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table luma entry 32"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_33, 364, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table luma entry 33"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_34, 364, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table luma entry 34"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_35, 364, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table luma entry 35"),
    H2REG(HWIF_ENC_REFPIC_RECON_L1_4N0_BASE, 368, 0xffffffff, 0, 0, RW, ENC_IN,
          "reference picture reconstructed list1 4n 0"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_36, 368, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table luma entry 36"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_37, 368, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table luma entry 37"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_38, 368, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table luma entry 38"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_39, 368, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table luma entry 39"),
    H2REG(HWIF_ENC_REFPIC_RECON_L1_4N0_BASE_MSB, 372, 0xffffffff, 0, 0, RW, NONE,
          "reference picture reconstructed list1 4n 0 MSB"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_40, 372, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table luma entry 40"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_41, 372, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table luma entry 41"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_42, 372, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table luma entry 42"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_43, 372, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table luma entry 43"),
    H2REG(HWIF_ENC_REFPIC_RECON_L1_4N1_BASE, 376, 0xffffffff, 0, 0, RW, ENC_IN,
          "reference picture reconstructed list1 4n 1"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_44, 376, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table luma entry 44"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_45, 376, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table luma entry 45"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_46, 376, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table luma entry 46"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_47, 376, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table luma entry 47"),
    H2REG(HWIF_ENC_REFPIC_RECON_L1_4N1_BASE_MSB, 380, 0xffffffff, 0, 0, RW, NONE,
          "reference picture reconstructed list1 4n 1 MSB"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_48, 380, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table luma entry 48"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_49, 380, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table luma entry 49"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_50, 380, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table luma entry 50"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_51, 380, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table luma entry 51"),
    H2REG(HWIF_ENC_L1_REF0_LUMA_COMPRESS_TABLE_BASE, 384, 0xffffffff, 0, 0, RW, ENC_IN,
          "Base address for list 1 ref 0 luma compress table LSB."),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_52, 384, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table luma entry 52"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_53, 384, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table luma entry 53"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_54, 384, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table luma entry 54"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_55, 384, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table luma entry 55"),
    H2REG(HWIF_ENC_L1_REF0_LUMA_COMPRESS_TABLE_BASE_MSB, 388, 0xffffffff, 0, 0, RW, NONE,
          "Base address for list 1 ref 0 luma compress table MSB."),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_56, 388, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table luma entry 56"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_57, 388, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table luma entry 57"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_58, 388, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table luma entry 58"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_59, 388, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table luma entry 59"),
    H2REG(HWIF_ENC_L1_REF0_CHROMA_COMPRESS_TABLE_BASE, 392, 0xffffffff, 0, 0, RW, ENC_IN,
          "Base address for list 1 ref 0 Chroma compress table LSB."),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_60, 392, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table luma entry 60"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_61, 392, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table luma entry 61"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_62, 392, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table luma entry 62"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_LUMA_63, 392, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table luma entry 63"),
    H2REG(HWIF_ENC_L1_REF0_CHROMA_COMPRESS_TABLE_BASE_MSB, 396, 0xffffffff, 0, 0, RW, NONE,
          "Base address for list 1 ref 0 Chroma compress table MSB."),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_0, 396, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table chroma entry 0"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_1, 396, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table chroma entry 1"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_2, 396, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table chroma entry 2"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_3, 396, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table chroma entry 3"),
    H2REG(HWIF_ENC_L1_REF1_LUMA_COMPRESS_TABLE_BASE, 400, 0xffffffff, 0, 0, RW, ENC_IN,
          "Base address for list 1 ref 1 luma compress table LSB."),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_4, 400, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table chroma entry 4"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_5, 400, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table chroma entry 5"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_6, 400, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table chroma entry 6"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_7, 400, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table chroma entry 7"),
    H2REG(HWIF_ENC_L1_REF1_LUMA_COMPRESS_TABLE_BASE_MSB, 404, 0xffffffff, 0, 0, RW, NONE,
          "Base address for list 1 ref 1 luma compress table MSB."),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_8, 404, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table chroma entry 8"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_9, 404, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table chroma entry 9"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_10, 404, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table chroma entry 10"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_11, 404, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table chroma entry 11"),
    H2REG(HWIF_ENC_L1_REF1_CHROMA_COMPRESS_TABLE_BASE, 408, 0xffffffff, 0, 0, RW, ENC_IN,
          "Base address for list 1 ref 1 Chroma compress table LSB."),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_12, 408, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table chroma entry 12"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_13, 408, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table chroma entry 13"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_14, 408, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table chroma entry 14"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_15, 408, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table chroma entry 15"),
    H2REG(HWIF_ENC_L1_REF1_CHROMA_COMPRESS_TABLE_BASE_MSB, 412, 0xffffffff, 0, 0, RW, NONE,
          "Base address for list 1 ref 1 Chroma compress table MSB."),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_16, 412, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table chroma entry 16"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_17, 412, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table chroma entry 17"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_18, 412, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table chroma entry 18"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_19, 412, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table chroma entry 19"),
    H2REG(HWIF_ENC_LISTS_MODI_PRESENT_FLAG, 416, 0x80000000, 31, 0, RW, NONE,
          "lists_modification_present_flag from pps"),
    H2REG(HWIF_ENC_RDO_LEVEL, 416, 0x60000000, 29, 0, RW, NONE, "RDO level"),
    H2REG(HWIF_ENC_LIST_ENTRY_L1_PIC1, 416, 0x01e00000, 21, 0, RW, NONE,
          "Reserved for future. Not used now."),
    H2REG(HWIF_ENC_LIST_ENTRY_L1_PIC0, 416, 0x001e0000, 17, 0, RW, NONE, "list1 picture0 index"),
    H2REG(HWIF_ENC_REF_PIC_LIST_MODI_FLAG_L1, 416, 0x00010000, 16, 0, RW, NONE,
          "reference picture list1 modification flag"),
    H2REG(HWIF_ENC_LIST_ENTRY_L0_PIC1, 416, 0x000001e0, 5, 0, RW, NONE,
          "Reserved for future. Not used now."),
    H2REG(HWIF_ENC_LIST_ENTRY_L0_PIC0, 416, 0x0000001e, 1, 0, RW, NONE, "list0 picture0 index"),
    H2REG(HWIF_ENC_REF_PIC_LIST_MODI_FLAG_L0, 416, 0x00000001, 0, 0, RW, NONE,
          "reference picture list0 modification flag"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_20, 416, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table chroma entry 20"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_21, 416, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table chroma entry 21"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_22, 416, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table chroma entry 22"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_23, 416, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table chroma entry 23"),
    H2REG(HWIF_ENC_TARGETPICSIZE, 420, 0xffffffff, 0, 0, RW, NONE, "target picture size"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_24, 420, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table chroma entry 24"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_25, 420, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table chroma entry 25"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_26, 420, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table chroma entry 26"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_27, 420, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table chroma entry 27"),
    H2REG(HWIF_ENC_MINPICSIZE, 424, 0xffffffff, 0, 0, RW, NONE,
          "Allowed minimum picture size for CTB rate control."),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_28, 424, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table chroma entry 28"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_29, 424, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table chroma entry 29"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_30, 424, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table chroma entry 30"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_31, 424, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table chroma entry 31"),
    H2REG(HWIF_ENC_MAXPICSIZE, 428, 0xffffffff, 0, 0, RW, NONE,
          "Allowed minimum picture size for CTB rate control."),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_32, 428, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table chroma entry 32"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_33, 428, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table chroma entry 33"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_34, 428, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table chroma entry 34"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_35, 428, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table chroma entry 35"),
    H2REG(HWIF_ENC_AVERAGEQP, 432, 0xff000000, 24, 0, RW, NONE, "average QP"),
    H2REG(HWIF_ENC_NONZEROCOUNT, 432, 0x00ffffff, 0, 0, RW, NONE, "sw_enc_NonZeroCount"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_36, 432, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table chroma entry 36"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_37, 432, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table chroma entry 37"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_38, 432, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table chroma entry 38"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_39, 432, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table chroma entry 39"),
    H2REG(HWIF_ENC_ROIMAPDELTAQPADDR, 436, 0xffffffff, 0, 0, RW, ENC_IN, "Qp delta map"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_40, 436, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table chroma entry 40"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_41, 436, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table chroma entry 41"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_42, 436, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table chroma entry 42"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_43, 436, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table chroma entry 43"),
    H2REG(HWIF_ENC_ROIMAPDELTAQPADDR_MSB, 440, 0xffffffff, 0, 0, RW, NONE, "Qp delta map MSB"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_44, 440, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table chroma entry 44"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_45, 440, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table chroma entry 45"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_46, 440, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table chroma entry 46"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_47, 440, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table chroma entry 47"),
    H2REG(HWIF_ENC_INTRACU8NUM, 444, 0xfffff000, 12, 0, RW, NONE,
          "The number of block8x8 with type INTRA."),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_48, 444, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table chroma entry 48"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_49, 444, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table chroma entry 49"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_50, 444, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table chroma entry 50"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_51, 444, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table chroma entry 51"),
    H2REG(HWIF_ENC_SKIPCU8NUM, 448, 0xfffff000, 12, 0, RW, NONE,
          "The number of block8x8 with type SKIP."),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_52, 448, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table chroma entry 52"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_53, 448, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table chroma entry 53"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_54, 448, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table chroma entry 54"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_55, 448, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table chroma entry 55"),
    H2REG(HWIF_ENC_PBFRAME4NRDCOST, 452, 0xffffffff, 0, 0, RW, NONE, "PBFrame4NRdCost"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_56, 452, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table chroma entry 56"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_57, 452, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table chroma entry 57"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_58, 452, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table chroma entry 58"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_59, 452, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table chroma entry 59"),
    H2REG(HWIF_ENC_COLCTBS_STORE_BASE, 456, 0xffffffff, 0, 0, RW, ENC_OUT,
          "H.264 collocated mb memory address of current frame (for store)"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_60, 456, 0xff000000, 24, 0, RW, NONE,
          "jpeg quant table chroma entry 60"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_61, 456, 0x00ff0000, 16, 0, RW, NONE,
          "jpeg quant table chroma entry 61"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_62, 456, 0x0000ff00, 8, 0, RW, NONE,
          "jpeg quant table chroma entry 62"),
    H2REG(HWIF_ENC_JPEG_QUANT_TABLE_CHROMA_63, 456, 0x000000ff, 0, 0, RW, NONE,
          "jpeg quant table chroma entry 63"),
    H2REG(HWIF_ENC_COLCTBS_STORE_BASE_MSB, 460, 0xffffffff, 0, 0, RW, NONE,
          "sw_enc_colctbs_store_base_msb"),
    H2REG(HWIF_ENC_COLCTBS_LOAD_BASE, 464, 0xffffffff, 0, 0, RW, ENC_IN,
          "H.264 collocated mb memory address of reference frame (for load)"),
    H2REG(HWIF_ENC_COLCTBS_LOAD_BASE_MSB, 468, 0xffffffff, 0, 0, RW, NONE,
          "sw_enc_colctbs_load_base_msb"),
    H2REG(HWIF_ENC_CTBRCTHRDMIN, 472, 0xffff0000, 16, 0, RW, NONE,
          "sw_enc_CtbRcThrdMin ctb rate control threshold"),
    H2REG(HWIF_ENC_CTBRCTHRDMAX, 472, 0x0000ffff, 0, 0, RW, NONE,
          "sw_enc_CtbRcThrdMax ctb rate control threshold"),
    H2REG(HWIF_ENC_CTBBITSMIN, 476, 0xffff0000, 16, 0, RW, NONE,
          "minimum lcu bits number of last picture"),
    H2REG(HWIF_ENC_CTBBITSMAX, 476, 0x0000ffff, 0, 0, RW, NONE,
          "maximum lcu bits number of last picture"),
    H2REG(HWIF_ENC_TOTALLCUBITS, 480, 0xffffffff, 0, 0, RW, NONE,
          "total bits number of all lcus of last picture not including slice "
          "header bits"),
    H2REG(HWIF_ENC_BITSRATIO, 484, 0xffffffff, 0, 0, RW, NONE,
          "128* TargetCurPicSize/ TargetLastPicSize for lcu target bits "
          "calculation"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_10, 488, 0xfffe0000, 17, 0, RW, NONE, "inter me SSE lambda 10"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_11, 488, 0x0001fffc, 2, 0, RW, NONE, "inter me SSE lambda 11"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_1_EXPAND6BIT, 488, 0xfffff800, 11, 0, RW, NONE,
          "inter me SSE lambda 1"),
    H2REG(HWIF_ENC_AV1_ALLOW_INTRABC, 488, 0x80000000, 31, 0, RW, NONE, "av1_allow_intrabc"),
    H2REG(HWIF_ENC_AV1_CODED_LOSSLESS, 488, 0x40000000, 30, 0, RW, NONE, "av1_coded_lossless"),
    H2REG(HWIF_ENC_AV1_DELTA_Q_RES, 488, 0x3c000000, 26, 0, RW, NONE, "av1_delta_q_res"),
    H2REG(HWIF_ENC_AV1_ENABLE_FILTER_INTRA, 488, 0x02000000, 25, 0, RW, NONE,
          "av1_enable_filter_intra"),
    H2REG(HWIF_ENC_AV1_TX_MODE, 488, 0x01800000, 23, 0, RW, NONE, "av1_tx_mode"),
    H2REG(HWIF_ENC_AV1_REDUCED_TX_SET_USED, 488, 0x00400000, 22, 0, RW, NONE,
          "av1_reduced_tx_set_used"),
    H2REG(HWIF_ENC_AV1_SEG_ENABLE, 488, 0x00200000, 21, 0, RW, NONE, "av1_seg_enable"),
    H2REG(HWIF_ENC_AV1_ALLOW_HIGH_PRECISION_MV, 488, 0x00100000, 20, 0, RW, NONE,
          "av1_allow_high_precision_mv"),
    H2REG(HWIF_ENC_AV1_SKIP_MODE_FLAG, 488, 0x00080000, 19, 0, RW, NONE, "av1_skip_mode_flag"),
    H2REG(HWIF_ENC_AV1_REFERENCE_MODE, 488, 0x00060000, 17, 0, RW, NONE, "av1_reference_mode"),
    H2REG(HWIF_ENC_AV1_LIST0_REF_FRAME, 488, 0x0001e000, 13, 0, RW, NONE, "av1_list0_ref_frame"),
    H2REG(HWIF_ENC_AV1_LIST1_REF_FRAME, 488, 0x00001e00, 9, 0, RW, NONE, "av1_list1_ref_frame"),
    H2REG(HWIF_ENC_AV1_ENABLE_INTERINTRA_COMPOUND, 488, 0x00000100, 8, 0, RW, NONE,
          "av1_enable_interintra_compound"),
    H2REG(HWIF_ENC_AV1_ENABLE_DUAL_FILTER, 488, 0x00000080, 7, 0, RW, NONE,
          "av1_enable_dual_filter"),
    H2REG(HWIF_ENC_AV1_CUR_FRAME_FORCE_INTEGER_MV, 488, 0x00000040, 6, 0, RW, NONE,
          "av1_cur_frame_force_integer_mv"),
    H2REG(HWIF_ENC_AV1_SWITCHABLE_MOTION_MODE, 488, 0x00000020, 5, 0, RW, NONE,
          "av1_switchable_motion_mode"),
    H2REG(HWIF_ENC_AV1_INTERP_FILTER, 488, 0x0000001c, 2, 0, RW, NONE, "av1_interp_filter"),
    H2REG(HWIF_ENC_AV1_ALLOW_UPDATE_CDF, 488, 0x00000002, 1, 0, RW, NONE, "av1_allow_update_cdf"),
    H2REG(HWIF_ENC_AV1_ENABLE_ORDER_HINT, 488, 0x00000001, 0, 0, RW, NONE, "av1_enable_order_hint"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_12, 492, 0xfffe0000, 17, 0, RW, NONE, "inter me SSE lambda 12"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_13, 492, 0x0001fffc, 2, 0, RW, NONE, "inter me SSE lambda 13"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_2_EXPAND6BIT, 492, 0xfffff800, 11, 0, RW, NONE,
          "inter me SSE lambda 2"),
    H2REG(HWIF_ENC_CTBRC_QPDELTA_FLAG_REVERSE, 492, 0x00000001, 0, 0, RW, NONE,
          "ctbrc qpdelta flag reverse"),
    H2REG(HWIF_ENC_AV1_DB_FILTER_LVL0, 492, 0xfc000000, 26, 0, RW, NONE, "av1_db_filter_lvl0"),
    H2REG(HWIF_ENC_AV1_DB_FILTER_LVL1, 492, 0x03f00000, 20, 0, RW, NONE, "av1_db_filter_lvl1"),
    H2REG(HWIF_ENC_AV1_DB_FILTER_LVL_U, 492, 0x000fc000, 14, 0, RW, NONE, "av1_db_filter_lvl_u"),
    H2REG(HWIF_ENC_AV1_DB_FILTER_LVL_V, 492, 0x00003f00, 8, 0, RW, NONE, "av1_db_filter_lvl_v"),
    H2REG(HWIF_ENC_AV1_SHARPNESS_LVL, 492, 0x000000e0, 5, 0, RW, NONE, "av1_sharpness_lvl"),
    H2REG(HWIF_ENC_AV1_PRIMARY_REF_FRAME, 492, 0x0000001c, 2, 0, RW, NONE,
          "select reference frame for probability table"),
    H2REG(HWIF_ENC_AV1_BTXTYPESEARCH, 492, 0x00000002, 1, 0, RW, NONE, "enable AV1 tx type search"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_14, 496, 0xfffe0000, 17, 0, RW, NONE, "inter me SSE lambda 14"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_15, 496, 0x0001fffc, 2, 0, RW, NONE, "inter me SSE lambda 15"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_3_EXPAND6BIT, 496, 0xfffff800, 11, 0, RW, NONE,
          "inter me SSE lambda 3"),
    H2REG(HWIF_ENC_AV1_CDEF_DAMPING, 496, 0xe0000000, 29, 0, RW, NONE, "av1_cdef_damping"),
    H2REG(HWIF_ENC_AV1_CDEF_STRENGTHS, 496, 0x1f800000, 23, 0, RW, NONE, "av1_cdef_strengths"),
    H2REG(HWIF_ENC_AV1_CDEF_UV_STRENGTHS, 496, 0x007e0000, 17, 0, RW, NONE,
          "av1_cdef_uv_strengths"),
    H2REG(HWIF_ENC_AV1_CDEF_BITS, 496, 0x00018000, 15, 0, RW, NONE, "av1_cdef_bits"),
    H2REG(HWIF_ENC_VP9_REFRESH_FRAME_CONTEXT, 496, 0x00004000, 14, 0, RW, NONE,
          "vp9 update probability table control"),
    H2REG(HWIF_ENC_LAST_FRAME_TYPE, 496, 0x00002000, 13, 0, RW, NONE,
          "Last frame type(intra/inter)"),
    H2REG(HWIF_ENC_VP9_SEGMENTATION_ENABLE, 496, 0x00001000, 12, 0, RW, NONE,
          "vp9 segmentation enable control"),
    H2REG(HWIF_ENC_RDOQ_MAP_ENABLE, 496, 0x00000800, 11, 0, RW, NONE, "rdoq map enable control"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_0, 500, 0xfffc0000, 18, 0, RW, NONE, "intra SATD lambda 0"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_1, 500, 0x0003fff0, 4, 0, RW, NONE, "intra SATD lambda 1"),
    H2REG(HWIF_ENC_AV1_FRAMECTX_BASE, 500, 0xffffffff, 0, 0, RW, ENC_INOUT,
          "AV1 frameCtx probability table address"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_2, 504, 0xfffc0000, 18, 0, RW, NONE, "intra SATD lambda 2"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_3, 504, 0x0003fff0, 4, 0, RW, NONE, "intra SATD lambda 3"),
    H2REG(HWIF_ENC_AV1_FRAMECTX_BASE_MSB, 504, 0xffffffff, 0, 0, RW, NONE,
          "AV1 frameCtx probability table address MSB"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_4, 508, 0xfffc0000, 18, 0, RW, NONE, "intra SATD lambda 4"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_5, 508, 0x0003fff0, 4, 0, RW, NONE, "intra SATD lambda 5"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR1, 508, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 1 input luma buffer address"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_6, 512, 0xfffc0000, 18, 0, RW, NONE, "intra SATD lambda 6"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_7, 512, 0x0003fff0, 4, 0, RW, NONE, "intra SATD lambda 7"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR1_MSB, 512, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 1 input luma buffer address MSB part"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_8, 516, 0xfffc0000, 18, 0, RW, NONE, "intra SATD lambda 8"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_9, 516, 0x0003fff0, 4, 0, RW, NONE, "intra SATD lambda 9"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR1, 516, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 1 input chroma U buffer address"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_10, 520, 0xfffc0000, 18, 0, RW, NONE, "intra SATD lambda 10"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_11, 520, 0x0003fff0, 4, 0, RW, NONE, "intra SATD lambda 11"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR1_MSB, 520, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 1 input chroma U buffer address MSB part"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_12, 524, 0xfffc0000, 18, 0, RW, NONE, "intra SATD lambda 12"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_13, 524, 0x0003fff0, 4, 0, RW, NONE, "intra SATD lambda 13"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR1, 524, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 1 input chroma V buffer address"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_14, 528, 0xfffc0000, 18, 0, RW, NONE, "intra SATD lambda 14"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_15, 528, 0x0003fff0, 4, 0, RW, NONE, "intra SATD lambda 15"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR1_MSB, 528, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 1 input chroma V buffer address MSB part"),
    H2REG(HWIF_ENC_SSE_DIV_256, 532, 0xffffffff, 0, 0, RW, NONE, "sse divide 256"),
    H2REG(HWIF_ENC_NOISE_REDUCTION_ENABLE, 536, 0xc0000000, 30, 0, RW, NONE,
          "enable/disable the de-noise function"),
    H2REG(HWIF_ENC_NOISE_LOW, 536, 0x3f000000, 24, 0, RW, NONE,
          "the low boundary for noise estimation"),
    H2REG(HWIF_ENC_NR_MBNUM_INVERT_REG, 536, 0x0000ffff, 0, 0, RW, NONE,
          "inverter of luma16 num *N"),
    H2REG(HWIF_ENC_SLICEQP_PREV, 540, 0xfc000000, 26, 0, RW, NONE, "previous frame slice QP"),
    H2REG(HWIF_ENC_THRESH_SIGMA_CUR, 540, 0x03ffffe0, 5, 0, RW, NONE,
          "sigma threshold for current frame"),
    H2REG(HWIF_ENC_SIGMA_CUR, 544, 0xffff0000, 16, 0, RW, NONE, "noise sigma for current frame"),
    H2REG(HWIF_ENC_FRAME_SIGMA_CALCED, 544, 0x0000ffff, 0, 0, RW, NONE,
          "calculated sigma of coding frame"),
    H2REG(HWIF_ENC_THRESH_SIGMA_CALCED, 548, 0xfffff800, 11, 0, RW, NONE,
          "noise sigma for current frame"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_4_EXPAND6BIT, 552, 0xfffff800, 11, 0, RW, NONE,
          "inter me SSE lambda 3"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR2, 552, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 2 input luma buffer address"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_5_EXPAND6BIT, 556, 0xfffff800, 11, 0, RW, NONE,
          "inter me SSE lambda 5"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR2_MSB, 556, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 2 input luma buffer address MSB part"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_6_EXPAND6BIT, 560, 0xfffff800, 11, 0, RW, NONE,
          "inter me SSE lambda 6"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR2, 560, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 2 input chroma U buffer address"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_7_EXPAND6BIT, 564, 0xfffff800, 11, 0, RW, NONE,
          "inter me SSE lambda 7"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR2_MSB, 564, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 2 input chroma U buffer address MSB part"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_8_EXPAND6BIT, 568, 0xfffff800, 11, 0, RW, NONE,
          "inter me SSE lambda 8"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR2, 568, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 2 input chroma V buffer address"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_9_EXPAND6BIT, 572, 0xfffff800, 11, 0, RW, NONE,
          "inter me SSE lambda 9"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR2_MSB, 572, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 2 input chroma V buffer address MSB part"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_10_EXPAND6BIT, 576, 0xfffff800, 11, 0, RW, NONE,
          "inter me SSE lambda 10"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR3, 576, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 3 input luma buffer address"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_11_EXPAND6BIT, 580, 0xfffff800, 11, 0, RW, NONE,
          "inter me SSE lambda 11"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR3_MSB, 580, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 3 input luma buffer address MSB part"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_12_EXPAND6BIT, 584, 0xfffff800, 11, 0, RW, NONE,
          "inter me SSE lambda 12"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR3, 584, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 3 input chroma U buffer address"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_13_EXPAND6BIT, 588, 0xfffff800, 11, 0, RW, NONE,
          "inter me SSE lambda 13"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR3_MSB, 588, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 3 input chroma U buffer address MSB part"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_14_EXPAND6BIT, 592, 0xfffff800, 11, 0, RW, NONE,
          "inter me SSE lambda 14"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR3, 592, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 3 input chroma V buffer address"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_15_EXPAND6BIT, 596, 0xfffff800, 11, 0, RW, NONE,
          "inter me SSE lambda 15"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR3_MSB, 596, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 3 input chroma V buffer address MSB part"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_16, 600, 0xfff80000, 19, 0, RW, NONE, "lambda satd me 16"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_17, 600, 0x0007ffc0, 6, 0, RW, NONE, "lambda satd me 17"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR4, 600, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 4 input luma buffer address"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_18, 604, 0xfff80000, 19, 0, RW, NONE, "lambda satd me 18"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_19, 604, 0x0007ffc0, 6, 0, RW, NONE, "lambda satd me 19"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR4_MSB, 604, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 4 input luma buffer address MSB part"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_20, 608, 0xfff80000, 19, 0, RW, NONE, "lambda satd me 20"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_21, 608, 0x0007ffc0, 6, 0, RW, NONE, "lambda satd me 21"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR4, 608, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 4 input chroma U buffer address"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_22, 612, 0xfff80000, 19, 0, RW, NONE, "lambda satd me 22"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_23, 612, 0x0007ffc0, 6, 0, RW, NONE, "lambda satd me 23"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR4_MSB, 612, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 4 input chroma U buffer address MSB part"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_24, 616, 0xfff80000, 19, 0, RW, NONE, "lambda satd me 24"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_25, 616, 0x0007ffc0, 6, 0, RW, NONE, "lambda satd me 25"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR4, 616, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 4 input chroma V buffer address"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_26, 620, 0xfff80000, 19, 0, RW, NONE, "lambda satd me 26"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_27, 620, 0x0007ffc0, 6, 0, RW, NONE, "lambda satd me 27"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR4_MSB, 620, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 4 input chroma V buffer address MSB part"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_28, 624, 0xfff80000, 19, 0, RW, NONE, "lambda satd me 28"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_29, 624, 0x0007ffc0, 6, 0, RW, NONE, "lambda satd me 29"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR5, 624, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 5 input luma buffer address"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_30, 628, 0xfff80000, 19, 0, RW, NONE, "lambda satd me 30"),
    H2REG(HWIF_ENC_LAMDA_SATD_ME_31, 628, 0x0007ffc0, 6, 0, RW, NONE, "lambda satd me 31"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR5_MSB, 628, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 5 input luma buffer address MSB part"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_16, 632, 0xfffff800, 11, 0, RW, NONE, "inter me SSE lambda 16"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR5, 632, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 5 input chroma U buffer address"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_17, 636, 0xfffff800, 11, 0, RW, NONE, "inter me SSE lambda 17"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR5_MSB, 636, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 5 input chroma U buffer address MSB part"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_18, 640, 0xfffff800, 11, 0, RW, NONE, "inter me SSE lambda 18"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR5, 640, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 5 input chroma V buffer address"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_19, 644, 0xfffff800, 11, 0, RW, NONE, "inter me SSE lambda 19"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR5_MSB, 644, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 5 input chroma V buffer address MSB part"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_20, 648, 0xfffff800, 11, 0, RW, NONE, "inter me SSE lambda 20"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR6, 648, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 6 input luma buffer address"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_21, 652, 0xfffff800, 11, 0, RW, NONE, "inter me SSE lambda 21"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR6_MSB, 652, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 6 input luma buffer address MSB part"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_22, 656, 0xfffff800, 11, 0, RW, NONE, "inter me SSE lambda 22"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR6, 656, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 6 input chroma U buffer address"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_23, 660, 0xfffff800, 11, 0, RW, NONE, "inter me SSE lambda 23"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR6_MSB, 660, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 6 input chroma U buffer address MSB part"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_24, 664, 0xfffff800, 11, 0, RW, NONE, "inter me SSE lambda 24"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR6, 664, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 6 input chroma V buffer address"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_25, 668, 0xfffff800, 11, 0, RW, NONE, "inter me SSE lambda 25"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR6_MSB, 668, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 6 input chroma V buffer address MSB part"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_26, 672, 0xfffff800, 11, 0, RW, NONE, "inter me SSE lambda 26"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR7, 672, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 7 input luma buffer address"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_27, 676, 0xfffff800, 11, 0, RW, NONE, "inter me SSE lambda 27"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR7_MSB, 676, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 7 input luma buffer address MSB part"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_28, 680, 0xfffff800, 11, 0, RW, NONE, "inter me SSE lambda 28"),
    H2REG(HWIF_ENC_RC_CTBRC_SLICEQPOFFSET, 680, 0x000007e0, 5, 0, RW, NONE,
          "slice Qp offset for ROI -30~+30"),
    H2REG(HWIF_ENC_ROI1_DELTA_QP_RC, 680, 0x0000001f, 0, 0, RW, NONE, "ROI1 delta qp with rc"),
    H2REG(HWIF_ENC_LAMBDA_DEPTH, 680, 0x80000000, 31, 0, RW, NONE, "Lambda depth 0 or 1"),
    H2REG(HWIF_ENC_SSE_QP_FACTOR, 680, 0x007fff00, 8, 0, RW, NONE,
          "SSE QP Factor. Fix Point Q1.14"),
    H2REG(HWIF_ENC_ROI1_QP_VALUE, 680, 0x000000fe, 1, 0, RW, NONE,
          "ROI1 qp value. delta or absolute value"),
    H2REG(HWIF_ENC_ROI1_QP_TYPE, 680, 0x00000001, 0, 0, RW, NONE,
          "ROI1 qp type. 0:delta;1:Absolute value"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_29, 684, 0xfffff800, 11, 0, RW, NONE, "inter me SSE lambda 29"),
    H2REG(HWIF_ENC_ROI2_DELTA_QP_RC, 684, 0x0000001f, 0, 0, RW, NONE, "ROI2 delta qp with rc"),
    H2REG(HWIF_ENC_SAD_QP_FACTOR, 684, 0x007fff00, 8, 0, RW, NONE,
          "SAD QP Factor. Fix Point Q1.14"),
    H2REG(HWIF_ENC_ROI2_QP_VALUE, 684, 0x000000fe, 1, 0, RW, NONE,
          "ROI2 qp value. delta or absolute value"),
    H2REG(HWIF_ENC_ROI2_QP_TYPE, 684, 0x00000001, 0, 0, RW, NONE,
          "ROI2 qp type. 0:delta;1:Absolute value"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_30, 688, 0xfffff800, 11, 0, RW, NONE, "inter me SSE lambda 30"),
    H2REG(HWIF_ENC_QP_MIN, 688, 0x000007e0, 5, 0, RW, NONE, "min value of qp"),
    H2REG(HWIF_ENC_COMPLEXITY_OFFSET, 688, 0x0000001f, 0, 0, RW, NONE,
          "block rc complexity offset"),
    H2REG(HWIF_ENC_LAMDA_SSE_ME_31, 692, 0xfffff800, 11, 0, RW, NONE, "inter me SSE lambda 31"),
    H2REG(HWIF_ENC_QP_MAX, 692, 0x000007e0, 5, 0, RW, NONE, "max value of qp"),
    H2REG(HWIF_ENC_RC_QPDELTA_RANGE, 692, 0x0000000f, 0, 0, RW, NONE, "rc qp delta range"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_16, 696, 0xfffc0000, 18, 0, RW, NONE, "intra SATD lambda 16"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_17, 696, 0x0003fff0, 4, 0, RW, NONE, "intra SATD lambda 17"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR7, 696, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 7 input chroma U buffer address"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_18, 700, 0xfffc0000, 18, 0, RW, NONE, "intra SATD lambda 18"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_19, 700, 0x0003fff0, 4, 0, RW, NONE, "intra SATD lambda 19"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR7_MSB, 700, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 7 input chroma U buffer address MSB part"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_20, 704, 0xfffc0000, 18, 0, RW, NONE, "intra SATD lambda 20"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_21, 704, 0x0003fff0, 4, 0, RW, NONE, "intra SATD lambda 21"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR7, 704, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 7 input chroma V buffer address"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_22, 708, 0xfffc0000, 18, 0, RW, NONE, "intra SATD lambda 22"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_23, 708, 0x0003fff0, 4, 0, RW, NONE, "intra SATD lambda 23"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR7_MSB, 708, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 7 input chroma V buffer address MSB part"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_24, 712, 0xfffc0000, 18, 0, RW, NONE, "intra SATD lambda 24"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_25, 712, 0x0003fff0, 4, 0, RW, NONE, "intra SATD lambda 25"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR8, 712, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 8 input luma buffer address"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_26, 716, 0xfffc0000, 18, 0, RW, NONE, "intra SATD lambda 26"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_27, 716, 0x0003fff0, 4, 0, RW, NONE, "intra SATD lambda 27"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR8_MSB, 716, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 8 input luma buffer address MSB part"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_28, 720, 0xfffc0000, 18, 0, RW, NONE, "intra SATD lambda 28"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_29, 720, 0x0003fff0, 4, 0, RW, NONE, "intra SATD lambda 29"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR8, 720, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 8 input chroma U buffer address"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_30, 724, 0xfffc0000, 18, 0, RW, NONE, "intra SATD lambda 30"),
    H2REG(HWIF_ENC_INTRA_SATD_LAMDA_31, 724, 0x0003fff0, 4, 0, RW, NONE, "intra SATD lambda 31"),
    H2REG(HWIF_ENC_AV1_PLANE_RD_MULT_INTRA_LUM, 724, 0xf8000000, 27, 0, RW, NONE,
          "AV1 plane rdmult intra luma"),
    H2REG(HWIF_ENC_AV1_PLANE_RD_MULT_INTRA_CHR, 724, 0x07c00000, 22, 0, RW, NONE,
          "AV1 plane rdmult intra chroma"),
    H2REG(HWIF_ENC_AV1_PLANE_RD_MULT_INTER_LUM, 724, 0x003e0000, 17, 0, RW, NONE,
          "AV1 plane rdmult inter luma"),
    H2REG(HWIF_ENC_AV1_PLANE_RD_MULT_INTER_CHR, 724, 0x0001f000, 12, 0, RW, NONE,
          "AV1 plane rdmult inter chroma"),
    H2REG(HWIF_ENC_RC_BLOCK_SIZE, 724, 0x0000000c, 2, 0, RW, NONE,
          "block rc block size 0=64x64. 1=32x32. 2=16x16"),
    H2REG(HWIF_ENC_QP_FRACTIONAL, 728, 0xffff0000, 16, 0, RW, NONE, "qp fractional part"),
    H2REG(HWIF_ENC_QP_DELTA_GAIN, 728, 0x0000ffff, 0, 0, RW, NONE, "qp delta gain"),
    H2REG(HWIF_ENC_QP_SUM, 732, 0xffffffc0, 6, 0, RW, NONE, "Block qp sum"),
    H2REG(HWIF_ENC_QP_NUM, 736, 0xfffff000, 12, 0, RW, NONE, "Block qp number"),
    H2REG(HWIF_ENC_PIC_COMPLEXITY, 740, 0xfffffe00, 9, 0, RW, NONE, "Picture complexity"),
    H2REG(HWIF_TIMEOUT_CYCLES_MSB, 740, 0x000001ff, 0, 0, RW, NONE,
          "Extend swreg81. Timeout cycles number. Bits 31:23."),
    H2REG(HWIF_ENC_CU_INFORMATION_TABLE_BASE, 744, 0xffffffff, 0, 0, RW, ENC_INOUT,
          "Base address for CU information table LSB"),
    H2REG(HWIF_ENC_CU_INFORMATION_TABLE_BASE_MSB, 748, 0xffffffff, 0, 0, RW, NONE,
          "Base address for CU information table MSB"),
    H2REG(HWIF_ENC_CU_INFORMATION_BASE, 752, 0xffffffff, 0, 0, RW, ENC_INOUT,
          "Base address for CU information LSB"),
    H2REG(HWIF_ENC_CU_INFORMATION_BASE_MSB, 756, 0xffffffff, 0, 0, RW, NONE,
          "Base address for CU information MSB"),
    H2REG(HWIF_ENC_NUM_LONG_TERM_PICS, 760, 0xc0000000, 30, 0, RW, NONE,
          "Number of long-term reference pictures directly signaled in the "
          "slice header"),
    H2REG(HWIF_ENC_NAL_REF_IDC_2BIT, 760, 0x0c000000, 26, 0, RW, NONE,
          "H264 support 2bit nal_ref_idc"),
    H2REG(HWIF_ENC_NAL_UNIT_TYPE, 764, 0xfc000000, 26, 0, RW, NONE, "NAL unit type"),
    H2REG(HWIF_ENC_NUH_TEMPORAL_ID, 764, 0x03800000, 23, 0, RW, NONE, "NAL temporal id"),
    H2REG(HWIF_ENC_PPS_ID, 764, 0x007e0000, 17, 0, RW, NONE, "PPS id"),
    H2REG(HWIF_ENC_PREFIXNAL_SVC_EXT, 764, 0x00010000, 16, 1, RW, NONE,
          "H264 SVCT enable. 1=enabled (insert H264Scalability SEI). 0=disabled"),
    H2REG(HWIF_ENC_OBU_EXTENSION_FLAG, 764, 0x00010000, 16, 1, RW, NONE,
          "Decide if write AV1 obu extension header. 1=enabled (write). "
          "0=disabled"),
    H2REG(HWIF_ENC_SLICE_HEADER_SIZE, 764, 0x0000ffff, 0, 0, RW, NONE, "Slice header size"),
    H2REG(HWIF_ENC_FRAMENUM, 768, 0xffffffff, 0, 0, RW, NONE, "encoded Picture frame number"),
    H2REG(HWIF_ENC_L0_DELTA_FRAMENUM0, 772, 0xffe00000, 21, 0, RW, NONE,
          "delta frame_num of list0 pic0"),
    H2REG(HWIF_ENC_L0_USED_BY_NEXT_PIC0, 772, 0x00100000, 20, 0, RW, NONE,
          "list0 pic0 used by later frames"),
    H2REG(HWIF_ENC_L0_DELTA_FRAMENUM1, 772, 0x000ffe00, 9, 0, RW, NONE,
          "delta frame_num of list0 pic1"),
    H2REG(HWIF_ENC_L0_USED_BY_NEXT_PIC1, 772, 0x00000100, 8, 0, RW, NONE,
          "list0 pic1 used by later frames"),
    H2REG(HWIF_ENC_XFILL_MSB, 772, 0x000000c0, 6, 1, RW, NONE,
          "OverfillMsb pixels on right edge of image div2. XFillMsb[0.1.2.3] "
          "(bits[2:3] for H.264)"),
    H2REG(HWIF_ENC_YFILL_MSB, 772, 0x00000030, 4, 1, RW, NONE,
          "OverfillMsb pixels on bottom edge of image. YFillMsb [0.1.2.3] "
          "(bits[3:4] for H.264)"),
    H2REG(HWIF_ENC_NAL_REF_IDC, 772, 0x00000008, 3, 0, RW, NONE,
          "current pic is used as reference"),
    H2REG(HWIF_ENC_IDR_PIC_ID, 772, 0x00000004, 2, 0, RW, NONE, "picture id for IDR frame"),
    H2REG(HWIF_ENC_TRANSFORM8X8_ENABLE, 772, 0x00000002, 1, 0, RW, NONE, "Enable transform8x8"),
    H2REG(HWIF_ENC_ENTROPY_CODING_MODE, 772, 0x00000001, 0, 0, RW, NONE,
          "Entropy coding mode flag. [0.1]"),
    H2REG(HWIF_ENC_L1_DELTA_FRAMENUM0, 776, 0xffe00000, 21, 0, RW, NONE,
          "delta frame_num of list1 pic0"),
    H2REG(HWIF_ENC_L1_USED_BY_NEXT_PIC0, 776, 0x00100000, 20, 0, RW, NONE,
          "list1 pic0 used by later frames"),
    H2REG(HWIF_ENC_L1_DELTA_FRAMENUM1, 776, 0x000ffe00, 9, 0, RW, NONE,
          "delta frame_num of list1 pic1"),
    H2REG(HWIF_ENC_L1_USED_BY_NEXT_PIC1, 776, 0x00000100, 8, 0, RW, NONE,
          "list1 pic1 used by later frames"),
    H2REG(HWIF_ENC_MAX_LONGTERMIDX_PLUS1, 776, 0x000000e0, 5, 0, RW, NONE,
          "max number of long term frames (for H.264)"),
    H2REG(HWIF_ENC_CUR_LONGTERMIDX, 776, 0x0000001c, 2, 0, RW, NONE,
          "long term frame idx of current frame (for H.264)"),
    H2REG(HWIF_ENC_ENCODED_CTB_NUMBER_MSB, 780, 0xf0000000, 28, 0, RW, NONE,
          "MB count output. Max 512*256. bit[13:16]"),
    H2REG(HWIF_ENC_NUM_SLICES_READY_MSB, 780, 0x0c000000, 26, 0, RW, NONE,
          "HEVC amount of completed slices. bit[8:9]"),
    H2REG(HWIF_ENC_SLICE_SIZE_MSB, 780, 0x03000000, 24, 0, RW, NONE,
          "slice size in ctu row. bit[7:8]"),
    H2REG(HWIF_ENC_CIR_START_MSB, 780, 0x00f00000, 20, 0, RW, NONE, "cir start. bit[14:17]"),
    H2REG(HWIF_ENC_CIR_INTERVAL_MSB, 780, 0x000f0000, 16, 0, RW, NONE,
          "Cyclic Intra Refresh. bit[14:17]"),
    H2REG(HWIF_ENC_INTRA_AREA_LEFT_MSB, 780, 0x00008000, 15, 0, RW, NONE,
          "intra Area Left. bit[8]"),
    H2REG(HWIF_ENC_INTRA_AREA_RIGHT_MSB, 780, 0x00004000, 14, 0, RW, NONE,
          "intra Area Right. bit[8]"),
    H2REG(HWIF_ENC_INTRA_AREA_TOP_MSB, 780, 0x00002000, 13, 0, RW, NONE, "intra Area Top. bit[8]"),
    H2REG(HWIF_ENC_INTRA_AREA_BOTTOM_MSB, 780, 0x00001000, 12, 0, RW, NONE,
          "intra Area Bottom. bit[8]"),
    H2REG(HWIF_ENC_ROI1_LEFT_MSB, 780, 0x00000800, 11, 0, RW, NONE, "ROI1 Area Left. bit[8]"),
    H2REG(HWIF_ENC_ROI1_RIGHT_MSB, 780, 0x00000400, 10, 0, RW, NONE, "ROI1 Area Right. bit[8]"),
    H2REG(HWIF_ENC_ROI1_TOP_MSB, 780, 0x00000200, 9, 0, RW, NONE, "ROI1 Area Top. bit[8]"),
    H2REG(HWIF_ENC_ROI1_BOTTOM_MSB, 780, 0x00000100, 8, 0, RW, NONE, "ROI1 Area Bottom. bit[8]"),
    H2REG(HWIF_ENC_ROI2_LEFT_MSB, 780, 0x00000080, 7, 0, RW, NONE, "ROI2 Area Left. bit[8]"),
    H2REG(HWIF_ENC_ROI2_RIGHT_MSB, 780, 0x00000040, 6, 0, RW, NONE, "ROI2 Area Right. bit[8]"),
    H2REG(HWIF_ENC_ROI2_TOP_MSB, 780, 0x00000020, 5, 0, RW, NONE, "ROI2 Area Top. bit[8]"),
    H2REG(HWIF_ENC_ROI2_BOTTOM_MSB, 780, 0x00000010, 4, 0, RW, NONE, "ROI2 Area Bottom. bit[8]"),
    H2REG(HWIF_ENC_PIC_WIDTH_MSB, 780, 0x0000000c, 2, 1, RW, NONE,
          "Encoded width. lumWidthMsb(unit 8 pixels). bit[11:10]"),
    H2REG(HWIF_ENC_REF_RINGBUF_EN, 780, 0x00000002, 1, 0, RW, NONE,
          "referenc and recon use common ring buf"),
    H2REG(HWIF_LOW_LATENCY_HW_SYNC_EN, 784, 0x80000000, 31, 1, RW, NONE,
          "Low Latency Hardware Interface Enable. Use hardware handshaking."),
    H2REG(HWIF_LOW_LATENCY_EN, 784, 0x40000000, 30, 1, RW, NONE, "Low Latency Enable"),
    H2REG(HWIF_INPUT_BUF_LOOPBACK_EN, 784, 0x20000000, 29, 1, RW, NONE,
          "Input buffer loopback Enable"),
    H2REG(HWIF_NUM_CTB_ROWS_PER_SYNC, 784, 0x1ff00000, 20, 1, RW, NONE,
          "Number of CTB rows for every HW sync. Unit is CTB"),
    H2REG(HWIF_CTB_ROW_RD_PTR, 784, 0x000ffc00, 10, 0, RW, NONE,
          "The number of CTB rows that has been fetched from Input buffer by "
          "encoder"),
    H2REG(HWIF_CTB_ROW_WR_PTR, 784, 0x000003ff, 0, 0, RW, NONE,
          "The number of CTB rows that has been filled into the input buffer "
          "by external application"),
    H2REG(HWIF_ENC_L0_DELTA_POC0_MSB, 788, 0xffc00000, 22, 0, RW, NONE,
          "delta poc of list0 pic0 (bit[19..10])"),
    H2REG(HWIF_ENC_L0_DELTA_POC1_MSB, 788, 0x003ff000, 12, 0, RW, NONE,
          "delta poc of list0 pic1 (bit[19..10])"),
    H2REG(HWIF_ENC_L1_DELTA_POC0_MSB, 788, 0x00000ffc, 2, 0, RW, NONE,
          "delta poc of list1 pic0 (bit[19..10])"),
    H2REG(HWIF_CTB_ROW_WR_PTR_JPEG_MSB, 788, 0x000003e0, 5, 1, RW, NONE,
          "msb of sw_ctb_row_wr_ptr for jpeg"),
    H2REG(HWIF_CTB_ROW_RD_PTR_JPEG_MSB, 788, 0x0000001f, 0, 1, RW, NONE,
          "msb of sw_ctb_row_rd_ptr for jpeg"),
    H2REG(HWIF_ENC_L1_DELTA_POC1_MSB, 792, 0xffc00000, 22, 0, RW, NONE,
          "delta poc of list1 pic1 (bit[19..10])"),
    H2REG(HWIF_ENC_L0_DELTA_FRAMENUM0_MSB, 792, 0x003fe000, 13, 0, RW, NONE,
          "delta frame_num of list0 pic0 (bit[19..11])"),
    H2REG(HWIF_ENC_MARK_CURRENT_LONGTERM, 792, 0x00001000, 12, 0, RW, NONE,
          "mark current frame as long term reference (for H.264)"),
    H2REG(HWIF_ENC_L0_LONGTERMIDX0, 792, 0x00000e00, 9, 0, RW, NONE,
          "long term frame idx of list0 pic 0 (for H.264)"),
    H2REG(HWIF_ENC_L0_LONGTERMIDX1, 792, 0x000001c0, 6, 0, RW, NONE,
          "long term frame idx of list0 pic 1 (for H.264)"),
    H2REG(HWIF_ENC_L1_LONGTERMIDX0, 792, 0x00000038, 3, 0, RW, NONE,
          "long term frame idx of list1 pic 0 (for H.264)"),
    H2REG(HWIF_ENC_L1_LONGTERMIDX1, 792, 0x00000007, 0, 0, RW, NONE,
          "long term frame idx of list1 pic 1 (for H.264)"),
    H2REG(HWIF_ENC_L0_DELTA_FRAMENUM1_MSB, 796, 0xff800000, 23, 0, RW, NONE,
          "delta frame_num of list0 pic1 (bit[19..11])"),
    H2REG(HWIF_ENC_L1_DELTA_FRAMENUM0_MSB, 796, 0x007fc000, 14, 0, RW, NONE,
          "delta frame_num of list1 pic0 (bit[19..11])"),
    H2REG(HWIF_ENC_L1_DELTA_FRAMENUM1_MSB, 796, 0x00003fe0, 5, 0, RW, NONE,
          "delta frame_num of list1 pic1 (bit[19..11])"),
    H2REG(HWIF_ENC_HASH_TYPE, 796, 0x00000018, 3, 0, RW, NONE,
          "hash type of frame data. 0=none. 1=crc32. 2=checksum32"),
    H2REG(HWIF_ENC_HASH_OFFSET, 796, 0x00000006, 1, 0, RW, NONE,
          "hash offset (byte offset of processed hashdata)"),
    H2REG(HWIF_ENC_OSD_ALPHABLEND_ENABLE, 796, 0x00000001, 0, 0, RW, NONE,
          "enable OSD Alpha Blending. 0=disable. 1=enable."),
    H2REG(HWIF_ENC_HASH_VAL, 800, 0xffffffff, 0, 0, RW, NONE, "hash value of frame data"),
    H2REG(HWIF_ENC_MEAN_THR0, 804, 0xff000000, 24, 0, RW, NONE,
          "A mean value threshold of out circle used for foreground decision"),
    H2REG(HWIF_ENC_MEAN_THR1, 804, 0x00ff0000, 16, 0, RW, NONE,
          "A mean value threshold of second circle for foreground decision"),
    H2REG(HWIF_ENC_MEAN_THR2, 804, 0x0000ff00, 8, 0, RW, NONE,
          "A mean value threshold of third circle"),
    H2REG(HWIF_ENC_MEAN_THR3, 804, 0x000000ff, 0, 0, RW, NONE,
          "A mean value threshold of the smallest circle"),
    H2REG(HWIF_ENC_THR_DC_LUM_8X8, 808, 0xffff0000, 16, 0, RW, NONE,
          "A threshold value of DC for CU08 luma"),
    H2REG(HWIF_ENC_THR_DC_CHROMA_8X8, 808, 0x0000ffff, 0, 0, RW, NONE,
          "A threshold value of DC for CU08 chroma"),
    H2REG(HWIF_ENC_THR_DC_LUM_16X16, 812, 0xffff0000, 16, 0, RW, NONE,
          "A threshold value of DC for CU16 luma"),
    H2REG(HWIF_ENC_LUM_DC_SUM_THR, 812, 0xff000000, 24, 0, RW, NONE,
          "A threshold value of DC for Y (for H.264)"),
    H2REG(HWIF_ENC_THR_DC_CHROMA_16X16, 812, 0x0000ffff, 0, 0, RW, NONE,
          "A threshold value of DC for CU16 chroma"),
    H2REG(HWIF_ENC_CB_DC_SUM_THR, 812, 0x0000ff00, 8, 0, RW, NONE,
          "A threshold value of DC for U (for H.264)"),
    H2REG(HWIF_ENC_CR_DC_SUM_THR, 812, 0x000000ff, 0, 0, RW, NONE,
          "A threshold value of DC for V (for H.264)"),
    H2REG(HWIF_ENC_THR_DC_LUM_32X32, 816, 0xffff0000, 16, 0, RW, NONE,
          "A threshold value of DC for CU32 luma"),
    H2REG(HWIF_ENC_THR_DC_CHROMA_32X32, 816, 0x0000ffff, 0, 0, RW, NONE,
          "A threshold value of DC for CU32 chroma"),
    H2REG(HWIF_ENC_THR_AC_NUM_LUM_8X8, 820, 0xffff0000, 16, 0, RW, NONE,
          "A threshold value of number of non-zero AC for CU08 luma"),
    H2REG(HWIF_ENC_THR_AC_NUM_CHROMA_8X8, 820, 0x0000ffff, 0, 0, RW, NONE,
          "A threshold value of number of non-zero AC for CU08 chroma"),
    H2REG(HWIF_ENC_THR_AC_NUM_LUM_16X16, 824, 0xffff0000, 16, 0, RW, NONE,
          "A threshold value of number of non-zero AC for CU16 luma"),
    H2REG(HWIF_ENC_THR_AC_NUM_CHROMA_16X16, 824, 0x0000ffff, 0, 0, RW, NONE,
          "A threshold value of number of non-zero AC for CU16 chroma"),
    H2REG(HWIF_ENC_THR_AC_NUM_LUM_32X32, 828, 0xffff0000, 16, 0, RW, NONE,
          "A threshold value of number of non-zero AC for CU32 luma"),
    H2REG(HWIF_ENC_THR_AC_NUM_CHROMA_32X32, 828, 0x0000ffff, 0, 0, RW, NONE,
          "A threshold value of number of non-zero AC for CU32 chroma"),
    H2REG(HWIF_ENC_MDQPY, 832, 0xfc000000, 26, 0, RW, NONE, "A luma QP value for skip decision"),
    H2REG(HWIF_ENC_SMART_QP, 832, 0xfc000000, 26, 0, RW, NONE,
          "A luma QP value for skip decision (for H.264)"),
    H2REG(HWIF_ENC_MDQPC, 832, 0x03f00000, 20, 0, RW, NONE, "A chroma QP value for skip decision"),
    H2REG(HWIF_ENC_FOREGROUND_PIXEL_THX, 832, 0x000fc000, 14, 0, RW, NONE,
          "Foreground threshold number of pixel (0 ~ 63) used for foreground "
          "decision"),
    H2REG(HWIF_ENC_ENABLE_SMART, 832, 0x00002000, 13, 0, RW, NONE, "enable smart featrue"),
    H2REG(HWIF_ENC_IPCM1_LEFT, 832, 0x00001ff0, 4, 0, RW, NONE, "IPCM1 Area Left"),
    H2REG(HWIF_ENC_SKIP_MAP_ENABLE, 832, 0x00000008, 3, 1, RW, NONE, "enable skip map mode"),
    H2REG(HWIF_ENC_LAMBDA_COST_SCALE_4N, 832, 0x00000007, 0, 0, RW, NONE, "ME4N lambda cost scale"),
    H2REG(HWIF_ENC_IPCM1_RIGHT, 836, 0xff800000, 23, 0, RW, NONE, "IPCM1 Area Right"),
    H2REG(HWIF_ENC_IPCM1_TOP, 836, 0x007fc000, 14, 0, RW, NONE, "IPCM1 Area Top"),
    H2REG(HWIF_ENC_IPCM1_BOTTOM, 836, 0x00003fe0, 5, 0, RW, NONE, "IPCM1 Area Bottom"),
    H2REG(HWIF_ENC_PCM_FILTER_DISABLE, 836, 0x00000010, 4, 0, RW, NONE,
          "disable deblock filter for IPCM"),
    H2REG(HWIF_ENC_IPCM_MAP_ENABLE, 836, 0x00000008, 3, 1, RW, NONE, "enable pcm map mode"),
    H2REG(HWIF_ENC_LAMBDA_COST_SCALE_2N, 836, 0x00000007, 0, 0, RW, NONE, "ME2N lambda cost scale"),
    H2REG(HWIF_ENC_INPUT_LU_STRIDE, 840, 0xfffff000, 12, 1, RW, NONE, "Luma stride of input frame"),
    H2REG(HWIF_ENC_IPCM2_LEFT, 840, 0x00000ff8, 3, 0, RW, NONE, "IPCM2 Area Left"),
    H2REG(HWIF_ENC_LAMBDA_COST_SCALE_1N, 840, 0x00000007, 0, 0, RW, NONE, "ME1N lambda cost scale"),
    H2REG(HWIF_ENC_INPUT_CH_STRIDE, 844, 0xfffff000, 12, 1, RW, NONE,
          "Chroma stride of input frame"),
    H2REG(HWIF_ENC_IPCM2_RIGHT, 844, 0x00000ff8, 3, 0, RW, NONE, "IPCM2 Area Right"),
    H2REG(HWIF_ENC_REF_LU_STRIDE, 848, 0xfffff000, 12, 1, RW, NONE,
          "Luma stride of reference frame"),
    H2REG(HWIF_ENC_IPCM2_TOP, 848, 0x00000ff8, 3, 0, RW, NONE, "IPCM2 Area Top"),
    H2REG(HWIF_ENC_REF_DS_LU_STRIDE, 852, 0xffffc000, 14, 1, RW, NONE,
          "DS Luma stride of reference frame"),
    H2REG(HWIF_ENC_IPCM2_BOTTOM, 852, 0x00003fe0, 5, 0, RW, NONE, "IPCM2 Area Bottom"),
    H2REG(HWIF_ENC_HWLJPEGSUPPORT, 856, 0x80000000, 31, 0, RO, NONE,
          "Lossless JPEG supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWABSQPSUPPORT, 856, 0x40000000, 30, 0, RO, NONE,
          "Absolute QP in ROI/ROI map supported by HW. 0=not supported. "
          "1=supported"),
    H2REG(HWIF_ENC_HWINTRATU32SUPPORT, 856, 0x20000000, 29, 0, RO, NONE,
          "IntraPath TU32x32 supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWROIMAPVERSION, 856, 0x1c000000, 26, 0, RO, NONE,
          "ROI map buffer format version. 0=4 bit per pixel. 1=8 bit per pixel"),
    H2REG(HWIF_ENC_HWMAXVIDEOWIDTHH264, 856, 0x03ffe000, 13, 0, RO, NONE,
          "Maximum video width supported by HW for H264 encoding (unit 8 "
          "pixels)"),
    H2REG(HWIF_ENC_HWMAXVIDEOWIDTHJPEG, 856, 0x00001fff, 0, 0, RO, NONE,
          "Maximum video width supported by HW for JPEG encoding (unit 8 "
          "pixels)"),
    H2REG(HWIF_ENC_TOTALARLEN, 860, 0xffffffff, 0, 0, RO, NONE, "[AXI] Accumulated ARLEN+1"),
    H2REG(HWIF_ENC_TOTALR, 864, 0xffffffff, 0, 0, RO, NONE, "[AXI] RVALID & RREADY"),
    H2REG(HWIF_ENC_TOTALAR, 868, 0xffffffff, 0, 0, RO, NONE, "[AXI] ARVALID & ARREADY"),
    H2REG(HWIF_ENC_TOTALRLAST, 872, 0xffffffff, 0, 0, RO, NONE, "[AXI] RVALID & RREADY & RLAST"),
    H2REG(HWIF_ENC_TOTALAWLEN, 876, 0xffffffff, 0, 0, RO, NONE, "[AXI] Accumulated AWLEN+1"),
    H2REG(HWIF_ENC_TOTALW, 880, 0xffffffff, 0, 0, RO, NONE, "[AXI] WVALID & WREADY"),
    H2REG(HWIF_ENC_TOTALAW, 884, 0xffffffff, 0, 0, RO, NONE, "[AXI] AWVALID & AWREADY"),
    H2REG(HWIF_ENC_TOTALWLAST, 888, 0xffffffff, 0, 0, RO, NONE, "[AXI] WVALID & WREADY & WLAST"),
    H2REG(HWIF_ENC_TOTALB, 892, 0xffffffff, 0, 0, RO, NONE, "[AXI] BVALID & BREADY"),
    H2REG(HWIF_ENC_CHROMA_CONST_EN, 896, 0x80000000, 31, 0, RW, NONE,
          "Force Chroma to be a constant pixel or not. 0=no. 1=yes."),
    H2REG(HWIF_ENC_PSNR_EN, 896, 0x00400000, 22, 0, RW, NONE,
          "Enable PSNR calculation. 0=Disable. 1=Enable"),
    H2REG(HWIF_ENC_SSIM_EN, 896, 0x00200000, 21, 0, RW, NONE,
          "Enable SSIM calculation. 0=Disable. 1=Enable"),
    H2REG(HWIF_ENC_SKIPFRAME_EN, 896, 0x00100000, 20, 1, RW, NONE,
          "Force frame encode as SKIPFRAME. 0=no. 1=yes"),
    H2REG(HWIF_ENC_CR_CONST_PIXEL, 896, 0x000ffc00, 10, 0, RW, NONE,
          "The constant pixel of CR if sw_enc_chroma_const_en=1"),
    H2REG(HWIF_ENC_CB_CONST_PIXEL, 896, 0x000003ff, 0, 0, RW, NONE,
          "The constant pixel of CB if sw_enc_chroma_const_en=1"),
    H2REG(HWIF_ENC_NUM_TILE_COLUMNS, 900, 0xff000000, 24, 0, RW, NONE,
          "the number of tile columns partitioning the picture."),
    H2REG(HWIF_ENC_NUM_TILE_ROWS, 900, 0x00ff0000, 16, 0, RW, NONE,
          "the number of tile rows partitioning the picture."),
    H2REG(HWIF_ENC_TILES_ENABLED_FLAG, 900, 0x00008000, 15, 0, RW, NONE,
          "enable HEVC tile partition. 0=disabled. 1=enabled."),
    H2REG(HWIF_ENC_LOOP_FILTER_ACROSS_TILES_ENABLED_FLAG, 900, 0x00004000, 14, 0, RW, NONE,
          "enable in-loop filtering operations across tile boundaries. "
          "0=disabled. 1=enabled."),
    H2REG(HWIF_ENC_ROIMAP_CUCTRL_INDEX_ENABLE, 900, 0x00002000, 13, 0, RW, NONE,
          "roi map cu ctrl index enable. 0=Disable. 1=Enable"),
    H2REG(HWIF_ENC_ROIMAP_CUCTRL_ENABLE, 900, 0x00001000, 12, 1, RW, NONE,
          "roi map cu ctrl enable. 0=Disable. 1=Enable"),
    H2REG(HWIF_ENC_ROIMAP_CUCTRL_VER, 900, 0x00000e00, 9, 1, RW, NONE,
          "roi map cu ctrl info version. 3~7"),
    H2REG(HWIF_ENC_ROIMAP_QPDELTA_VER, 900, 0x000001c0, 6, 0, RW, NONE,
          "roi map qp delta info version. 1~3"),
    H2REG(HWIF_ENC_HWSSIMSUPPORT, 904, 0x80000000, 31, 0, RO, NONE,
          "SSIM calculation supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWP010REFSUPPORT, 904, 0x40000000, 30, 0, RO, NONE,
          "Reference buffer format for 10-bit encoding. 1=P010 tile raster "
          "format. 0=normal format"),
    H2REG(HWIF_ENC_HWCUINFORVERSION, 904, 0x38000000, 27, 0, RO, NONE,
          "Version of the output CU information format."),
    H2REG(HWIF_ENC_ME_VERT_SEARCHRANGE_HEVC, 904, 0x07e00000, 21, 0, RO, NONE,
          "ME vertical search range in 8 pixel unit for HEVC"),
    H2REG(HWIF_ENC_ME_VERT_SEARCHRANGE_H264, 904, 0x001f8000, 15, 0, RO, NONE,
          "ME vertical search range in 8 pixel unit for H264"),
    H2REG(HWIF_ENC_HWCTBRCVERSION, 904, 0x00007000, 12, 0, RO, NONE, "CTB Rate Control Version."),
    H2REG(HWIF_ENC_HWJPEG422SUPPORT, 904, 0x00000800, 11, 0, RO, NONE,
          "Jpeg422 supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWGMVSUPPORT, 904, 0x00000400, 10, 0, RO, NONE,
          "Global MV supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWROI8SUPPORT, 904, 0x00000200, 9, 0, RO, NONE, "support 8 ROIs"),
    H2REG(HWIF_ENC_BFRAME_ME4N_HOR_SEARCHRANGE, 904, 0x00000180, 7, 0, RO, NONE,
          "ME4N horizontal search range in 64 pixel unit(0=64. 1=128. 2=192. "
          "3=256)"),
    H2REG(HWIF_ENC_HWHEVCRDOQSUPPORT, 904, 0x00000040, 6, 0, RO, NONE,
          "HEVC RDOQ supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWMULTIPASSSUPPORT, 904, 0x00000020, 5, 0, RO, NONE,
          "Multipass Encoding supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWINLOOPDSRATIO, 904, 0x00000010, 4, 0, RO, NONE,
          "in-loop ds ratio supported by HW(0=1:1 1=1:2)"),
    H2REG(HWIF_ENC_HWSTREAMBUFCHAIN, 904, 0x00000008, 3, 0, RO, NONE,
          "Stream Buffer Chain supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWSTREAMSEGMENTSUPPORT, 904, 0x00000004, 2, 0, RO, NONE,
          "Stream segment supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWIFRAMEONLY, 904, 0x00000002, 1, 0, RO, NONE,
          "Only support I frame. 0=support I/P/B frame. 1=only support I frame"),
    H2REG(HWIF_ENC_HWDYNAMICMAXTUSIZE, 904, 0x00000001, 0, 0, RO, NONE,
          "HW support dynamic max TU size change per frame. 0=not supported. "
          "1=supported"),
    H2REG(HWIF_ENC_SSIM_Y_NUMERATOR_LSB, 908, 0xffffffff, 0, 0, RW, NONE,
          "LSB of SSIM_Y numerator value."),
    H2REG(HWIF_ENC_SSIM_Y_NUMERATOR_MSB, 912, 0xffffffff, 0, 0, RW, NONE,
          "MSB of SSIM_Y numerator value."),
    H2REG(HWIF_ENC_SSIM_U_NUMERATOR_LSB, 916, 0xffffffff, 0, 0, RW, NONE,
          "LSB of SSIM_U numerator value."),
    H2REG(HWIF_ENC_SSIM_U_NUMERATOR_MSB, 920, 0xffffffff, 0, 0, RW, NONE,
          "MSB of SSIM_U numerator value."),
    H2REG(HWIF_ENC_SSIM_V_NUMERATOR_LSB, 924, 0xffffffff, 0, 0, RW, NONE,
          "LSB of SSIM_V numerator value."),
    H2REG(HWIF_ENC_SSIM_V_NUMERATOR_MSB, 928, 0xffffffff, 0, 0, RW, NONE,
          "MSB of SSIM_V numerator value."),
    H2REG(HWIF_ENC_SSIM_Y_DENOMINATOR, 932, 0xffffffff, 0, 0, RW, NONE,
          "SSIM_Y denominator value."),
    H2REG(HWIF_ENC_SSIM_UV_DENOMINATOR, 936, 0xffffffff, 0, 0, RW, NONE,
          "SSIM_UV denominator value."),
    H2REG(HWIF_ENC_RPS_DELTA_POC_0, 940, 0xffc00000, 22, 0, RW, NONE,
          "delta poc of pic0 in current rps"),
    H2REG(HWIF_ENC_RPS_DELTA_POC_1, 940, 0x003ff000, 12, 0, RW, NONE,
          "delta poc of pic1 in current rps"),
    H2REG(HWIF_ENC_RPS_DELTA_POC_2, 940, 0x00000ffc, 2, 0, RW, NONE,
          "delta poc of pic2 in current rps"),
    H2REG(HWIF_ENC_RPS_USED_BY_CUR_0, 940, 0x00000002, 1, 0, RW, NONE,
          "pic0 in current rps is used for reference by current slice"),
    H2REG(HWIF_ENC_RPS_USED_BY_CUR_1, 940, 0x00000001, 0, 0, RW, NONE,
          "pic1 in current rps is used for reference by current slice"),
    H2REG(HWIF_ENC_RPS_DELTA_POC_3, 944, 0xffc00000, 22, 0, RW, NONE,
          "delta poc of pic3 in current rps"),
    H2REG(HWIF_ENC_RPS_USED_BY_CUR_2, 944, 0x00200000, 21, 0, RW, NONE,
          "pic2 in current rps is used for reference by current slice"),
    H2REG(HWIF_ENC_RPS_USED_BY_CUR_3, 944, 0x00100000, 20, 0, RW, NONE,
          "pic3 in current rps is used for reference by current slice"),
    H2REG(HWIF_ENC_RPS_NEG_PIC_NUM, 944, 0x000e0000, 17, 0, RW, NONE,
          "number of negative pictures in current rps"),
    H2REG(HWIF_ENC_RPS_POS_PIC_NUM, 944, 0x0001c000, 14, 0, RW, NONE,
          "number of positive pictures in current rps"),
    H2REG(HWIF_ENC_SHORT_TERM_REF_PIC_SET_SPS_FLAG, 944, 0x00002000, 13, 0, RW, NONE,
          "short term rps for current slice is encoded in sps"),
    H2REG(HWIF_ENC_P010_REF_ENABLE, 944, 0x00001000, 12, 1, RW, NONE,
          "Enable/Disable P010 Reference format. 0=not supported. 1=supported. "
          "P010RefEnable[0]"),
    H2REG(HWIF_ENC_REF_CH_STRIDE, 948, 0xfffff000, 12, 1, RW, NONE,
          "Chroma stride of reference frame"),
    H2REG(HWIF_ENC_DUMMYREADEN, 948, 0x00000800, 11, 0, RW, NONE,
          "enable dummy read when frame height not align to 64 or other "
          "possible condition"),
    H2REG(HWIF_ENC_PRPSBI_ID_1, 948, 0x000007c0, 6, 0, RW, NONE, "id of prp sbi 1"),
    H2REG(HWIF_ENC_PRPSBI_ID_2, 948, 0x0000003e, 1, 0, RW, NONE, "id of prp sbi 2"),
    H2REG(HWIF_ENC_SPS_TMVP_ENABLE, 948, 0x00000001, 0, 1, RW, NONE,
          "HEVC sps temporal mvp enable"),
    H2REG(HWIF_ENC_DUMMYREADADDR, 952, 0xffffffff, 0, 0, RW, ENC_INOUT, "Dummy read address"),
    H2REG(HWIF_ENC_CURRENT_CTB_MAD_BASE, 956, 0xffffffff, 0, 0, RW, ENC_INOUT,
          "Base Address LSB of CTB MADs of current frame used for CTB RC."),
    H2REG(HWIF_ENC_CURRENT_CTB_MAD_BASE_MSB, 960, 0xffffffff, 0, 0, RW, NONE,
          "Base Address MSB of CTB MADs of current frame used for CTB RC."),
    H2REG(HWIF_ENC_PREVIOUS_CTB_MAD_BASE, 964, 0xffffffff, 0, 0, RW, ENC_INOUT,
          "Base Address LSB of CTB MADs of previous frame used for CTB RC."),
    H2REG(HWIF_ENC_PREVIOUS_CTB_MAD_BASE_MSB, 968, 0xffffffff, 0, 0, RW, NONE,
          "Base Address MSB of CTB MADs of previous frame used for CTB RC."),
    H2REG(HWIF_ENC_CTB_RC_MODEL_PARAM0, 972, 0xfffff800, 11, 0, RW, NONE,
          "Parameter0 of CTB RC model"),
    H2REG(HWIF_ENC_TILELEFTSTART, 972, 0x000007fe, 1, 0, RW, NONE,
          "tile left boundary position in CTBs"),
    H2REG(HWIF_ENC_TILEMVCONSTRAINT, 972, 0x00000001, 0, 0, RW, NONE,
          "clip MV beyond tile boundary"),
    H2REG(HWIF_ENC_CTB_RC_MODEL_PARAM1, 976, 0xfffffc00, 10, 0, RW, NONE,
          "Parameter1 of CTB RC model"),
    H2REG(HWIF_ENC_ROI3_QP_VALUE, 976, 0x000003f8, 3, 0, RW, NONE,
          "ROI3 qp value. delta or absolute value"),
    H2REG(HWIF_ENC_ROI3_QP_TYPE, 976, 0x00000004, 2, 0, RW, NONE,
          "ROI3 qp type. 0:delta;1:Absolute value"),
    H2REG(HWIF_ENC_CTB_RC_MODEL_PARAM_MIN, 980, 0xfffc0000, 18, 0, RW, NONE,
          "Minimum parameter value of CTB RC model"),
    H2REG(HWIF_ENC_CTB_RC_ROW_FACTOR, 980, 0x0003fffc, 2, 0, RW, NONE,
          "Reciprocal of ctb per row. Q16"),
    H2REG(HWIF_ENC_RC_QPDELTA_RANGE_MSB, 980, 0x00000003, 0, 0, RW, NONE,
          "Extend swreg173. rc qp delta range. Bits 5:4"),
    H2REG(HWIF_ENC_CTB_RC_QP_STEP, 984, 0xffffc000, 14, 0, RW, NONE,
          "Maximum QP step per CTB for purpose of rate control. Q16."),
    H2REG(HWIF_ENC_AXI_WRITE_OUTSTANDING_NUM, 984, 0x00003fc0, 6, 0, RW, NONE,
          "AXI outstanding number of write operation"),
    H2REG(HWIF_ENC_CTB_RC_DELAY, 984, 0x00000038, 3, 0, RW, NONE,
          "Feedback delay of information for CTB RC"),
    H2REG(HWIF_ENC_PREV_PIC_LUM_MAD, 988, 0xffffffc0, 6, 0, RW, NONE,
          "Luma MAD of the predict picture. Input for previous pic. Output for "
          "current pic."),
    H2REG(HWIF_ENC_TILESTRMSIZEALIGNMENTEXP, 988, 0x0000003c, 2, 0, RW, NONE,
          "bytes of the tile stream alignment"),
    H2REG(HWIF_ENC_CTB_RC_PREV_MAD_VALID, 988, 0x00000002, 1, 0, RW, NONE,
          "Prev luma MADs are valid or not for ctb rc. 0=no and 1=yes."),
    H2REG(HWIF_ENC_CTB_QP_SUM_FOR_RC, 992, 0xffffff00, 8, 0, RW, NONE,
          "Sum of CTB QP used for rate control. not include QP delta for "
          "quality adjust or ROI."),
    H2REG(HWIF_ENC_ROI4_QP_VALUE, 992, 0x000000fe, 1, 0, RW, NONE,
          "ROI4 qp value. delta or absolute value"),
    H2REG(HWIF_ENC_ROI4_QP_TYPE, 992, 0x00000001, 0, 0, RW, NONE,
          "ROI4 qp type. 0:delta;1:Absolute value"),
    H2REG(HWIF_ENC_ENCODED_CTB_NUMBER_MSB2, 996, 0xc0000000, 30, 0, RW, NONE,
          "MB count output. Max 512*256. bit[17:18]"),
    H2REG(HWIF_ENC_NUM_SLICES_READY_MSB2, 996, 0x20000000, 29, 0, RW, NONE,
          "HEVC amount of completed slices. bit[10]"),
    H2REG(HWIF_ENC_SLICE_SIZE_MSB2, 996, 0x10000000, 28, 0, RW, NONE,
          "slice size in ctu row. bit[9]"),
    H2REG(HWIF_ENC_CIR_START_MSB2, 996, 0x0c000000, 26, 0, RW, NONE, "cir start. bit[18:19]"),
    H2REG(HWIF_ENC_CIR_INTERVAL_MSB2, 996, 0x03000000, 24, 0, RW, NONE,
          "Cyclic Intra Refresh. bit[18:19]"),
    H2REG(HWIF_ENC_INTRA_AREA_LEFT_MSB2, 996, 0x00800000, 23, 0, RW, NONE,
          "intra Area Left. bit[9]"),
    H2REG(HWIF_ENC_INTRA_AREA_RIGHT_MSB2, 996, 0x00400000, 22, 0, RW, NONE,
          "intra Area Right. bit[9]"),
    H2REG(HWIF_ENC_INTRA_AREA_TOP_MSB2, 996, 0x00200000, 21, 0, RW, NONE, "intra Area Top. bit[9]"),
    H2REG(HWIF_ENC_INTRA_AREA_BOTTOM_MSB2, 996, 0x00100000, 20, 0, RW, NONE,
          "intra Area Bottom. bit[9]"),
    H2REG(HWIF_ENC_ROI1_LEFT_MSB2, 996, 0x00080000, 19, 0, RW, NONE, "ROI1 Area Left. bit[9]"),
    H2REG(HWIF_ENC_ROI1_RIGHT_MSB2, 996, 0x00040000, 18, 0, RW, NONE, "ROI1 Area Right. bit[9]"),
    H2REG(HWIF_ENC_ROI1_TOP_MSB2, 996, 0x00020000, 17, 0, RW, NONE, "ROI1 Area Top. bit[9]"),
    H2REG(HWIF_ENC_ROI1_BOTTOM_MSB2, 996, 0x00010000, 16, 0, RW, NONE, "ROI1 Area Bottom. bit[9]"),
    H2REG(HWIF_ENC_ROI2_LEFT_MSB2, 996, 0x00008000, 15, 0, RW, NONE, "ROI2 Area Left. bit[9]"),
    H2REG(HWIF_ENC_ROI2_RIGHT_MSB2, 996, 0x00004000, 14, 0, RW, NONE, "ROI2 Area Right. bit[9]"),
    H2REG(HWIF_ENC_ROI2_TOP_MSB2, 996, 0x00002000, 13, 0, RW, NONE, "ROI2 Area Top. bit[9]"),
    H2REG(HWIF_ENC_ROI2_BOTTOM_MSB2, 996, 0x00001000, 12, 0, RW, NONE, "ROI2 Area Bottom. bit[9]"),
    H2REG(HWIF_ENC_PIC_WIDTH_MSB2, 996, 0x00000800, 11, 1, RW, NONE,
          "Encoded width. lumWidthMsb2(unit 8 pixels). bit[12]"),
    H2REG(HWIF_ENC_IPCM1_LEFT_MSB, 996, 0x00000400, 10, 0, RW, NONE, "IPCM1 Area Left bit[9]"),
    H2REG(HWIF_ENC_IPCM1_RIGHT_MSB, 996, 0x00000200, 9, 0, RW, NONE, "IPCM1 Area Right bit[9]"),
    H2REG(HWIF_ENC_IPCM1_TOP_MSB, 996, 0x00000100, 8, 0, RW, NONE, "IPCM1 Area Top bit[9]"),
    H2REG(HWIF_ENC_IPCM1_BOTTOM_MSB, 996, 0x00000080, 7, 0, RW, NONE, "IPCM2 Area Bottom bit[9]"),
    H2REG(HWIF_ENC_IPCM2_LEFT_MSB, 996, 0x00000040, 6, 0, RW, NONE, "IPCM2 Area Left bit[9]"),
    H2REG(HWIF_ENC_IPCM2_RIGHT_MSB, 996, 0x00000020, 5, 0, RW, NONE, "IPCM2 Area Right bit[9]"),
    H2REG(HWIF_ENC_IPCM2_TOP_MSB, 996, 0x00000010, 4, 0, RW, NONE, "IPCM2 Area Top bit[9]"),
    H2REG(HWIF_ENC_IPCM2_BOTTOM_MSB, 996, 0x00000008, 3, 0, RW, NONE, "IPCM1 Area Bottom bit[9]"),
    H2REG(HWIF_ENC_JPEG_PIC_WIDTH_MSB, 996, 0x00000600, 9, 1, RW, NONE,
          "Encoded jpeg width. jpgLumWidthMSB(unit 8 pixels)"),
    H2REG(HWIF_ENC_JPEG_PIC_HEIGHT_MSB, 996, 0x00000180, 7, 1, RW, NONE,
          "Encoded jpeg height. jpgLumHeightMSB(unit 8 pixels):Max width x "
          "height is 24Kx24K"),
    H2REG(HWIF_ENC_JPEG_ROWLENGTH_MSB, 996, 0x00000060, 5, 1, RW, NONE,
          "JPEG Input luminance row length. jpgLumWidthSrcMSB (pixels) "
          "[96..16384]"),
    H2REG(HWIF_ENC_GLOBAL_HORIZONTAL_MV_L0, 1000, 0xfffc0000, 18, 0, RW, NONE,
          "Global horizontalMV for LIST0 in integer pixel."),
    H2REG(HWIF_ENC_GLOBAL_VERTICAL_MV_L0, 1000, 0x0003fff0, 4, 0, RW, NONE,
          "Global vertical MV for LIST0 in integer pixel."),
    H2REG(HWIF_ENC_TILESYNCREADALIGNEXP, 1000, 0x0000000f, 0, 0, RW, NONE,
          "tile column info read buffer alignment"),
    H2REG(HWIF_ENC_GLOBAL_HORIZONTAL_MV_L1, 1004, 0xfffc0000, 18, 0, RW, NONE,
          "Global horizontalMV for LIST1 in integer pixel."),
    H2REG(HWIF_ENC_GLOBAL_VERTICAL_MV_L1, 1004, 0x0003fff0, 4, 0, RW, NONE,
          "Global vertical MV for LIST1 in integer pixel."),
    H2REG(HWIF_ENC_TILESYNCWRITEALIGNEXP, 1004, 0x0000000f, 0, 0, RW, NONE,
          "tile column info write buffer alignment"),
    H2REG(HWIF_ENC_ROI3_LEFT, 1008, 0xffc00000, 22, 0, RW, NONE, "ROI3 Area Left"),
    H2REG(HWIF_ENC_ROI3_TOP, 1008, 0x003ff000, 12, 0, RW, NONE, "ROI3 Area Top"),
    H2REG(HWIF_ENC_ROI3_RIGHT, 1008, 0x00000ffc, 2, 0, RW, NONE, "ROI3 Area Right"),
    H2REG(HWIF_ENC_ROI3_BOTTOM, 1012, 0xffc00000, 22, 0, RW, NONE, "ROI3 Area Bottom"),
    H2REG(HWIF_ENC_ROI4_LEFT, 1012, 0x003ff000, 12, 0, RW, NONE, "ROI4 Area Left"),
    H2REG(HWIF_ENC_ROI4_TOP, 1012, 0x00000ffc, 2, 0, RW, NONE, "ROI4 Area Top"),
    H2REG(HWIF_ENC_ROI4_RIGHT, 1016, 0xffc00000, 22, 0, RW, NONE, "ROI4 Area Right"),
    H2REG(HWIF_ENC_ROI4_BOTTOM, 1016, 0x003ff000, 12, 0, RW, NONE, "ROI4 Area Bottom"),
    H2REG(HWIF_ENC_ROI5_LEFT, 1016, 0x00000ffc, 2, 0, RW, NONE, "ROI5 Area Left"),
    H2REG(HWIF_ENC_ROI5_TOP, 1020, 0xffc00000, 22, 0, RW, NONE, "ROI5 Area Top"),
    H2REG(HWIF_ENC_ROI5_RIGHT, 1020, 0x003ff000, 12, 0, RW, NONE, "ROI5 Area Right"),
    H2REG(HWIF_ENC_ROI5_BOTTOM, 1020, 0x00000ffc, 2, 0, RW, NONE, "ROI5 Area Bottom"),
    H2REG(HWIF_ENC_ROI6_LEFT, 1024, 0xffc00000, 22, 0, RW, NONE, "ROI6 Area Left"),
    H2REG(HWIF_ENC_ROI6_TOP, 1024, 0x003ff000, 12, 0, RW, NONE, "ROI6 Area Top"),
    H2REG(HWIF_ENC_ROI6_RIGHT, 1024, 0x00000ffc, 2, 0, RW, NONE, "ROI6 Area Right"),
    H2REG(HWIF_ENC_ROI6_BOTTOM, 1028, 0xffc00000, 22, 0, RW, NONE, "ROI6 Area Bottom"),
    H2REG(HWIF_ENC_ROI7_LEFT, 1028, 0x003ff000, 12, 0, RW, NONE, "ROI7 Area Left"),
    H2REG(HWIF_ENC_ROI7_TOP, 1028, 0x00000ffc, 2, 0, RW, NONE, "ROI7 Area Top"),
    H2REG(HWIF_ENC_ROI7_RIGHT, 1032, 0xffc00000, 22, 0, RW, NONE, "ROI7 Area Right"),
    H2REG(HWIF_ENC_ROI7_BOTTOM, 1032, 0x003ff000, 12, 0, RW, NONE, "ROI7 Area Bottom"),
    H2REG(HWIF_ENC_ROI8_LEFT, 1032, 0x00000ffc, 2, 0, RW, NONE, "ROI8 Area Left"),
    H2REG(HWIF_ENC_ROI8_TOP, 1036, 0xffc00000, 22, 0, RW, NONE, "ROI8 Area Top"),
    H2REG(HWIF_ENC_ROI8_RIGHT, 1036, 0x003ff000, 12, 0, RW, NONE, "ROI8 Area Right"),
    H2REG(HWIF_ENC_ROI8_BOTTOM, 1036, 0x00000ffc, 2, 0, RW, NONE, "ROI8 Area Bottom"),
    H2REG(HWIF_ENC_CURRENT_MAX_TU_SIZE_DECREASE, 1036, 0x00000002, 1, 0, RW, NONE,
          "Decrease max tu size in current frame. 0=max tu size 32. 1=max tu "
          "size 16. [0]"),
    H2REG(HWIF_ENC_ROI8_QP_VALUE, 1040, 0xfe000000, 25, 0, RW, NONE,
          "ROI8 qp value. delta or absolute value"),
    H2REG(HWIF_ENC_ROI8_QP_TYPE, 1040, 0x01000000, 24, 0, RW, NONE,
          "ROI8 qp type. 0:delta;1:Absolute value"),
    H2REG(HWIF_ENC_ROI7_QP_VALUE, 1040, 0x00fe0000, 17, 0, RW, NONE,
          "ROI7 qp value. delta or absolute value"),
    H2REG(HWIF_ENC_ROI7_QP_TYPE, 1040, 0x00010000, 16, 0, RW, NONE,
          "ROI7 qp type. 0:delta;1:Absolute value"),
    H2REG(HWIF_ENC_ROI6_QP_VALUE, 1040, 0x0000fe00, 9, 0, RW, NONE,
          "ROI6 qp value. delta or absolute value"),
    H2REG(HWIF_ENC_ROI6_QP_TYPE, 1040, 0x00000100, 8, 0, RW, NONE,
          "ROI6 qp type. 0:delta;1:Absolute value"),
    H2REG(HWIF_ENC_ROI5_QP_VALUE, 1040, 0x000000fe, 1, 0, RW, NONE,
          "ROI5 qp value. delta or absolute value"),
    H2REG(HWIF_ENC_ROI5_QP_TYPE, 1040, 0x00000001, 0, 0, RW, NONE,
          "ROI5 qp type. 0:delta;1:Absolute value"),
    H2REG(HWIF_ENC_TILEWIDTHIN8, 1044, 0xfff80000, 19, 0, RW, NONE, "tile width in 8 pixel unit"),
    H2REG(HWIF_ENC_DYNAMIC_RDO_ENABLE, 1044, 0x00040000, 18, 0, RW, NONE, "Enable dynamic rdo"),
    H2REG(HWIF_ENC_RGBLUMAOFFSET, 1044, 0x0003e000, 13, 0, RW, NONE,
          "RGB to YUV conversion luma offset"),
    H2REG(HWIF_ENC_PRP_IN_LOOP_DS_RATIO, 1044, 0x00001000, 12, 1, RW, NONE,
          "down-scaling ratio of In-loop downscaler in prp"),
    H2REG(HWIF_ENC_AXI_READ_OUTSTANDING_NUM, 1044, 0x00000ff0, 4, 0, RW, NONE,
          "AXI outstanding number of read operation"),
    H2REG(HWIF_ENC_MULTI_CORE_EN, 1044, 0x00000008, 3, 0, RW, NONE,
          "Enable multi-core encoding mode"),
    H2REG(HWIF_ENC_RDOQ_ENABLE, 1044, 0x00000004, 2, 0, RW, NONE, "Enable RDOQ"),
    H2REG(HWIF_ENC_PASS1_SKIP_CABAC, 1044, 0x00000002, 1, 0, RW, NONE, "CABAC SKIP for pass one."),
    H2REG(HWIF_ENC_MOTION_SCORE_ENABLE, 1044, 0x00000001, 0, 0, RW, NONE,
          "Enable motion score computing for 2-pass Agop"),
    H2REG(HWIF_ENC_LUM_SSE_DIV_256, 1048, 0xffffffff, 0, 0, RW, NONE,
          "luma sse divide 256 (before deblock)"),
    H2REG(HWIF_ENC_CB_SSE_DIV_64, 1052, 0xffffffff, 0, 0, RW, NONE,
          "cb sse divide 64 (before deblock)"),
    H2REG(HWIF_ENC_CR_SSE_DIV_64, 1056, 0xffffffff, 0, 0, RW, NONE,
          "cr sse divide 64 (before deblock)"),
    H2REG(HWIF_ENC_REF_READY_THRESHOLD, 1060, 0xffff0000, 16, 0, RW, NONE,
          "EXTRA_LINES_NUM bigger vertical search window ready"),
    H2REG(HWIF_ENC_DDR_POLLING_INTERVAL, 1060, 0x0000ffff, 0, 0, RW, NONE,
          "Interval cycles for HW reading the DDR RECON_PIXELLINES_READY when "
          "value not bigger than search window."),
    H2REG(HWIF_ENC_MULTICORE_SYNC_L0_ADDR, 1064, 0xffffffff, 0, 0, RW, ENC_IN,
          "For multicore sync. Address LSB of RECON_PIXELLINES_READY for ref "
          "buffer L0"),
    H2REG(HWIF_ENC_MULTICORE_SYNC_L0_ADDR_MSB, 1068, 0xffffffff, 0, 0, RW, NONE,
          "For multicore sync. Address MSB of RECON_PIXELLINES_READY for ref "
          "buffer L0"),
    H2REG(HWIF_ENC_MULTICORE_SYNC_L1_ADDR, 1072, 0xffffffff, 0, 0, RW, ENC_IN,
          "For multicore sync. Address LSB of RECON_PIXELLINES_READY for ref "
          "buffer L1"),
    H2REG(HWIF_ENC_MULTICORE_SYNC_L1_ADDR_MSB, 1076, 0xffffffff, 0, 0, RW, NONE,
          "For multicore sync. Address MSB of RECON_PIXELLINES_READY for ref "
          "buffer L1"),
    H2REG(HWIF_ENC_MULTICORE_SYNC_REC_ADDR, 1080, 0xffffffff, 0, 0, RW, ENC_IN,
          "For multicore sync. Address LSB of RECON_PIXELLINES_READY for recon "
          "buffer"),
    H2REG(HWIF_ENC_MULTICORE_SYNC_REC_ADDR_MSB, 1084, 0xffffffff, 0, 0, RW, NONE,
          "For multicore sync. Address MSB of RECON_PIXELLINES_READY for recon "
          "buffer"),
    H2REG(HWIF_ENC_RD_URGENT_ENABLE_THRESHOLD, 1088, 0xff000000, 24, 0, RW, NONE,
          "axi_rd_urgent=1 when total number of rd cmds is bigger or equal to "
          "threshold.255=disable"),
    H2REG(HWIF_ENC_RD_URGENT_DISABLE_THRESHOLD, 1088, 0x00ff0000, 16, 0, RW, NONE,
          "axi_rd_urgent=0 when total number of rd cmds is smaller than "
          "threshold.255=disable"),
    H2REG(HWIF_ENC_WR_URGENT_ENABLE_THRESHOLD, 1088, 0x0000ff00, 8, 0, RW, NONE,
          "axi_wr_urgent=1 when total number of wr cmds is bigger or equal to "
          "threshold.255=disable"),
    H2REG(HWIF_ENC_WR_URGENT_DISABLE_THRESHOLD, 1088, 0x000000ff, 0, 0, RW, NONE,
          "axi_wr_urgent=0 when total number of wr cmds is smaller than "
          "threshold.255=disable"),
    H2REG(HWIF_ENC_ROIMAP_CUCTRL_INDEX_ADDR, 1092, 0xffffffff, 0, 0, RW, ENC_IN,
          "Address LSB of roi map cu ctrlindex buffer"),
    H2REG(HWIF_ENC_ROIMAP_CUCTRL_INDEX_ADDR_MSB, 1096, 0xffffffff, 0, 0, RW, NONE,
          "Address MSB of roi map cu ctrl index buffer"),
    H2REG(HWIF_ENC_ROIMAP_CUCTRL_ADDR, 1100, 0xffffffff, 0, 0, RW, ENC_IN,
          "Address LSB of roi map cu ctrl buffer"),
    H2REG(HWIF_ENC_ROIMAP_CUCTRL_ADDR_MSB, 1104, 0xffffffff, 0, 0, RW, NONE,
          "Address MSB of roi map cu ctrl buffer"),
    H2REG(HWIF_ENC_LOG2_MAX_PIC_ORDER_CNT_LSB, 1108, 0xf8000000, 27, 0, RW, NONE,
          "number of bits in pic_order_cnt_lsb"),
    H2REG(HWIF_ENC_LOG2_MAX_FRAME_NUM, 1108, 0x07c00000, 22, 0, RW, NONE,
          "number of bits in frameNum"),
    H2REG(HWIF_ENC_PIC_ORDER_CNT_TYPE, 1108, 0x00300000, 20, 0, RW, NONE, "poc type"),
    H2REG(HWIF_ENC_SYN_AMOUNT_PER_LOOPBACK, 1108, 0x000fffe0, 5, 0, RW, NONE,
          "Handshake sync amount for every loopback"),
    H2REG(HWIF_ENC_PRPSBI_ID_0, 1108, 0x0000001f, 0, 0, RW, NONE, "id of prp sbi"),
    H2REG(HWIF_ENC_OUTPUT_STRM_BUF1_BASE, 1112, 0xffffffff, 0, 0, RW, ENC_OUT,
          "stream output buffer1 base address. Only valid if "
          "sw_enc_HWStreamBufChain=1."),
    H2REG(HWIF_ENC_OUTPUT_STRM_BUF1_BASE_MSB, 1116, 0xffffffff, 0, 0, RW, NONE,
          "stream output buffer1 address MSB"),
    H2REG(HWIF_ENC_OUTPUT_STRM_BUFFER1_LIMIT, 1120, 0xffffffff, 0, 1, RW, NONE,
          "Stream buffer1 limit size (bytes). Only valid if "
          "sw_enc_HWStreamBufChain=1. If buffer1 limit is reached "
          "buffer_full_IRQ will be generated."),
    H2REG(HWIF_ENC_STRM_SEGMENT_SW_SYNC_EN, 1124, 0x80000000, 31, 1, RW, NONE,
          "Stream segment software handshake enable. Set 0 will disable this "
          "handshake"),
    H2REG(HWIF_ENC_STRM_SEGMENT_EN, 1124, 0x40000000, 30, 1, RW, NONE,
          "Stream segment function enable"),
    H2REG(HWIF_ENC_STRM_SEGMENT_RD_PTR, 1124, 0x3ff00000, 20, 0, RW, NONE,
          "the number of segments that have been read out from output buffer"),
    H2REG(HWIF_ENC_STRM_SEGMENT_WR_PTR, 1124, 0x000ffc00, 10, 0, RW, NONE,
          "the number of segments that have been filled into the output buffer"),
    H2REG(HWIF_NUM_CTB_ROWS_PER_SYNC_MSB, 1124, 0x000003f0, 4, 1, RW, NONE,
          "Number MSB of CTB rows for every HW sync. Bit[14:9]. Unit is CTB"),
    H2REG(HWIF_ENC_CHROMA_FORMAT_IDC, 1124, 0x0000000c, 2, 0, RW, NONE,
          "chroma format idc. 0=4:0:0. 1=4:2:0"),
    H2REG(HWIF_ENC_WRITE_REC_TO_DDR, 1124, 0x00000002, 1, 0, RW, NONE, "write recon to DDR"),
    H2REG(HWIF_ENC_STRM_SEGMENT_SIZE, 1128, 0xffffffff, 0, 1, RW, NONE,
          "limit size of each stream segment(bytes)"),
    H2REG(HWIF_ENC_MOTION_SCORE_L0_0, 1132, 0xffffffff, 0, 0, RW, NONE,
          "motionScore[0][0] used for 2-pass Agop decision"),
    H2REG(HWIF_ENC_MOTION_SCORE_L0_1, 1136, 0xffffffff, 0, 0, RW, NONE,
          "motionScore[0][1] used for 2-pass Agop decision"),
    H2REG(HWIF_ENC_MOTION_SCORE_L1_0, 1140, 0xffffffff, 0, 0, RW, NONE,
          "motionScore[1][0] used for 2-pass Agop decision"),
    H2REG(HWIF_ENC_MOTION_SCORE_L1_1, 1144, 0xffffffff, 0, 0, RW, NONE,
          "motionScore[1][1] used for 2-pass Agop decision"),
    H2REG(HWIF_ENC_HWVIDEOHEIGHTEXT, 1148, 0x80000000, 31, 0, RO, NONE,
          "Maximum allowed video height extended from 8192 to 8640. 0=Not. "
          "1=Yes."),
    H2REG(HWIF_ENC_HWCSCEXTENSIONSUPPORT, 1148, 0x40000000, 30, 0, RO, NONE,
          "RGB to YUV conversion extension. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWSCALER420SUPPORT, 1148, 0x20000000, 29, 0, RO, NONE,
          "out-loop scaler output YUV420SP. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWCUTREESUPPORT, 1148, 0x10000000, 28, 0, RO, NONE,
          "Support of CuTree Lookahead. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWCTBRCMOREMODE, 1148, 0x00800000, 23, 0, RO, NONE,
          "more ctbrc mode supported by HW"),
    H2REG(HWIF_ENC_HWMEVERTRANGEPROGRAMABLE, 1148, 0x00400000, 22, 0, RO, NONE,
          "Programable ME vertical search range.  0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWMONOCHROMESUPPORT, 1148, 0x00200000, 21, 0, RO, NONE,
          "Mono chroma supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_EXTSRAMSUPPORT, 1148, 0x00100000, 20, 0, RO, NONE,
          "External SRAM supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWVIDEOSTABSUPPORT, 1148, 0x00080000, 19, 0, RO, NONE,
          "HW supports video stabilization or not. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWH264RDOQSUPPORT, 1148, 0x00040000, 18, 0, RO, NONE,
          "H264 RDOQ supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWDISABLERECWTSUPPORT, 1148, 0x00020000, 17, 0, RO, NONE,
          "HW supports disable to write recon to DDR. 0=not supported. "
          "1=supported"),
    H2REG(HWIF_ENC_HWOSDSUPPORT, 1148, 0x00010000, 16, 0, RO, NONE,
          "HW OSD supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWH264NALREFIDC_2BIT, 1148, 0x00008000, 15, 0, RO, NONE,
          "HW H264 supports 2_bit nal_ref_idc. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWDYNAMICRDOSUPPORT, 1148, 0x00004000, 14, 0, RO, NONE,
          "HW HEVC/AV1 dynamic rdo supported by HW. 0=not supported. "
          "1=supported"),
    H2REG(HWIF_ENC_HWAV1SUPPORT, 1148, 0x00002000, 13, 0, RO, NONE,
          "AV1 encoding supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWMAXVIDEOWIDTHAV1, 1148, 0x00001fff, 0, 0, RO, NONE,
          "Maximum video width supported by HW for AV1 encoding (unit 8 pixels)"),
    H2REG(HWIF_ENC_INTRACU8NUM_MSB, 1152, 0xe0000000, 29, 0, RW, NONE,
          "Extend swreg111. The number of block8x8 with type INTRA. Bits 22:20."),
    H2REG(HWIF_ENC_SKIPCU8NUM_MSB, 1152, 0x1c000000, 26, 0, RW, NONE,
          "Extend swreg112. The number of block8x8 with type SKIP. Bits 22:20."),
    H2REG(HWIF_ENC_QP_SUM_MSB, 1152, 0x03000000, 24, 0, RW, NONE,
          "Extend swreg183. Block qp sum. Bits 27:26."),
    H2REG(HWIF_ENC_QP_NUM_MSB, 1152, 0x00e00000, 21, 0, RW, NONE,
          "Extend swreg184. Block qp number. Bits 22:20."),
    H2REG(HWIF_ENC_PIC_COMPLEXITY_MSB, 1152, 0x001e0000, 17, 0, RW, NONE,
          "Extend swreg185. Picture complexity. Bits 26:23."),
    H2REG(HWIF_ENC_CTB_QP_SUM_FOR_RC_MSB, 1152, 0x00018000, 15, 0, RW, NONE,
          "Extend swreg248. Sum of CTB QP used for rate control. Bits 25:24."),
    H2REG(HWIF_ENC_CUINFOVERSION, 1152, 0x00007000, 12, 1, RW, NONE, "cuinfo dump version"),
    H2REG(HWIF_ENC_PRPSBI_WRSEGINITNUM, 1152, 0x000003ff, 0, 0, RW, NONE,
          "segment init num of prp sbi write before encoding a new frame"),
    H2REG(HWIF_ENC_RGBCOEFFG, 1156, 0xffff0000, 16, 0, RW, NONE,
          "RGB to YUV conversion coefficient G"),
    H2REG(HWIF_ENC_RGBCOEFFH, 1156, 0x0000ffff, 0, 0, RW, NONE,
          "RGB to YUV conversion coefficient H"),
    H2REG(HWIF_ENC_TOTALARLEN2, 1160, 0xffffffff, 0, 0, RO, NONE, "[AXI2] Accumulated ARLEN+1"),
    H2REG(HWIF_ENC_TOTALR2, 1164, 0xffffffff, 0, 0, RO, NONE, "[AXI2] RVALID & RREADY"),
    H2REG(HWIF_ENC_TOTALAR2, 1168, 0xffffffff, 0, 0, RO, NONE, "[AXI2] ARVALID & ARREADY"),
    H2REG(HWIF_ENC_TOTALRLAST2, 1172, 0xffffffff, 0, 0, RO, NONE, "[AXI2] RVALID & RREADY & RLAST"),
    H2REG(HWIF_ENC_TOTALAWLEN2, 1176, 0xffffffff, 0, 0, RO, NONE, "[AXI2] Accumulated AWLEN+1"),
    H2REG(HWIF_ENC_TOTALW2, 1180, 0xffffffff, 0, 0, RO, NONE, "[AXI2] WVALID & WREADY"),
    H2REG(HWIF_ENC_TOTALAW2, 1184, 0xffffffff, 0, 0, RO, NONE, "[AXI2] AWVALID & AWREADY"),
    H2REG(HWIF_ENC_TOTALWLAST2, 1188, 0xffffffff, 0, 0, RO, NONE, "[AXI2] WVALID & WREADY & WLAST"),
    H2REG(HWIF_ENC_TOTALB2, 1192, 0xffffffff, 0, 0, RO, NONE, "[AXI2] BVALID & BREADY"),
    H2REG(HWIF_ENC_EXT_SRAM_LUM_FWD_BASE, 1196, 0xffffffff, 0, 0, RW, ENC_IN,
          "Base address for external FWD luma SRAM LSB"),
    H2REG(HWIF_ENC_EXT_SRAM_LUM_FWD_BASE_MSB, 1200, 0xffffffff, 0, 0, RW, NONE,
          "Base address for external FWD luma SRAM MSB"),
    H2REG(HWIF_ENC_EXT_SRAM_LUM_BWD_BASE, 1204, 0xffffffff, 0, 0, RW, ENC_IN,
          "Base address for external BWD luma SRAM LSB"),
    H2REG(HWIF_ENC_EXT_SRAM_LUM_BWD_BASE_MSB, 1208, 0xffffffff, 0, 0, RW, NONE,
          "Base address for external BWD luma SRAM MSB"),
    H2REG(HWIF_ENC_EXT_SRAM_CHR_FWD_BASE, 1212, 0xffffffff, 0, 0, RW, ENC_IN,
          "Base address for external FWD chroma SRAM LSB"),
    H2REG(HWIF_ENC_EXT_SRAM_CHR_FWD_BASE_MSB, 1216, 0xffffffff, 0, 0, RW, NONE,
          "Base address for external FWD chroma SRAM MSB"),
    H2REG(HWIF_ENC_EXT_SRAM_CHR_BWD_BASE, 1220, 0xffffffff, 0, 0, RW, ENC_IN,
          "Base address for external BWD chroma SRAM LSB"),
    H2REG(HWIF_ENC_EXT_SRAM_CHR_BWD_BASE_MSB, 1224, 0xffffffff, 0, 0, RW, NONE,
          "Base address for external BWD chroma SRAM MSB"),
    H2REG(HWIF_ENC_EXTLINEBUFFER_LINECNT_LUM_FWD, 1228, 0xff000000, 24, 1, RW, NONE,
          "line count of external sram line buffer for luma fwd. 0=disable. "
          "1-255=line count in unit of 4 pixels."),
    H2REG(HWIF_ENC_EXTLINEBUFFER_LINECNT_LUM_BWD, 1228, 0x00ff0000, 16, 1, RW, NONE,
          "line count of external sram line buffer for luma bwd. 0=disable. "
          "1-255=line count in unit of 4 pixels."),
    H2REG(HWIF_ENC_EXTLINEBUFFER_LINECNT_CHR_FWD, 1228, 0x0000ff00, 8, 1, RW, NONE,
          "line count of external sram line buffer for chroma fwd. 0=disable. "
          "1-255=line count in unit of 4 pixels."),
    H2REG(HWIF_ENC_EXTLINEBUFFER_LINECNT_CHR_BWD, 1228, 0x000000ff, 0, 1, RW, NONE,
          "line count of external sram line buffer for chroma bwd. 0=disable. "
          "1-255=line count in unit of 4 pixels."),
    H2REG(HWIF_ENC_AXI_STRM_WRITE_PENDING, 1232, 0xffffffff, 0, 0, RO, NONE,
          "EMC stream AXI write pending"),
    H2REG(HWIF_ENC_AXI_RECON_WRITE_PENDING, 1236, 0xffffffff, 0, 0, RO, NONE,
          "Recon pixel AXI write pending"),
    H2REG(HWIF_ENC_AXI_REC4N_WRITE_PENDING, 1240, 0xffffffff, 0, 0, RO, NONE,
          "Recon 4n pixel AXI write pending"),
    H2REG(HWIF_ENC_AXI_PRP_READ_PENDING, 1244, 0xffffffff, 0, 0, RO, NONE, "Prp AXI read pending"),
    H2REG(HWIF_ENC_AXI_REF_READ_PENDING, 1248, 0xffffffff, 0, 0, RO, NONE,
          "Reference frame read pending"),
    H2REG(HWIF_ENC_AXI_REF4N_READ_PENDING, 1252, 0xffffffff, 0, 0, RO, NONE,
          "Reference frame 4n AXI read pending"),
    H2REG(HWIF_ENC_AXI_RCROI_READ_PENDING, 1256, 0xffffffff, 0, 0, RO, NONE,
          "RCROI AXI read pending"),
    H2REG(HWIF_ENC_AXI_READ_CHANNEL_PENDING, 1260, 0xffffffff, 0, 0, RO, NONE,
          "AXI read channel pending"),
    H2REG(HWIF_ENC_AXI_WRITE_CHANNEL_PENDING, 1264, 0xffffffff, 0, 0, RO, NONE,
          "AXI write channel pending"),
    H2REG(HWIF_ENC_AXI_TOTAL_PENDING, 1268, 0xffffffff, 0, 0, RO, NONE, "Total AXI bus pending"),
    H2REG(HWIF_ENC_HW_DEBUG, 1272, 0xffffffff, 0, 0, RW, NONE, "HW debug use"),
    H2REG(HWIF_ENC_AXI_BURST_ALIGN_FUSE_WR_COMMON, 1276, 0xf0000000, 28, 0, RO, NONE,
          "AXI burst align wr common fuse setting"),
    H2REG(HWIF_ENC_AXI_BURST_ALIGN_FUSE_WR_STREAM, 1276, 0x0f000000, 24, 0, RO, NONE,
          "AXI burst align wr stream fuse setting"),
    H2REG(HWIF_ENC_AXI_BURST_ALIGN_FUSE_WR_CHROMA_REF, 1276, 0x00f00000, 20, 0, RO, NONE,
          "AXI burst align wr chroma ref fuse setting"),
    H2REG(HWIF_ENC_AXI_BURST_ALIGN_FUSE_WR_LUMA_REF, 1276, 0x000f0000, 16, 0, RO, NONE,
          "AXI burst align wr luma ref fuse setting"),
    H2REG(HWIF_ENC_AXI_BURST_ALIGN_FUSE_RD_COMMON, 1276, 0x0000f000, 12, 0, RO, NONE,
          "AXI burst align rd common fuse setting"),
    H2REG(HWIF_ENC_AXI_BURST_ALIGN_FUSE_RD_PRP, 1276, 0x00000f00, 8, 0, RO, NONE,
          "AXI burst align rd prp fuse setting"),
    H2REG(HWIF_ENC_AXI_BURST_ALIGN_FUSE_RD_CH_REF_PREFETCH, 1276, 0x000000f0, 4, 0, RO, NONE,
          "AXI burst align rd ch ref prefetch fuse setting"),
    H2REG(HWIF_ENC_AXI_BURST_ALIGN_FUSE_RD_LU_REF_PREFETCH, 1276, 0x0000000f, 0, 0, RO, NONE,
          "AXI burst align rd lu ref prefetch fuse setting"),
    H2REG(HWIF_ENC_AXI_BURST_ALIGN_WR_COMMON, 1280, 0xf0000000, 28, 0, RW, NONE,
          "AXI burst align wr common"),
    H2REG(HWIF_ENC_AXI_BURST_ALIGN_WR_STREAM, 1280, 0x0f000000, 24, 0, RW, NONE,
          "AXI burst align wr stream"),
    H2REG(HWIF_ENC_AXI_BURST_ALIGN_WR_CHROMA_REF, 1280, 0x00f00000, 20, 0, RW, NONE,
          "AXI burst align wr chroma ref"),
    H2REG(HWIF_ENC_AXI_BURST_ALIGN_WR_LUMA_REF, 1280, 0x000f0000, 16, 0, RW, NONE,
          "AXI burst align wr luma ref"),
    H2REG(HWIF_ENC_AXI_BURST_ALIGN_RD_COMMON, 1280, 0x0000f000, 12, 0, RW, NONE,
          "AXI burst align rd common"),
    H2REG(HWIF_ENC_AXI_BURST_ALIGN_RD_PRP, 1280, 0x00000f00, 8, 0, RW, NONE,
          "AXI burst align rd prp"),
    H2REG(HWIF_ENC_AXI_BURST_ALIGN_RD_CH_REF_PREFETCH, 1280, 0x000000f0, 4, 0, RW, NONE,
          "AXI burst align rd ch ref prefetch"),
    H2REG(HWIF_ENC_AXI_BURST_ALIGN_RD_LU_REF_PREFETCH, 1280, 0x0000000f, 0, 0, RW, NONE,
          "AXI burst align rd lu ref prefetch"),
    H2REG(HWIF_ENC_ME_ASSIGNED_VERT_SEARCH_RANGE, 1284, 0xfc000000, 26, 0, RW, NONE,
          "Assigned ME vertical search range in 8 pixel unit. If value=0 "
          "maximum supported range will be used. Only valid when "
          "sw_enc_HWMeVertRangeProgramable=1."),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR8_MSB, 1288, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 8 input chroma U buffer address MSB part"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR8, 1292, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 8 input chroma V buffer address"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR8_MSB, 1296, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 8 input chroma V buffer address MSB part"),
    H2REG(HWIF_ENC_OVERLAY_YOFFSET1, 1300, 0xffff0000, 16, 0, RW, NONE, "Overlay 1 y offset"),
    H2REG(HWIF_ENC_OVERLAY_XOFFSET1, 1300, 0x0000ffff, 0, 0, RW, NONE, "Overlay 1 x offset"),
    H2REG(HWIF_ENC_OVERLAY_YOFFSET2, 1304, 0xffff0000, 16, 0, RW, NONE, "Overlay 2 y offset"),
    H2REG(HWIF_ENC_OVERLAY_XOFFSET2, 1304, 0x0000ffff, 0, 0, RW, NONE, "Overlay 2 x offset"),
    H2REG(HWIF_ENC_OVERLAY_YOFFSET3, 1308, 0xffff0000, 16, 0, RW, NONE, "Overlay 3 y offset"),
    H2REG(HWIF_ENC_OVERLAY_XOFFSET3, 1308, 0x0000ffff, 0, 0, RW, NONE, "Overlay 3 x offset"),
    H2REG(HWIF_ENC_OVERLAY_YOFFSET4, 1312, 0xffff0000, 16, 0, RW, NONE, "Overlay 4 y offset"),
    H2REG(HWIF_ENC_OVERLAY_XOFFSET4, 1312, 0x0000ffff, 0, 0, RW, NONE, "Overlay 4 x offset"),
    H2REG(HWIF_ENC_OVERLAY_YOFFSET5, 1316, 0xffff0000, 16, 0, RW, NONE, "Overlay 5 y offset"),
    H2REG(HWIF_ENC_OVERLAY_XOFFSET5, 1316, 0x0000ffff, 0, 0, RW, NONE, "Overlay 5 x offset"),
    H2REG(HWIF_ENC_OVERLAY_YOFFSET6, 1320, 0xffff0000, 16, 0, RW, NONE, "Overlay 6 y offset"),
    H2REG(HWIF_ENC_OVERLAY_XOFFSET6, 1320, 0x0000ffff, 0, 0, RW, NONE, "Overlay 6 x offset"),
    H2REG(HWIF_ENC_OVERLAY_YOFFSET7, 1324, 0xffff0000, 16, 0, RW, NONE, "Overlay 7 y offset"),
    H2REG(HWIF_ENC_OVERLAY_XOFFSET7, 1324, 0x0000ffff, 0, 0, RW, NONE, "Overlay 7 x offset"),
    H2REG(HWIF_ENC_OVERLAY_YOFFSET8, 1328, 0xffff0000, 16, 0, RW, NONE, "Overlay 8 y offset"),
    H2REG(HWIF_ENC_OVERLAY_XOFFSET8, 1328, 0x0000ffff, 0, 0, RW, NONE, "Overlay 8 x offset"),
    H2REG(HWIF_ENC_OVERLAY_HEIGHT1, 1332, 0xffff0000, 16, 1, RW, NONE, "Overlay 1 height"),
    H2REG(HWIF_ENC_OVERLAY_WIDTH1, 1332, 0x0000ffff, 0, 0, RW, NONE, "Overlay 1 width"),
    H2REG(HWIF_ENC_OVERLAY_HEIGHT2, 1336, 0xffff0000, 16, 1, RW, NONE, "Overlay 2 height"),
    H2REG(HWIF_ENC_OVERLAY_WIDTH2, 1336, 0x0000ffff, 0, 0, RW, NONE, "Overlay 2 width"),
    H2REG(HWIF_ENC_OVERLAY_HEIGHT3, 1340, 0xffff0000, 16, 1, RW, NONE, "Overlay 3 height"),
    H2REG(HWIF_ENC_OVERLAY_WIDTH3, 1340, 0x0000ffff, 0, 0, RW, NONE, "Overlay 3 width"),
    H2REG(HWIF_ENC_OVERLAY_HEIGHT4, 1344, 0xffff0000, 16, 1, RW, NONE, "Overlay 4 height"),
    H2REG(HWIF_ENC_OVERLAY_WIDTH4, 1344, 0x0000ffff, 0, 0, RW, NONE, "Overlay 4 width"),
    H2REG(HWIF_ENC_OVERLAY_HEIGHT5, 1348, 0xffff0000, 16, 1, RW, NONE, "Overlay 5 height"),
    H2REG(HWIF_ENC_OVERLAY_WIDTH5, 1348, 0x0000ffff, 0, 0, RW, NONE, "Overlay 5 width"),
    H2REG(HWIF_ENC_OVERLAY_HEIGHT6, 1352, 0xffff0000, 16, 1, RW, NONE, "Overlay 6 height"),
    H2REG(HWIF_ENC_OVERLAY_WIDTH6, 1352, 0x0000ffff, 0, 0, RW, NONE, "Overlay 6 width"),
    H2REG(HWIF_ENC_OVERLAY_HEIGHT7, 1356, 0xffff0000, 16, 1, RW, NONE, "Overlay 7 height"),
    H2REG(HWIF_ENC_OVERLAY_WIDTH7, 1356, 0x0000ffff, 0, 0, RW, NONE, "Overlay 7 width"),
    H2REG(HWIF_ENC_OVERLAY_HEIGHT8, 1360, 0xffff0000, 16, 1, RW, NONE, "Overlay 8 height"),
    H2REG(HWIF_ENC_OVERLAY_WIDTH8, 1360, 0x0000ffff, 0, 0, RW, NONE, "Overlay 8 width"),
    H2REG(HWIF_ENC_VP9_SEGMENT1_SKIP, 1364, 0x80000000, 31, 1, RW, NONE, "Vp9 segment 1 skip"),
    H2REG(HWIF_ENC_OVERLAY_YSTRIDE1, 1364, 0x7ffff800, 11, 1, RW, NONE, "Overlay 1 Y stride"),
    H2REG(HWIF_ENC_OVERLAY_ALPHA1, 1364, 0x000007f8, 3, 0, RW, NONE, "Overlay 1 alpha"),
    H2REG(HWIF_ENC_OVERLAY_FORMAT1, 1364, 0x00000006, 1, 1, RW, NONE, "Overlay 1 format"),
    H2REG(HWIF_ENC_OVERLAY_ENABLE1, 1364, 0x00000001, 0, 1, RW, NONE, "Overlay 1 enable"),
    H2REG(HWIF_ENC_VP9_SEGMENT2_SKIP, 1368, 0x80000000, 31, 1, RW, NONE, "Vp9 segment 2 skip"),
    H2REG(HWIF_ENC_OVERLAY_YSTRIDE2, 1368, 0x7ffff800, 11, 1, RW, NONE, "Overlay 2 Y stride"),
    H2REG(HWIF_ENC_OVERLAY_ALPHA2, 1368, 0x000007f8, 3, 0, RW, NONE, "Overlay 2 alpha"),
    H2REG(HWIF_ENC_OVERLAY_FORMAT2, 1368, 0x00000006, 1, 1, RW, NONE, "Overlay 2 format"),
    H2REG(HWIF_ENC_OVERLAY_ENABLE2, 1368, 0x00000001, 0, 1, RW, NONE, "Overlay 2 enable"),
    H2REG(HWIF_ENC_VP9_SEGMENT3_SKIP, 1372, 0x80000000, 31, 1, RW, NONE, "Vp9 segment 3 skip"),
    H2REG(HWIF_ENC_OVERLAY_YSTRIDE3, 1372, 0x7ffff800, 11, 1, RW, NONE, "Overlay 3 Y stride"),
    H2REG(HWIF_ENC_OVERLAY_ALPHA3, 1372, 0x000007f8, 3, 0, RW, NONE, "Overlay 3 alpha"),
    H2REG(HWIF_ENC_OVERLAY_FORMAT3, 1372, 0x00000006, 1, 1, RW, NONE, "Overlay 3 format"),
    H2REG(HWIF_ENC_OVERLAY_ENABLE3, 1372, 0x00000001, 0, 1, RW, NONE, "Overlay 3 enable"),
    H2REG(HWIF_ENC_VP9_SEGMENT4_SKIP, 1376, 0x80000000, 31, 1, RW, NONE, "Vp9 segment 4 skip"),
    H2REG(HWIF_ENC_OVERLAY_YSTRIDE4, 1376, 0x7ffff800, 11, 1, RW, NONE, "Overlay 4 Y stride"),
    H2REG(HWIF_ENC_OVERLAY_ALPHA4, 1376, 0x000007f8, 3, 0, RW, NONE, "Overlay 4 alpha"),
    H2REG(HWIF_ENC_OVERLAY_FORMAT4, 1376, 0x00000006, 1, 1, RW, NONE, "Overlay 4 format"),
    H2REG(HWIF_ENC_OVERLAY_ENABLE4, 1376, 0x00000001, 0, 1, RW, NONE, "Overlay 4 enable"),
    H2REG(HWIF_ENC_VP9_SEGMENT5_SKIP, 1380, 0x80000000, 31, 1, RW, NONE, "Vp9 segment 5 skip"),
    H2REG(HWIF_ENC_OVERLAY_YSTRIDE5, 1380, 0x7ffff800, 11, 1, RW, NONE, "Overlay 5 Y stride"),
    H2REG(HWIF_ENC_OVERLAY_ALPHA5, 1380, 0x000007f8, 3, 0, RW, NONE, "Overlay 5 alpha"),
    H2REG(HWIF_ENC_OVERLAY_FORMAT5, 1380, 0x00000006, 1, 1, RW, NONE, "Overlay 5 format"),
    H2REG(HWIF_ENC_OVERLAY_ENABLE5, 1380, 0x00000001, 0, 1, RW, NONE, "Overlay 5 enable"),
    H2REG(HWIF_ENC_VP9_SEGMENT6_SKIP, 1384, 0x80000000, 31, 1, RW, NONE, "Vp9 segment 6 skip"),
    H2REG(HWIF_ENC_OVERLAY_YSTRIDE6, 1384, 0x7ffff800, 11, 1, RW, NONE, "Overlay 6 Y stride"),
    H2REG(HWIF_ENC_OVERLAY_ALPHA6, 1384, 0x000007f8, 3, 0, RW, NONE, "Overlay 6 alpha"),
    H2REG(HWIF_ENC_OVERLAY_FORMAT6, 1384, 0x00000006, 1, 1, RW, NONE, "Overlay 6 format"),
    H2REG(HWIF_ENC_OVERLAY_ENABLE6, 1384, 0x00000001, 0, 1, RW, NONE, "Overlay 6 enable"),
    H2REG(HWIF_ENC_VP9_SEGMENT7_SKIP, 1388, 0x80000000, 31, 1, RW, NONE, "Vp9 segment 7 skip"),
    H2REG(HWIF_ENC_OVERLAY_YSTRIDE7, 1388, 0x7ffff800, 11, 1, RW, NONE, "Overlay 7 Y stride"),
    H2REG(HWIF_ENC_OVERLAY_ALPHA7, 1388, 0x000007f8, 3, 0, RW, NONE, "Overlay 7 alpha"),
    H2REG(HWIF_ENC_OVERLAY_FORMAT7, 1388, 0x00000006, 1, 1, RW, NONE, "Overlay 7 format"),
    H2REG(HWIF_ENC_OVERLAY_ENABLE7, 1388, 0x00000001, 0, 1, RW, NONE, "Overlay 7 enable"),
    H2REG(HWIF_ENC_VP9_SEGMENT8_SKIP, 1392, 0x80000000, 31, 1, RW, NONE, "Vp9 segment 8 skip"),
    H2REG(HWIF_ENC_OVERLAY_YSTRIDE8, 1392, 0x7ffff800, 11, 1, RW, NONE, "Overlay 8 Y stride"),
    H2REG(HWIF_ENC_OVERLAY_ALPHA8, 1392, 0x000007f8, 3, 0, RW, NONE, "Overlay 8 alpha"),
    H2REG(HWIF_ENC_OVERLAY_FORMAT8, 1392, 0x00000006, 1, 1, RW, NONE, "Overlay 8 format"),
    H2REG(HWIF_ENC_OVERLAY_ENABLE8, 1392, 0x00000001, 0, 1, RW, NONE, "Overlay 8 enable"),
    H2REG(HWIF_ENC_SBI_WAIT_FRAME_START, 1396, 0x80000000, 31, 1, RW, NONE,
          "sbi wait for data ready before each frame start"),
    H2REG(HWIF_ENC_SBI_OUT_OF_SYNC, 1396, 0x40000000, 30, 1, RO, NONE,
          "sbi out of sync indication bit"),
    H2REG(HWIF_ENC_SBI_TIMEOUT, 1396, 0x20000000, 29, 1, RO, NONE, "sbi timeout indication bit"),
    H2REG(HWIF_ENC_WRITE_TMV_INFO_DDR, 1396, 0x10000000, 28, 1, RW, NONE,
          "Write current frame TMV info to DDR enable"),
    H2REG(HWIF_ENC_TMVP_ENABLE, 1396, 0x08000000, 27, 1, RW, NONE,
          "Inter prediction use temporal mvp enable"),
    H2REG(HWIF_ENC_VP9_SEGMENT1_QP, 1396, 0x07f00000, 20, 1, RW, NONE, "vp9 segment 1 qp"),
    H2REG(HWIF_ENC_OVERLAY_UVSTRIDE1, 1396, 0x000fffff, 0, 1, RW, NONE, "Overlay 1 chroma stride"),
    H2REG(HWIF_ENC_STARTTILEIDX, 1400, 0xf8000000, 27, 0, RW, NONE,
          "tile index of the first tile in tile column."),
    H2REG(HWIF_ENC_VP9_SEGMENT2_QP, 1400, 0x07f00000, 20, 1, RW, NONE, "vp9 segment 2 qp"),
    H2REG(HWIF_ENC_OVERLAY_UVSTRIDE2, 1400, 0x000fffff, 0, 1, RW, NONE, "Overlay 2 chroma stride"),
    H2REG(HWIF_ENC_VP9_SEGMENT3_QP, 1404, 0x07f00000, 20, 1, RW, NONE, "vp9 segment 3 qp"),
    H2REG(HWIF_ENC_OVERLAY_UVSTRIDE3, 1404, 0x000fffff, 0, 1, RW, NONE, "Overlay 3 chroma stride"),
    H2REG(HWIF_ENC_VP9_SEGMENT4_QP, 1408, 0x07f00000, 20, 1, RW, NONE, "vp9 segment 4 qp"),
    H2REG(HWIF_ENC_OVERLAY_UVSTRIDE4, 1408, 0x000fffff, 0, 1, RW, NONE, "Overlay 4 chroma stride"),
    H2REG(HWIF_ENC_VP9_SEGMENT5_QP, 1412, 0x07f00000, 20, 1, RW, NONE, "vp9 segment 5 qp"),
    H2REG(HWIF_ENC_OVERLAY_UVSTRIDE5, 1412, 0x000fffff, 0, 1, RW, NONE, "Overlay 5 chroma stride"),
    H2REG(HWIF_ENC_VP9_SEGMENT6_QP, 1416, 0x07f00000, 20, 1, RW, NONE, "vp9 segment 6 qp"),
    H2REG(HWIF_ENC_OVERLAY_UVSTRIDE6, 1416, 0x000fffff, 0, 1, RW, NONE, "Overlay 6 chroma stride"),
    H2REG(HWIF_ENC_VP9_SEGMENT7_QP, 1420, 0x07f00000, 20, 1, RW, NONE, "vp9 segment 7 qp"),
    H2REG(HWIF_ENC_OVERLAY_UVSTRIDE7, 1420, 0x000fffff, 0, 1, RW, NONE, "Overlay 7 chroma stride"),
    H2REG(HWIF_ENC_VP9_SEGMENT8_QP, 1424, 0x3f800000, 23, 1, RW, NONE, "vp9 segment 8 qp"),
    H2REG(HWIF_ENC_VP9_SEGMENTATION_ABS, 1424, 0x00400000, 22, 0, RW, NONE, "vp9 segment qp type"),
    H2REG(HWIF_ENC_OVERLAY_SUPERTILE, 1424, 0x00300000, 20, 1, RW, NONE,
          "Overlay 1 Super tile type"),
    H2REG(HWIF_ENC_OVERLAY_UVSTRIDE8, 1424, 0x000fffff, 0, 1, RW, NONE, "Overlay 8 chroma stride"),
    H2REG(HWIF_ENC_RDO_CHECK_CHROMA_ZERO_TU, 1428, 0x80000000, 31, 0, RW, NONE,
          "check chroma zero tu in RDO"),
    H2REG(HWIF_ENC_VP9_SEGMENT1_LF, 1428, 0x7f000000, 24, 1, RW, NONE,
          "vp9 segment 1 loop filter strength"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPY1, 1428, 0x00ff0000, 16, 0, RW, NONE, "Overlay 1 bitmap Y value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPU1, 1428, 0x0000ff00, 8, 0, RW, NONE, "Overlay 1 bitmap U value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPV1, 1428, 0x000000ff, 0, 0, RW, NONE, "Overlay 1 bitmap V value"),
    H2REG(HWIF_ENC_VP9_SEGMENT2_LF, 1432, 0x7f000000, 24, 1, RW, NONE,
          "vp9 segment 2 loop filter strength"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPY2, 1432, 0x00ff0000, 16, 0, RW, NONE, "Overlay 2 bitmap Y value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPU2, 1432, 0x0000ff00, 8, 0, RW, NONE, "Overlay 2 bitmap U value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPV2, 1432, 0x000000ff, 0, 0, RW, NONE, "Overlay 2 bitmap V value"),
    H2REG(HWIF_ENC_VP9_SEGMENT3_LF, 1436, 0x7f000000, 24, 1, RW, NONE,
          "vp9 segment 3 loop filter strength"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPY3, 1436, 0x00ff0000, 16, 0, RW, NONE, "Overlay 3 bitmap Y value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPU3, 1436, 0x0000ff00, 8, 0, RW, NONE, "Overlay 3 bitmap U value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPV3, 1436, 0x000000ff, 0, 0, RW, NONE, "Overlay 3 bitmap V value"),
    H2REG(HWIF_ENC_VP9_SEGMENT4_LF, 1440, 0x7f000000, 24, 1, RW, NONE,
          "vp9 segment 4 loop filter strength"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPY4, 1440, 0x00ff0000, 16, 0, RW, NONE, "Overlay 4 bitmap Y value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPU4, 1440, 0x0000ff00, 8, 0, RW, NONE, "Overlay 4 bitmap U value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPV4, 1440, 0x000000ff, 0, 0, RW, NONE, "Overlay 4 bitmap V value"),
    H2REG(HWIF_ENC_VP9_SEGMENT5_LF, 1444, 0x7f000000, 24, 1, RW, NONE,
          "vp9 segment 5 loop filter strength"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPY5, 1444, 0x00ff0000, 16, 0, RW, NONE, "Overlay 5 bitmap Y value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPU5, 1444, 0x0000ff00, 8, 0, RW, NONE, "Overlay 5 bitmap U value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPV5, 1444, 0x000000ff, 0, 0, RW, NONE, "Overlay 5 bitmap V value"),
    H2REG(HWIF_ENC_VP9_SEGMENT6_LF, 1448, 0x7f000000, 24, 1, RW, NONE,
          "vp9 segment 6 loop filter strength"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPY6, 1448, 0x00ff0000, 16, 0, RW, NONE, "Overlay 6 bitmap Y value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPU6, 1448, 0x0000ff00, 8, 0, RW, NONE, "Overlay 6 bitmap U value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPV6, 1448, 0x000000ff, 0, 0, RW, NONE, "Overlay 6 bitmap V value"),
    H2REG(HWIF_ENC_VP9_SEGMENT7_LF, 1452, 0x7f000000, 24, 1, RW, NONE,
          "vp9 segment 7 loop filter strength"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPY7, 1452, 0x00ff0000, 16, 0, RW, NONE, "Overlay 7 bitmap Y value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPU7, 1452, 0x0000ff00, 8, 0, RW, NONE, "Overlay 7 bitmap U value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPV7, 1452, 0x000000ff, 0, 0, RW, NONE, "Overlay 7 bitmap V value"),
    H2REG(HWIF_ENC_VP9_SEGMENT8_LF, 1456, 0x7f000000, 24, 1, RW, NONE,
          "vp9 segment 8 loop filter strength"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPY8, 1456, 0x00ff0000, 16, 0, RW, NONE, "Overlay 8 bitmap Y value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPU8, 1456, 0x0000ff00, 8, 0, RW, NONE, "Overlay 8 bitmap U value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPV8, 1456, 0x000000ff, 0, 0, RW, NONE, "Overlay 8 bitmap V value"),
    H2REG(HWIF_ENC_STAB_NEXT_LUMA_BASE, 1460, 0xffffffff, 0, 0, RW, ENC_IN,
          "Next frame (the frame to be stabilized) luma base address"),
    H2REG(HWIF_ENC_STAB_NEXT_LUMA_BASE_MSB, 1464, 0xffffffff, 0, 0, RW, NONE,
          "Next frame (the frame to be stabilized) luma base address MSB"),
    H2REG(HWIF_ENC_STAB_MODE, 1468, 0xc0000000, 30, 1, RW, NONE,
          "Video stabilization mode. 0=disabled. 1=stab only. 2=stab+encode."),
    H2REG(HWIF_ENC_STAB_MINIMUM, 1468, 0x03ffffff, 0, 1, RW, NONE,
          "Video stabilization minimum value output. max "
          "255*(8192/16-2)*(8192/16-2)"),
    H2REG(HWIF_ENC_STAB_MOTION_SUM, 1472, 0xffffffff, 0, 1, RW, NONE,
          "Video stabilization motion sum div32 output. max "
          "255*(8192/16-2)*(8192/16-2)*33*33/32"),
    H2REG(HWIF_ENC_STAB_GMVX, 1476, 0xfc000000, 26, 1, RW, NONE,
          "Video stabilization GMV horizontal output"),
    H2REG(HWIF_ENC_STAB_MATRIX1, 1476, 0x03ffffff, 0, 1, RW, NONE,
          "Video stabilization matrix 1 (up-left position) output"),
    H2REG(HWIF_ENC_STAB_GMVY, 1480, 0xfc000000, 26, 1, RW, NONE,
          "Video stabilization GMV vertical output"),
    H2REG(HWIF_ENC_STAB_MATRIX2, 1480, 0x03ffffff, 0, 1, RW, NONE,
          "Video stabilization matrix 2 (up position) output"),
    H2REG(HWIF_ENC_STAB_MATRIX3, 1484, 0x03ffffff, 0, 1, RW, NONE,
          "Video stabilization matrix 3 (up-right position) output"),
    H2REG(HWIF_ENC_STAB_MATRIX4, 1488, 0x03ffffff, 0, 1, RW, NONE,
          "Video stabilization matrix 4 (left position) output"),
    H2REG(HWIF_ENC_STAB_MATRIX5, 1492, 0x03ffffff, 0, 1, RW, NONE,
          "Video stabilization matrix 5 (GMV position) output"),
    H2REG(HWIF_ENC_STAB_MATRIX6, 1496, 0x03ffffff, 0, 1, RW, NONE,
          "Video stabilization matrix 6 (right position) output"),
    H2REG(HWIF_ENC_STAB_MATRIX7, 1500, 0x03ffffff, 0, 1, RW, NONE,
          "Video stabilization matrix 7 (down-left position) output"),
    H2REG(HWIF_ENC_STAB_MATRIX8, 1504, 0x03ffffff, 0, 1, RW, NONE,
          "Video stabilization matrix 8 (down position) output"),
    H2REG(HWIF_ENC_AXI_BURST_ALIGN_WR_CUINFO, 1508, 0xf0000000, 28, 0, RW, NONE,
          "AXI burst align write cuinfo"),
    H2REG(HWIF_ENC_STAB_MATRIX9, 1508, 0x03ffffff, 0, 1, RW, NONE,
          "Video stabilization matrix 9 (down-right position) output"),
    H2REG(HWIF_ENC_DDRPOLLINGINTERVAL, 1512, 0xffff0000, 16, 0, RW, NONE,
          "cycles to check DDR's sync word"),
    H2REG(HWIF_ENC_CUINFO_STRIDE, 1512, 0x0000ffff, 0, 0, RW, NONE, "cuinfo stride"),
    H2REG(HWIF_ENC_AV1_CDEF_STRENGTHS6, 1516, 0x3f000000, 24, 0, RW, NONE, "av1_cdef_strengths 6"),
    H2REG(HWIF_ENC_AV1_CDEF_STRENGTHS5, 1516, 0x00fc0000, 18, 0, RW, NONE, "av1_cdef_strengths 5"),
    H2REG(HWIF_ENC_AV1_CDEF_STRENGTHS4, 1516, 0x0003f000, 12, 0, RW, NONE, "av1_cdef_strengths 4"),
    H2REG(HWIF_ENC_AV1_CDEF_STRENGTHS3, 1516, 0x00000fc0, 6, 0, RW, NONE, "av1_cdef_strengths 3"),
    H2REG(HWIF_ENC_AV1_CDEF_STRENGTHS2, 1516, 0x0000003f, 0, 0, RW, NONE, "av1_cdef_strengths 2"),
    H2REG(HWIF_ENC_AV1_CDEF_UV_STRENGTHS4, 1520, 0x3f000000, 24, 0, RW, NONE,
          "av1_cdef_uv_strengths 4"),
    H2REG(HWIF_ENC_AV1_CDEF_UV_STRENGTHS3, 1520, 0x00fc0000, 18, 0, RW, NONE,
          "av1_cdef_uv_strengths 3"),
    H2REG(HWIF_ENC_AV1_CDEF_UV_STRENGTHS2, 1520, 0x0003f000, 12, 0, RW, NONE,
          "av1_cdef_uv_strengths 2"),
    H2REG(HWIF_ENC_AV1_CDEF_STRENGTHS8, 1520, 0x00000fc0, 6, 0, RW, NONE, "av1_cdef_strengths 8"),
    H2REG(HWIF_ENC_AV1_CDEF_STRENGTHS7, 1520, 0x0000003f, 0, 0, RW, NONE, "av1_cdef_strengths 7"),
    H2REG(HWIF_ENC_AV1_CDEF_UV_STRENGTHS8, 1524, 0x00fc0000, 18, 0, RW, NONE,
          "av1_cdef_uv_strengths 8"),
    H2REG(HWIF_ENC_AV1_CDEF_UV_STRENGTHS7, 1524, 0x0003f000, 12, 0, RW, NONE,
          "av1_cdef_uv_strengths 7"),
    H2REG(HWIF_ENC_AV1_CDEF_UV_STRENGTHS6, 1524, 0x00000fc0, 6, 0, RW, NONE,
          "av1_cdef_uv_strengths 6"),
    H2REG(HWIF_ENC_AV1_CDEF_UV_STRENGTHS5, 1524, 0x0000003f, 0, 0, RW, NONE,
          "av1_cdef_uv_strengths 5"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX0, 1528, 0xff000000, 24, 0, RW, NONE, "AV1 qindex for QP 0"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX1, 1528, 0x00ff0000, 16, 0, RW, NONE, "AV1 qindex for QP 1"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX2, 1528, 0x0000ff00, 8, 0, RW, NONE, "AV1 qindex for QP 2"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX3, 1528, 0x000000ff, 0, 0, RW, NONE, "AV1 qindex for QP 3"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX4, 1532, 0xff000000, 24, 0, RW, NONE, "AV1 qindex for QP 4"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX5, 1532, 0x00ff0000, 16, 0, RW, NONE, "AV1 qindex for QP 5"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX6, 1532, 0x0000ff00, 8, 0, RW, NONE, "AV1 qindex for QP 6"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX7, 1532, 0x000000ff, 0, 0, RW, NONE, "AV1 qindex for QP 7"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX8, 1536, 0xff000000, 24, 0, RW, NONE, "AV1 qindex for QP 8"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX9, 1536, 0x00ff0000, 16, 0, RW, NONE, "AV1 qindex for QP 9"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX10, 1536, 0x0000ff00, 8, 0, RW, NONE, "AV1 qindex for QP 10"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX11, 1536, 0x000000ff, 0, 0, RW, NONE, "AV1 qindex for QP 11"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX12, 1540, 0xff000000, 24, 0, RW, NONE, "AV1 qindex for QP 12"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX13, 1540, 0x00ff0000, 16, 0, RW, NONE, "AV1 qindex for QP 13"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX14, 1540, 0x0000ff00, 8, 0, RW, NONE, "AV1 qindex for QP 14"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX15, 1540, 0x000000ff, 0, 0, RW, NONE, "AV1 qindex for QP 15"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX16, 1544, 0xff000000, 24, 0, RW, NONE, "AV1 qindex for QP 16"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX17, 1544, 0x00ff0000, 16, 0, RW, NONE, "AV1 qindex for QP 17"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX18, 1544, 0x0000ff00, 8, 0, RW, NONE, "AV1 qindex for QP 18"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX19, 1544, 0x000000ff, 0, 0, RW, NONE, "AV1 qindex for QP 19"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX20, 1548, 0xff000000, 24, 0, RW, NONE, "AV1 qindex for QP 20"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX21, 1548, 0x00ff0000, 16, 0, RW, NONE, "AV1 qindex for QP 21"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX22, 1548, 0x0000ff00, 8, 0, RW, NONE, "AV1 qindex for QP 22"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX23, 1548, 0x000000ff, 0, 0, RW, NONE, "AV1 qindex for QP 23"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX24, 1552, 0xff000000, 24, 0, RW, NONE, "AV1 qindex for QP 24"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX25, 1552, 0x00ff0000, 16, 0, RW, NONE, "AV1 qindex for QP 25"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX26, 1552, 0x0000ff00, 8, 0, RW, NONE, "AV1 qindex for QP 26"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX27, 1552, 0x000000ff, 0, 0, RW, NONE, "AV1 qindex for QP 27"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX28, 1556, 0xff000000, 24, 0, RW, NONE, "AV1 qindex for QP 28"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX29, 1556, 0x00ff0000, 16, 0, RW, NONE, "AV1 qindex for QP 29"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX30, 1556, 0x0000ff00, 8, 0, RW, NONE, "AV1 qindex for QP 30"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX31, 1556, 0x000000ff, 0, 0, RW, NONE, "AV1 qindex for QP 31"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX32, 1560, 0xff000000, 24, 0, RW, NONE, "AV1 qindex for QP 32"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX33, 1560, 0x00ff0000, 16, 0, RW, NONE, "AV1 qindex for QP 33"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX34, 1560, 0x0000ff00, 8, 0, RW, NONE, "AV1 qindex for QP 34"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX35, 1560, 0x000000ff, 0, 0, RW, NONE, "AV1 qindex for QP 35"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX36, 1564, 0xff000000, 24, 0, RW, NONE, "AV1 qindex for QP 36"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX37, 1564, 0x00ff0000, 16, 0, RW, NONE, "AV1 qindex for QP 37"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX38, 1564, 0x0000ff00, 8, 0, RW, NONE, "AV1 qindex for QP 38"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX39, 1564, 0x000000ff, 0, 0, RW, NONE, "AV1 qindex for QP 39"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX40, 1568, 0xff000000, 24, 0, RW, NONE, "AV1 qindex for QP 40"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX41, 1568, 0x00ff0000, 16, 0, RW, NONE, "AV1 qindex for QP 41"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX42, 1568, 0x0000ff00, 8, 0, RW, NONE, "AV1 qindex for QP 42"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX43, 1568, 0x000000ff, 0, 0, RW, NONE, "AV1 qindex for QP 43"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX44, 1572, 0xff000000, 24, 0, RW, NONE, "AV1 qindex for QP 44"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX45, 1572, 0x00ff0000, 16, 0, RW, NONE, "AV1 qindex for QP 45"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX46, 1572, 0x0000ff00, 8, 0, RW, NONE, "AV1 qindex for QP 46"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX47, 1572, 0x000000ff, 0, 0, RW, NONE, "AV1 qindex for QP 47"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX48, 1576, 0xff000000, 24, 0, RW, NONE, "AV1 qindex for QP 48"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX49, 1576, 0x00ff0000, 16, 0, RW, NONE, "AV1 qindex for QP 49"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX50, 1576, 0x0000ff00, 8, 0, RW, NONE, "AV1 qindex for QP 50"),
    H2REG(HWIF_ENC_AV1_QP2QINDEX51, 1576, 0x000000ff, 0, 0, RW, NONE, "AV1 qindex for QP 51"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_ADDR, 1580, 0xffffffff, 0, 0, RW, ENC_IN,
          "Jpeg roi map buffer address"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_ADDR_MSB, 1584, 0xffffffff, 0, 0, RW, NONE,
          "Jpeg roi map buffer address MSB part"),
    H2REG(HWIF_ENC_JPEG_ROI_ENABLE, 1588, 0x80000000, 31, 1, RW, NONE,
          "Jpeg roi map enable 0=disable. 1=enable."),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE0, 1592, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 0"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE1, 1592, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 1"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE2, 1592, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 2"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE3, 1592, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 3"),
    H2REG(HWIF_ENC_IPCM3_LEFT, 1592, 0xffc00000, 22, 0, RW, NONE, "IPCM3 Area Left"),
    H2REG(HWIF_ENC_IPCM3_RIGHT, 1592, 0x0000ffc0, 6, 0, RW, NONE, "IPCM3 Area Right"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE4, 1596, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 4"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE5, 1596, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 5"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE6, 1596, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 6"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE7, 1596, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 7"),
    H2REG(HWIF_ENC_IPCM3_TOP, 1596, 0xffc00000, 22, 0, RW, NONE, "IPCM3 Area Top"),
    H2REG(HWIF_ENC_IPCM3_BOTTOM, 1596, 0x0000ffc0, 6, 0, RW, NONE, "IPCM3 Area Bottom"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE8, 1600, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 8"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE9, 1600, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 9"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE10, 1600, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 10"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE11, 1600, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 11"),
    H2REG(HWIF_ENC_IPCM4_LEFT, 1600, 0xffc00000, 22, 0, RW, NONE, "IPCM4 Area Left"),
    H2REG(HWIF_ENC_IPCM4_RIGHT, 1600, 0x0000ffc0, 6, 0, RW, NONE, "IPCM4 Area Right"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE12, 1604, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 12"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE13, 1604, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 13"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE14, 1604, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 14"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE15, 1604, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 15"),
    H2REG(HWIF_ENC_IPCM4_TOP, 1604, 0xffc00000, 22, 0, RW, NONE, "IPCM4 Area Top"),
    H2REG(HWIF_ENC_IPCM4_BOTTOM, 1604, 0x0000ffc0, 6, 0, RW, NONE, "IPCM4 Area Bottom"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE16, 1608, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 16"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE17, 1608, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 17"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE18, 1608, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 18"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE19, 1608, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 19"),
    H2REG(HWIF_ENC_IPCM5_LEFT, 1608, 0xffc00000, 22, 0, RW, NONE, "IPCM5 Area Left"),
    H2REG(HWIF_ENC_IPCM5_RIGHT, 1608, 0x0000ffc0, 6, 0, RW, NONE, "IPCM5 Area Right"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE20, 1612, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 20"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE21, 1612, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 21"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE22, 1612, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 22"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE23, 1612, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 23"),
    H2REG(HWIF_ENC_IPCM5_TOP, 1612, 0xffc00000, 22, 0, RW, NONE, "IPCM5 Area Top"),
    H2REG(HWIF_ENC_IPCM5_BOTTOM, 1612, 0x0000ffc0, 6, 0, RW, NONE, "IPCM5 Area Bottom"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE24, 1616, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 24"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE25, 1616, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 25"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE26, 1616, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 26"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE27, 1616, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 27"),
    H2REG(HWIF_ENC_IPCM6_LEFT, 1616, 0xffc00000, 22, 0, RW, NONE, "IPCM6 Area Left"),
    H2REG(HWIF_ENC_IPCM6_RIGHT, 1616, 0x0000ffc0, 6, 0, RW, NONE, "IPCM6 Area Right"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE28, 1620, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 28"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE29, 1620, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 29"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE30, 1620, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 30"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE31, 1620, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 31"),
    H2REG(HWIF_ENC_IPCM6_TOP, 1620, 0xffc00000, 22, 0, RW, NONE, "IPCM6 Area Top"),
    H2REG(HWIF_ENC_IPCM6_BOTTOM, 1620, 0x0000ffc0, 6, 0, RW, NONE, "IPCM6 Area Bottom"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE32, 1624, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 32"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE33, 1624, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 33"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE34, 1624, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 34"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE35, 1624, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 35"),
    H2REG(HWIF_ENC_IPCM7_LEFT, 1624, 0xffc00000, 22, 0, RW, NONE, "IPCM7 Area Left"),
    H2REG(HWIF_ENC_IPCM7_RIGHT, 1624, 0x0000ffc0, 6, 0, RW, NONE, "IPCM7 Area Right"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE36, 1628, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 36"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE37, 1628, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 37"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE38, 1628, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 38"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE39, 1628, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 39"),
    H2REG(HWIF_ENC_IPCM7_TOP, 1628, 0xffc00000, 22, 0, RW, NONE, "IPCM7 Area Top"),
    H2REG(HWIF_ENC_IPCM7_BOTTOM, 1628, 0x0000ffc0, 6, 0, RW, NONE, "IPCM7 Area Bottom"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE40, 1632, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 40"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE41, 1632, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 41"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE42, 1632, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 42"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE43, 1632, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 43"),
    H2REG(HWIF_ENC_IPCM8_LEFT, 1632, 0xffc00000, 22, 0, RW, NONE, "IPCM8 Area Left"),
    H2REG(HWIF_ENC_IPCM8_RIGHT, 1632, 0x0000ffc0, 6, 0, RW, NONE, "IPCM8 Area Right"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE44, 1636, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 44"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE45, 1636, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 45"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE46, 1636, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 46"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE47, 1636, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 47"),
    H2REG(HWIF_ENC_IPCM8_TOP, 1636, 0xffc00000, 22, 0, RW, NONE, "IPCM8 Area Top"),
    H2REG(HWIF_ENC_IPCM8_BOTTOM, 1636, 0x0000ffc0, 6, 0, RW, NONE, "IPCM8 Area Bottom"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE48, 1640, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 48"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE49, 1640, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 49"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE50, 1640, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 50"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE51, 1640, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 51"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE52, 1644, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 52"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE53, 1644, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 53"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE54, 1644, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 54"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE55, 1644, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 55"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE56, 1648, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 56"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE57, 1648, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 57"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE58, 1648, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 58"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE59, 1648, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 59"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE60, 1652, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 60"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE61, 1652, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 61"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE62, 1652, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 62"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE63, 1652, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 63"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE64, 1656, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 64"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE65, 1656, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 65"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE66, 1656, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 66"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE67, 1656, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 67"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE68, 1660, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 68"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE69, 1660, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 69"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE70, 1660, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 70"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE71, 1660, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 71"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE72, 1664, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 72"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE73, 1664, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 73"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE74, 1664, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 74"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE75, 1664, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 75"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE76, 1668, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 76"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE77, 1668, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 77"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE78, 1668, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 78"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE79, 1668, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 79"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE80, 1672, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 80"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE81, 1672, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 81"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE82, 1672, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 82"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE83, 1672, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 83"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE84, 1676, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 84"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE85, 1676, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 85"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE86, 1676, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 86"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE87, 1676, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 87"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE88, 1680, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 88"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE89, 1680, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 89"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE90, 1680, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 90"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE91, 1680, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 91"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE92, 1684, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 92"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE93, 1684, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 93"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE94, 1684, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 94"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE95, 1684, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 95"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE96, 1688, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 96"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE97, 1688, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 97"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE98, 1688, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 98"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE99, 1688, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 99"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE100, 1692, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 100"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE101, 1692, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 101"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE102, 1692, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 102"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE103, 1692, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 103"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE104, 1696, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 104"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE105, 1696, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 105"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE106, 1696, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 106"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE107, 1696, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 107"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE108, 1700, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 108"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE109, 1700, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 109"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE110, 1700, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 110"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE111, 1700, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 111"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE112, 1704, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 112"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE113, 1704, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 113"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE114, 1704, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 114"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE115, 1704, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 115"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE116, 1708, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 116"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE117, 1708, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 117"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE118, 1708, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 118"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE119, 1708, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 119"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE120, 1712, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 120"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE121, 1712, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 121"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE122, 1712, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 122"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE123, 1712, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 123"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE124, 1716, 0xff000000, 24, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 124"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE125, 1716, 0x00ff0000, 16, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 125"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE126, 1716, 0x0000ff00, 8, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 126"),
    H2REG(HWIF_ENC_JPEG_ROIMAP_QPTABLENONROI_VALUE127, 1716, 0x000000ff, 0, 0, RW, NONE,
          "Jpeg roi map qpTableNonRoi value 127"),
    H2REG(HWIF_ENC_HWAV1RDOQSUPPORT, 1720, 0x80000000, 31, 0, RO, NONE,
          "AV1 RDOQ supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWAV1INTERPFILTERSWITCHABLE, 1720, 0x40000000, 30, 0, RO, NONE,
          "AV1 interp filter switchable supported by HW. 0=not supported. "
          "1=supported"),
    H2REG(HWIF_ENC_HWJPEGROIMAPSUPPORT, 1720, 0x20000000, 29, 0, RO, NONE,
          "HW Jpeg support RoiMap. 0=not supported. 1=supported."),
    H2REG(HWIF_ENC_HWBACKGROUNDDETSUPPORT, 1720, 0x10000000, 28, 0, RO, NONE,
          "HW Back ground detection support. 0=not supported. 1=supported."),
    H2REG(HWIF_ENC_HWVP9RDOQSUPPORT, 1720, 0x08000000, 27, 0, RO, NONE,
          "VP9 RDOQ supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWCTBBITSOUTSUPPORT, 1720, 0x04000000, 26, 0, RO, NONE,
          "HW encoded bits output for each ctb supported by HW. 0=not "
          "supported. 1=supported"),
    H2REG(HWIF_ENC_HWVISUALTUNESUPPORT, 1720, 0x02000000, 25, 0, RO, NONE,
          "visual tune support.0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWPSYTUNESUPPORT, 1720, 0x01000000, 24, 0, RO, NONE,
          "psy tune support.0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWNONROTATIONSUPPORT, 1720, 0x00800000, 23, 0, RO, NONE,
          "HW not support rotation. 0=supported. 1= not supported"),
    H2REG(HWIF_ENC_HWNVFORMATONLYSUPPORT, 1720, 0x00400000, 22, 0, RO, NONE,
          "HW only support nv input format. 0=support all input format. 1=only "
          "support nv input format"),
    H2REG(HWIF_ENC_HWMOSAICSUPPORT, 1720, 0x00200000, 21, 0, RO, NONE,
          "HW mosaic feature support. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWIPCM8SUPPORT, 1720, 0x00100000, 20, 0, RO, NONE,
          "HW mosaic feature support. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWAQINFORMATIONOUTPUTSUPPORT, 1720, 0x00080000, 19, 0, RO, NONE,
          "Support of AQ information output. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWPSNRSUPPORT, 1720, 0x00040000, 18, 0, RO, NONE,
          "PSNR calculation supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWPRPSBISUPPORT, 1720, 0x00020000, 17, 0, RO, NONE,
          "PSNR calculation supported by HW. 0=not supported. 1=supported"),
    H2REG(HWIF_ENC_HWAV1PRECARRYBUFFERLIMIT, 1724, 0xffffffff, 0, 0, RW, NONE,
          "size of AV1 precarry buffer"),
    H2REG(HWIF_ENC_OVERLAY_VSTEP, 1728, 0xffff0000, 16, 1, RW, NONE,
          "Overlay vertical up scale step"),
    H2REG(HWIF_ENC_OVERLAY_HSTEP, 1728, 0x0000ffff, 0, 1, RW, NONE,
          "Overlay horizontal up scale step"),
    H2REG(HWIF_ENC_OVERLAY_SCALE_WIDTH, 1732, 0xffff0000, 16, 1, RW, NONE,
          "Overlay up scale width"),
    H2REG(HWIF_ENC_OVERLAY_SCALE_HEIGHT, 1732, 0x0000ffff, 0, 1, RW, NONE,
          "Overlay up scale height"),
    H2REG(HWIF_ENC_VP9_SEG_TREE_PROB1, 1736, 0xff000000, 24, 0, RW, NONE,
          "Vp9 segment tree probability 1"),
    H2REG(HWIF_ENC_VP9_SEG_TREE_PROB2, 1736, 0x00ff0000, 16, 0, RW, NONE,
          "Vp9 segment tree probability 2"),
    H2REG(HWIF_ENC_VP9_SEG_TREE_PROB3, 1736, 0x0000ff00, 8, 0, RW, NONE,
          "Vp9 segment tree probability 3"),
    H2REG(HWIF_ENC_VP9_SEG_TREE_PROB4, 1736, 0x000000ff, 0, 0, RW, NONE,
          "Vp9 segment tree probability 4"),
    H2REG(HWIF_ENC_VP9_SEG_TREE_PROB5, 1740, 0xff000000, 24, 0, RW, NONE,
          "Vp9 segment tree probability 5"),
    H2REG(HWIF_ENC_VP9_SEG_TREE_PROB6, 1740, 0x00ff0000, 16, 0, RW, NONE,
          "Vp9 segment tree probability 6"),
    H2REG(HWIF_ENC_VP9_SEG_TREE_PROB7, 1740, 0x0000ff00, 8, 0, RW, NONE,
          "Vp9 segment tree probability 7"),
    H2REG(HWIF_ENC_CTB_BITS_OUT_ENABLE, 1740, 0x00000080, 7, 1, RW, NONE, "Ctb bits output enable"),
    H2REG(HWIF_ENC_CTB_BITS_OUT_ADDR, 1744, 0xffffffff, 0, 0, RW, ENC_OUT,
          "Ctb bits output buffer address"),
    H2REG(HWIF_ENC_CTB_BITS_OUT_ADDR_MSB, 1748, 0xffffffff, 0, 0, RW, NONE,
          "Ctb bits output buffer address MSB"),
    H2REG(HWIF_ENC_H264_INTRAMODE4X4_DISABLE, 1752, 0x80000000, 31, 0, RW, NONE,
          "h264 intra mode 4x4 disable. 0-enable. 1-disable"),
    H2REG(HWIF_ENC_H264_INTRAMODE8X8_DISABLE, 1752, 0x40000000, 30, 0, RW, NONE,
          "h264 intra mode 8x8 disable.0-enable. 1-disable"),
    H2REG(HWIF_ENC_REFERENCE_USE_INPUT_ENABLE, 1752, 0x20000000, 29, 0, RW, NONE,
          "reference frame using input source frame enable.0-disable. 1-enable"),
    H2REG(HWIF_ENC_ME_LAMBDA_QP, 1752, 0x1f800000, 23, 0, RW, NONE,
          "QP used in calculating Lambda for ME"),
    H2REG(HWIF_ENC_BI_MV_IN_LDB_DISABLE, 1752, 0x00400000, 22, 0, RW, NONE,
          "Bi-direction MV in low delay B disable. 0-enable. 1-disable"),
    H2REG(HWIF_ENC_INLOOP_DS_BILINEAR_ENABLE, 1752, 0x00200000, 21, 0, RW, NONE,
          "inloop down-sample using bilinear enable. 0-disable. 1-enable"),
    H2REG(HWIF_ENC_PRED_MODE_BY_SATD_ENABLE, 1752, 0x00100000, 20, 0, RW, NONE,
          "pred mode by satd enable. 0-disable. 1-enable"),
    H2REG(HWIF_ENC_PSY_FACTOR, 1752, 0x000ffe00, 9, 0, RW, NONE,
          "psy factor. 0 means disable psy. Q3.8"),
    H2REG(HWIF_ENC_HEVC_SIMPLE_RDO_ASSIGN, 1752, 0x00000180, 7, 0, RW, NONE,
          "hevc simple rdo assignment. 0 for disable. 1-3 for CU8x8-32x32 only"),
    H2REG(HWIF_ENC_OVERLAY_ENABLE9, 1752, 0x00000040, 6, 1, RW, NONE, "Overlay 9 enable"),
    H2REG(HWIF_ENC_OVERLAY_ENABLE10, 1752, 0x00000020, 5, 1, RW, NONE, "Overlay 10 enable"),
    H2REG(HWIF_ENC_OVERLAY_ENABLE11, 1752, 0x00000010, 4, 1, RW, NONE, "Overlay 11 enable"),
    H2REG(HWIF_ENC_OVERLAY_ENABLE12, 1752, 0x00000008, 3, 1, RW, NONE, "Overlay 12 enable"),
    H2REG(HWIF_ENC_OVERLAY_HEIGHT9, 1756, 0xffff0000, 16, 1, RW, NONE, "Overlay 9 height"),
    H2REG(HWIF_ENC_OVERLAY_WIDTH9, 1756, 0x0000ffff, 0, 0, RW, NONE, "Overlay 9 width"),
    H2REG(HWIF_ENC_OVERLAY_YOFFSET9, 1760, 0xffff0000, 16, 0, RW, NONE, "Overlay 9 y offset"),
    H2REG(HWIF_ENC_OVERLAY_XOFFSET9, 1760, 0x0000ffff, 0, 0, RW, NONE, "Overlay 9 x offset"),
    H2REG(HWIF_ENC_OVERLAY_HEIGHT10, 1764, 0xffff0000, 16, 1, RW, NONE, "Overlay 10 height"),
    H2REG(HWIF_ENC_OVERLAY_WIDTH10, 1764, 0x0000ffff, 0, 0, RW, NONE, "Overlay 10 width"),
    H2REG(HWIF_ENC_OVERLAY_YOFFSET10, 1768, 0xffff0000, 16, 0, RW, NONE, "Overlay 10 y offset"),
    H2REG(HWIF_ENC_OVERLAY_XOFFSET10, 1768, 0x0000ffff, 0, 0, RW, NONE, "Overlay 10 x offset"),
    H2REG(HWIF_ENC_OVERLAY_HEIGHT11, 1772, 0xffff0000, 16, 1, RW, NONE, "Overlay 11 height"),
    H2REG(HWIF_ENC_OVERLAY_WIDTH11, 1772, 0x0000ffff, 0, 0, RW, NONE, "Overlay 11 width"),
    H2REG(HWIF_ENC_OVERLAY_YOFFSET11, 1776, 0xffff0000, 16, 0, RW, NONE, "Overlay 11 y offset"),
    H2REG(HWIF_ENC_OVERLAY_XOFFSET11, 1776, 0x0000ffff, 0, 0, RW, NONE, "Overlay 11 x offset"),
    H2REG(HWIF_ENC_OVERLAY_HEIGHT12, 1780, 0xffff0000, 16, 1, RW, NONE, "Overlay 12 height"),
    H2REG(HWIF_ENC_OVERLAY_WIDTH12, 1780, 0x0000ffff, 0, 0, RW, NONE, "Overlay 12 width"),
    H2REG(HWIF_ENC_OVERLAY_YOFFSET12, 1784, 0xffff0000, 16, 0, RW, NONE, "Overlay 12 y offset"),
    H2REG(HWIF_ENC_OVERLAY_XOFFSET12, 1784, 0x0000ffff, 0, 0, RW, NONE, "Overlay 12 x offset"),
    H2REG(HWIF_ENC_RDOQ_LAMBDA_ADJUST_INTRA, 1788, 0xffff0000, 16, 0, RW, NONE,
          "rdoq intra lambda adjustment factor. 0 for disable. Q2.14."),
    H2REG(HWIF_ENC_RDOQ_LAMBDA_ADJUST_INTER, 1788, 0x0000ffff, 0, 0, RW, NONE,
          "rdoq inter lambda adjustment factor. 0 for disable. Q2.14."),
    H2REG(HWIF_ENC_AQ_INFORMATION_OUTPUT_MODE, 1792, 0xe0000000, 29, 0, 1, NONE,
          "aq information output mode"),
    H2REG(HWIF_ENC_AQ_STRENGTH, 1792, 0x1ff00000, 20, 0, 1, NONE, "strength of aq mode"),
    H2REG(HWIF_ENC_AQ_INFORMATION_OUTPUT_STRIDE, 1792, 0x000fffff, 0, 0, 1, NONE,
          "aq information output buffer stride"),
    H2REG(HWIF_ENC_AQ_INFORMATION_OUTPUT_BASE, 1796, 0xffffffff, 0, 0, RW, ENC_OUT,
          "Base address for AQ information LSB"),
    H2REG(HWIF_ENC_AQ_INFORMATION_OUTPUT_BASE_MSB, 1800, 0xffffffff, 0, 0, RW, NONE,
          "Base address for AQ information MSB"),
    H2REG(HWIF_ENC_TMVP_MVINFO_ADDR, 1804, 0xffffffff, 0, 0, RW, ENC_OUT,
          "Base address to store mv info for TMVP"),
    H2REG(HWIF_ENC_TMVP_MVINFO_ADDR_MSB, 1808, 0xffffffff, 0, 0, RW, NONE,
          "Base address to store mv info for TMVP MSB"),
    H2REG(HWIF_ENC_TMVP_REF_MVINFO_L0_ADDR, 1812, 0xffffffff, 0, 0, RW, ENC_IN,
          "Base address of reference frame L0 mv info"),
    H2REG(HWIF_ENC_TMVP_REF_MVINFO_L0_ADDR_MSB, 1816, 0xffffffff, 0, 0, RW, NONE,
          "Base address of reference frame L0 mv info MSB"),
    H2REG(HWIF_ENC_TMVP_REF_MVINFO_L1_ADDR, 1820, 0xffffffff, 0, 0, RW, ENC_IN,
          "Base address of reference frame L1 mv info"),
    H2REG(HWIF_ENC_TMVP_REF_MVINFO_L1_ADDR_MSB, 1824, 0xffffffff, 0, 0, RW, NONE,
          "Base address of reference frame L1 mv info MSB"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR9, 1828, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 9 input luma buffer address"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR9_MSB, 1832, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 9 input luma buffer address MSB part"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR9, 1836, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 9 input chroma U buffer address"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR9_MSB, 1840, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 9 input chroma U buffer address MSB part"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR9, 1844, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 9 input chroma V buffer address"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR9_MSB, 1848, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 9 input chroma V buffer address MSB part"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR10, 1852, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 10 input luma buffer address"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR10_MSB, 1856, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 10 input luma buffer address MSB part"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR10, 1860, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 10 input chroma U buffer address"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR10_MSB, 1864, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 10 input chroma U buffer address MSB part"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR10, 1868, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 10 input chroma V buffer address"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR10_MSB, 1872, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 10 input chroma V buffer address MSB part"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR11, 1876, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 11 input luma buffer address"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR11_MSB, 1880, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 11 input luma buffer address MSB part"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR11, 1884, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 11 input chroma U buffer address"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR11_MSB, 1888, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 11 input chroma U buffer address MSB part"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR11, 1892, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 11 input chroma V buffer address"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR11_MSB, 1896, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 11 input chroma V buffer address MSB part"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR12, 1900, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 12 input luma buffer address"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_YADDR12_MSB, 1904, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 12 input luma buffer address MSB part"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR12, 1908, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 12 input chroma U buffer address"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_UADDR12_MSB, 1912, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 12 input chroma U buffer address MSB part"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR12, 1916, 0xffffffff, 0, 0, RW, ENC_IN,
          "Overlay 12 input chroma V buffer address"),
    H2REG(HWIF_ENC_OVERLAY_INPUT_VADDR12_MSB, 1920, 0xffffffff, 0, 0, RW, NONE,
          "Overlay 12 input chroma V buffer address MSB part"),
    H2REG(HWIF_ENC_OVERLAY_ALPHA9, 1924, 0xff000000, 24, 0, RW, NONE, "Overlay 9 alpha value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPY9, 1924, 0x00ff0000, 16, 0, RW, NONE, "Overlay 9 bitmap Y value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPU9, 1924, 0x0000ff00, 8, 0, RW, NONE, "Overlay 9 bitmap U value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPV9, 1924, 0x000000ff, 0, 0, RW, NONE, "Overlay 9 bitmap V value"),
    H2REG(HWIF_ENC_OVERLAY_ALPHA10, 1928, 0xff000000, 24, 0, RW, NONE, "Overlay 10 alpha value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPY10, 1928, 0x00ff0000, 16, 0, RW, NONE,
          "Overlay 10 bitmap Y value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPU10, 1928, 0x0000ff00, 8, 0, RW, NONE,
          "Overlay 10 bitmap U value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPV10, 1928, 0x000000ff, 0, 0, RW, NONE,
          "Overlay 10 bitmap V value"),
    H2REG(HWIF_ENC_OVERLAY_ALPHA11, 1932, 0xff000000, 24, 0, RW, NONE, "Overlay 11 alpha value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPY11, 1932, 0x00ff0000, 16, 0, RW, NONE,
          "Overlay 11 bitmap Y value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPU11, 1932, 0x0000ff00, 8, 0, RW, NONE,
          "Overlay 11 bitmap U value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPV11, 1932, 0x000000ff, 0, 0, RW, NONE,
          "Overlay 11 bitmap V value"),
    H2REG(HWIF_ENC_OVERLAY_ALPHA12, 1936, 0xff000000, 24, 0, RW, NONE, "Overlay 12 alpha value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPY12, 1936, 0x00ff0000, 16, 0, RW, NONE,
          "Overlay 12 bitmap Y value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPU12, 1936, 0x0000ff00, 8, 0, RW, NONE,
          "Overlay 12 bitmap U value"),
    H2REG(HWIF_ENC_OVERLAY_BITMAPV12, 1936, 0x000000ff, 0, 0, RW, NONE,
          "Overlay 12 bitmap V value"),
    H2REG(HWIF_ENC_OVERLAY_YSTRIDE9, 1940, 0xfffff000, 12, 1, RW, NONE, "Overlay 9 Y stride"),
    H2REG(HWIF_ENC_OVERLAY_FORMAT9, 1940, 0x00000c00, 10, 1, RW, NONE, "Overlay 9 format"),
    H2REG(HWIF_ENC_OVERLAY_FORMAT10, 1940, 0x00000300, 8, 1, RW, NONE, "Overlay 10 format"),
    H2REG(HWIF_ENC_OVERLAY_FORMAT11, 1940, 0x000000c0, 6, 1, RW, NONE, "Overlay 11 format"),
    H2REG(HWIF_ENC_OVERLAY_FORMAT12, 1940, 0x00000030, 4, 1, RW, NONE, "Overlay 12 format"),
    H2REG(HWIF_ENC_OVERLAY_UVSTRIDE9, 1944, 0xfffff000, 12, 1, RW, NONE, "Overlay 9 UV stride"),
    H2REG(HWIF_ENC_OVERLAY_YSTRIDE10, 1948, 0xfffff000, 12, 1, RW, NONE, "Overlay 10 Y stride"),
    H2REG(HWIF_ENC_OVERLAY_UVSTRIDE10, 1952, 0xfffff000, 12, 1, RW, NONE, "Overlay 10 UV stride"),
    H2REG(HWIF_ENC_OVERLAY_YSTRIDE11, 1956, 0xfffff000, 12, 1, RW, NONE, "Overlay 11 Y stride"),
    H2REG(HWIF_ENC_OVERLAY_UVSTRIDE11, 1960, 0xfffff000, 12, 1, RW, NONE, "Overlay 11 UV stride"),
    H2REG(HWIF_ENC_OVERLAY_YSTRIDE12, 1964, 0xfffff000, 12, 1, RW, NONE, "Overlay 12 Y stride"),
    H2REG(HWIF_ENC_OVERLAY_UVSTRIDE12, 1968, 0xfffff000, 12, 1, RW, NONE, "Overlay 12 UV stride"),
    H2REG(HWIF_ENC_CTRL_CLOCK, 1972, 0x00010000, 16, 1, RW, NONE, "Enable clock ctrl by SW"),
    H2REG(HWIF_ENC_ENABLE_CLOCK, 1972, 0x00000100, 8, 1, RW, NONE,
          "Enable internal clock of encoder"),
    H2REG(HWIF_ENC_ASSERT_RESET, 1972, 0x00000001, 0, 1, RW, NONE,
          "Assert internal reset.0:assert reset 1:de-assert reset"),
    H2REG(HWIF_ENC_TILESYNCREADBASE, 1976, 0xffffffff, 0, 0, RW, NONE,
          "tile column info read buffer base address"),
    H2REG(HWIF_ENC_TILESYNCREADBASE_MSB, 1980, 0xffffffff, 0, 0, RW, NONE,
          "tile column info read buffer base address MSB"),
    H2REG(HWIF_ENC_TILESYNCWRITEBASE, 1984, 0xffffffff, 0, 0, RW, NONE,
          "tile column info write buffer base address"),
    H2REG(HWIF_ENC_TILESYNCWRITEBASE_MSB, 1988, 0xffffffff, 0, 0, RW, NONE,
          "tile column info write buffer base address MSB"),
    H2REG(HWIF_ENC_TILEHEIGHTSBASE, 1992, 0xffffffff, 0, 0, RW, NONE,
          "tile height buffer base address"),
    H2REG(HWIF_ENC_TILEHEIGHTSBASE_MSB, 1996, 0xffffffff, 0, 0, RW, NONE,
          "tile height buffer base address MSB"),
    H2REG(HWIF_ENC_REQUEST_SEG_NUM_2, 2000, 0x3ff00000, 20, 0, RO, NONE,
          "seg num of successful handshaking request channel 2"),
    H2REG(HWIF_ENC_REQUEST_SEG_NUM_1, 2000, 0x000ffc00, 10, 0, RO, NONE,
          "seg num of successful handshaking request channel 1"),
    H2REG(HWIF_ENC_REQUEST_SEG_NUM_0, 2000, 0x000003ff, 0, 0, RO, NONE,
          "seg num of successful handshaking request channel 0"),
    H2REG(HWIF_ENC_COLLOCATE_REFIDX, 2004, 0x80000000, 31, 0, RW, NONE,
          "HEVC collocated frame refIdx"),
    H2REG(HWIF_ENC_COLLOCATE_FROM_L0, 2004, 0x40000000, 30, 0, RW, NONE,
          "HEVC collocated frame from L0 indicator"),
    H2REG(HWIF_ENC_UPDATE_SEG_NUM_2, 2004, 0x3ff00000, 20, 0, RO, NONE,
          "seg num of successful handshaking update channel 2"),
    H2REG(HWIF_ENC_UPDATE_SEG_NUM_1, 2004, 0x000ffc00, 10, 0, RO, NONE,
          "seg num of successful handshaking update channel 1"),
    H2REG(HWIF_ENC_UPDATE_SEG_NUM_0, 2004, 0x000003ff, 0, 0, RO, NONE,
          "seg num of successful handshaking update channel 0"),
    H2REG(HWIF_ENC_RPLL0_DELTAPOC_L0_IDX1, 2008, 0xffff0000, 16, 0, RW, NONE,
          "L0 reference frame L0 refIdx 1 delta poc "),
    H2REG(HWIF_ENC_RPLL0_DELTAPOC_L0_IDX0, 2008, 0x0000ffff, 0, 0, RW, NONE,
          "L0 reference frame L0 refIdx 0 delta poc "),
    H2REG(HWIF_ENC_RPLL0_DELTAPOC_L1_IDX1, 2012, 0xffff0000, 16, 0, RW, NONE,
          "L0 reference frame L1 refIdx 1 delta poc "),
    H2REG(HWIF_ENC_RPLL0_DELTAPOC_L1_IDX0, 2012, 0x0000ffff, 0, 0, RW, NONE,
          "L0 reference frame L1 refIdx 0 delta poc "),
    H2REG(HWIF_ENC_RPLL1_DELTAPOC_L0_IDX1, 2016, 0xffff0000, 16, 0, RW, NONE,
          "L1 reference frame L0 refIdx 1 delta poc "),
    H2REG(HWIF_ENC_RPLL1_DELTAPOC_L0_IDX0, 2016, 0x0000ffff, 0, 0, RW, NONE,
          "L1 reference frame L0 refIdx 0 delta poc "),
    H2REG(HWIF_ENC_RPLL1_DELTAPOC_L1_IDX1, 2020, 0xffff0000, 16, 0, RW, NONE,
          "L1 reference frame L1 refIdx 1 delta poc "),
    H2REG(HWIF_ENC_RPLL1_DELTAPOC_L1_IDX0, 2020, 0x0000ffff, 0, 0, RW, NONE,
          "L1 reference frame L1 refIdx 0 delta poc "),
    H2REG(HWIF_ENC_AV1_LASTALT_ORDERHINT, 2024, 0xffffffff, 0, 0, RW, NONE,
          "av1 order hint for LAST_FRAME's ALTREF slot"),
    H2REG(HWIF_ENC_BUILD_ID, 2036, 0xffffffff, 0, 0, RO, NONE, "Build ID"),
    H2REG(HWIF_ENC_BUILD_CL, 2040, 0xffffffff, 0, 0, RO, NONE, "Build CL"),
    H2REG(HWIF_ENC_BUILD_DATE, 2044, 0xffffffff, 0, 0, RO, NONE, "Build Date"),
#include "registertable_IM.h"
